<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客搭建及使用</title>
    <url>/2022/01/02/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><ul>
<li>官网下载并安装：&lt;<a href="https://nodejs.org/zh-cn/&gt;">https://nodejs.org/zh-cn/&gt;</a></li>
<li>将Node.js添加到环境变量</li>
<li>验证：<code>node -v</code></li>
</ul>
<span id="more"></span>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul>
<li>官网下载并安装：&lt;<a href="https://git-scm.com/&gt;">https://git-scm.com/&gt;</a></li>
<li>将 Git 添加到环境变量（安装时默认添加）</li>
<li>验证：<code>git -v</code></li>
</ul>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ul>
<li>打开 git bash，输入命令：<code>npm install hexo-cli -g</code> 全局安装 Hexo</li>
<li>验证：<code>hexo -v</code></li>
</ul>
<h3 id="Git-配置及-GitHub-仓库建立"><a href="#Git-配置及-GitHub-仓库建立" class="headerlink" title="Git 配置及 GitHub 仓库建立"></a>Git 配置及 GitHub 仓库建立</h3><ul>
<li>设置 Git 用户名及邮箱<ul>
<li><code>git config --global user.name &quot;$&#123;username&#125;&quot;</code> ${username} 替换为 GitHub 用户名</li>
<li><code>git config --global user.email &quot;$&#123;email&#125;&quot;</code> ${email} 替换为注册 GitHub 的邮箱</li>
<li>查看全局配置是否成功 <code>git config --global --list</code></li>
</ul>
</li>
<li>设置 ssh key<ul>
<li><code>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</code> 一路确认生成 ssh key</li>
<li><code>ls -al ~/.ssh</code> 查看是否成功生成，复制 <em>id_ed25519.pub</em> 文件中的内容到 GitHub 设置中的 ‘SSH and GPG keys’ 项中</li>
<li>验证：<code>ssh -T git@github.com</code></li>
</ul>
</li>
<li>新建 GitHub 仓库<ul>
<li>新建一个仓库，仓库名为 ‘github用户名.github.io’</li>
</ul>
</li>
</ul>
<h2 id="使用-Hexo-搭建博客"><a href="#使用-Hexo-搭建博客" class="headerlink" title="使用 Hexo 搭建博客"></a>使用 Hexo 搭建博客</h2><h3 id="本地初始化"><a href="#本地初始化" class="headerlink" title="本地初始化"></a>本地初始化</h3><ul>
<li><code>hexo init blog</code> 初始化一个 blog 文件夹放置 hexo 代码</li>
<li><code>cd blog</code> 进入 blog 文件夹</li>
<li><code>hexo g</code> 生成静态文件</li>
<li><code>hexo s</code> 启动本地服务器，默认网址为：&lt;<a href="http://localhost:4000/&gt;">http://localhost:4000/&gt;</a></li>
</ul>
<h3 id="部署到远程仓库"><a href="#部署到远程仓库" class="headerlink" title="部署到远程仓库"></a>部署到远程仓库</h3><ul>
<li><code>npm install hexo-deployer-git --save</code> 安装插件</li>
<li><p>修改 <em>hexo/_config.yml</em> 文件内容，在最后添加如下信息：</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">    <span class="attr">repository:</span> <span class="string">你新建仓库的ssh链接</span>  </span><br><span class="line">    <span class="string">branch:master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>hexo d</code> 将本地文件推送到 GitHub 仓库</p>
</li>
</ul>
<h2 id="Hexo-博客使用"><a href="#Hexo-博客使用" class="headerlink" title="Hexo 博客使用"></a>Hexo 博客使用</h2><p>Hexo 官网：&lt;<a href="https://hexo.io/zh-cn/&gt;">https://hexo.io/zh-cn/&gt;</a></p>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p><code>hexo new [layout] &lt;title&gt;</code> 命令用于新建文章或页面</p>
<p><code>layout</code> 可取 <code>post</code>, <code>page</code>, <code>draft</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">布局</th>
<th style="text-align:center">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">post</td>
<td style="text-align:center">source/_posts</td>
</tr>
<tr>
<td style="text-align:center">page</td>
<td style="text-align:center">source</td>
</tr>
<tr>
<td style="text-align:center">draft</td>
<td style="text-align:center">source/_drafts</td>
</tr>
</tbody>
</table>
</div>
<h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4><p>草稿在建立时会被保存到 <em>source/_drafts</em> 文件夹，可以通过 <code>publish</code> 命令将草稿移动到 <em>source/_posts</em> 文件夹</p>
<p>草稿默认不会显示在页面中，可以在执行时加上 <code>--draft</code> 参数（如 <code>hexo s --draft</code>）或将站点配置文件 <em>_config.yml</em> 中的 <code>render_drafts</code> 参数设为 <code>true</code> 也可以预览草稿</p>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>在使用 <code>hexo new</code> 命令新建文章时，会根据 <em>scaffolds</em> 文件夹内对应的文件来建立文件</p>
<p>如 <em>scaffolds/post.md</em> 中的内容会在新建 post 时自动添加到文章中</p>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是指文件最上方以 <code>---</code> 分割的区域，用于指定个别文件的变量，如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022</span><span class="string">/6/18</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>以下是预定义的参数</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局</td>
<td style="text-align:center">config.default_layout</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
<td style="text-align:center">文章的文件名</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">建立日期</td>
<td style="text-align:center">文件建立日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:center">更新日期</td>
<td style="text-align:center">文件更新日期</td>
</tr>
<tr>
<td style="text-align:center">comments</td>
<td style="text-align:center">开启文章的评论功能</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">标签（不适用于分页）</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">categories</td>
<td style="text-align:center">分类（不适用于分页）</td>
</tr>
</tbody>
</table>
</div>
<h3 id="分类及标签"><a href="#分类及标签" class="headerlink" title="分类及标签"></a>分类及标签</h3><p>只有文章支持分类与标签，可以在 Front-matter 中设置。在 Hexo 中，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">计算机</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">编程</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">python3</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">编程语言</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">python3</span></span><br></pre></td></tr></table></figure>
<p>Hexo 不支持指定多个同级分类，下述的分类方式会使“编程”变为“计算机”的子分类</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">计算机</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">编程</span></span><br></pre></td></tr></table></figure>
<p>可以为文章添加多个分类，使用 list 的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">计算机，编程</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">计算机，语言</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Python3</span>]</span><br></pre></td></tr></table></figure>
<p>上述分类方式将使文章同时包括三个分类：“编程”，“语言”都是“计算机”的子分类，同时“Python3”是一个没有子分类的分类</p>
<h3 id="Json-Front-matter"><a href="#Json-Front-matter" class="headerlink" title="Json Front-matter"></a>Json Front-matter</h3><p>可以使用 JSON 编写 Front-matter，只需将 <code>---</code> 更换为 <code>;;;</code></p>
<h2 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h2><p>这里用于记录在使用博客过程中遇到的问题以及解决方案</p>
<h3 id="Hexo-无法正确预览数学公式"><a href="#Hexo-无法正确预览数学公式" class="headerlink" title="Hexo 无法正确预览数学公式"></a>Hexo 无法正确预览数学公式</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在 markdown 文章中使用了 <code>$</code> 修饰的数学公式，在 VsCode 的预览插件下正常执行，但是在 <code>hexo s</code> 预览时发现公式失效</p>
<p>原文：<br><img src="/2022/01/02/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/problem_math_1.jpg" class="" title="无法正确预览数学公式图1"></p>
<p>错误显示效果：<br><img src="/2022/01/02/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/problem_math_2.jpg" class="" title="无法正确预览数学公式图2"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="更换-Hexo-的-markdwon-渲染引擎"><a href="#更换-Hexo-的-markdwon-渲染引擎" class="headerlink" title="更换 Hexo 的 markdwon 渲染引擎"></a>更换 Hexo 的 markdwon 渲染引擎</h5><p>首先将默认渲染引擎 hexo-renderer-marked 卸载</p>
<p><code>npm uninstall hexo-renderer-marked --save</code></p>
<p>然后安装 hexo-renderer-kramed 引擎，该引擎是 hexo-renderer-marked 的改进版</p>
<p><code>npm install hexo-renderer-kramed --save</code></p>
<h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><p>找到 <em>node_modules\kramed\lib\rules\inline.js</em> 文件，将第 11 行的 <code>escape</code> 变量的值修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>
<p>将第 20 行的 <code>em</code> 变量修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  <span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<h5 id="在主题中启用-mathjax"><a href="#在主题中启用-mathjax" class="headerlink" title="在主题中启用 mathjax"></a>在主题中启用 mathjax</h5><p>在 <em>next/_config.yml</em> 中修改 math 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure>
<h5 id="在文章的-Front-matter-中打开-mathjax"><a href="#在文章的-Front-matter-中打开-mathjax" class="headerlink" title="在文章的 Front-matter 中打开 mathjax"></a>在文章的 Front-matter 中打开 mathjax</h5><p>在需要使用公式的文章的 Front-matter 中添加属性</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">XXX</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">XXX</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="重启-Hexo"><a href="#重启-Hexo" class="headerlink" title="重启 Hexo"></a>重启 Hexo</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存文件</span><br><span class="line">hexo g -d  #生成并部署hexo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记-1</title>
    <url>/2022/05/12/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p><code>SELECT</code> 语句用于从一个或多个表中检索数据</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns_list</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>SELECT</code> 后可以跟一个或多个数据表的列</li>
<li><code>columns_list</code> 可以有多个列，他们之间用 <code>,</code> 分割</li>
<li>当要检索数据表中的所有列的时候，使用 <code>SELECT * FROM table_name</code></li>
<li><code>FROM</code> 后跟着要从中检索数据的表名</li>
<li>分号 <code>;</code> 表示语句的结束，它是可选的。如果有两条或更多条语句，则需要使用分号 <code>;</code> 将它们分开，以便 MySQL 单独执行每条语句</li>
</ul>
<p><code>SELECT</code> 语句的正确语义应是 <code>FROM table_name SELECT columns_list;</code>，即：从某个表检索某几列数据。MySQL 解析 <code>SELECT</code> 语句的时候，会首先评估 <code>FROM</code> 子句，再评估 <code>SELECT</code> 子句</p>
<span id="more"></span>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 数据库 Sakila 中的 actor 表结构如下： */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Field       <span class="operator">|</span> Type              <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>           <span class="operator">|</span> Extra                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id    <span class="operator">|</span> <span class="type">smallint</span> unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span> auto_increment                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">45</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">45</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_update <span class="operator">|</span> <span class="type">timestamp</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span> DEFAULT_GENERATED <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 SELECT 语句从 actor 表中选择所有演员的姓 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 SELECT 语句查询多个字段，大小写均可 */</span></span><br><span class="line"><span class="keyword">select</span> first_name, last_name <span class="keyword">from</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> first_name  <span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> PENELOPE    <span class="operator">|</span> GUINESS      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NICK        <span class="operator">|</span> WAHLBERG     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ED          <span class="operator">|</span> CHASE        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JENNIFER    <span class="operator">|</span> DAVIS        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JOHNNY      <span class="operator">|</span> LOLLOBRIGIDA <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BETTE       <span class="operator">|</span> NICHOLSON    <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查询所有字段 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name  <span class="operator">|</span> last_name    <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> PENELOPE    <span class="operator">|</span> GUINESS      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> NICK        <span class="operator">|</span> WAHLBERG     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span> ED          <span class="operator">|</span> CHASE        <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>      <span class="number">198</span> <span class="operator">|</span> MARY        <span class="operator">|</span> KEITEL       <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">199</span> <span class="operator">|</span> JULIA       <span class="operator">|</span> FAWCETT      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">200</span> <span class="operator">|</span> THORA       <span class="operator">|</span> TEMPLE       <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+---------------------+</span></span><br></pre></td></tr></table></figure>
<h3 id="不使用-FROM"><a href="#不使用-FROM" class="headerlink" title="不使用 FROM"></a>不使用 FROM</h3><p>在某些情况下要检索的数据不存在于任何表中，这时可以省略 <code>FROM</code> 子句</p>
<ul>
<li><p>查询系统时间<br>  <code>SELECT NOW();</code></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> now()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-05</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值计算<br>  <code>SELECT 1+2;</code></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="虚拟表-dual"><a href="#虚拟表-dual" class="headerlink" title="虚拟表 dual"></a>虚拟表 dual</h3><p>类似于没有 <code>FROM</code> 子句的情况，也可以添加一个虚拟表 <code>dual</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">FROM</span> dual;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span><span class="operator">+</span><span class="number">2</span> <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure>
<p><code>dual</code> 表是一个虚拟表，完全可以忽略。它存在的目的只是让 SQL 看起来更工整</p>
<h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><p><code>WHERE</code> 子句可以为 <code>SELECT</code> 查询指定搜索条件</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    column_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_name</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    query_condition;</span><br></pre></td></tr></table></figure>
<p>其中 <code>query_condition</code> 就是查询条件，它的结果是一个布尔值，其值可能为 TRUE，FALSE 或 UNKNOWN。最终， <code>SELECT</code> 语句返回的结果集就是满足查询条件结果为 TRUE 的记录</p>
<p>查询条件也可以是使用 <code>AND</code>，<code>OR</code> 和 <code>NOT</code> 逻辑运算符一个或多个表达式的组合</p>
<p>除了用在 <code>SELECT</code> 语句外，<code>WHERE</code> 子句还可以用在 <code>UPDATE</code> 和 <code>DELETE</code> 语句中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查询 actor 数据表 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;ALLEN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">118</span> <span class="operator">|</span> CUBA       <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">145</span> <span class="operator">|</span> KIM        <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">194</span> <span class="operator">|</span> MERYL      <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="number">17</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 AND 组合多个条件查询 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> last_name<span class="operator">=</span><span class="string">&#x27;DAVIS&#x27;</span> <span class="keyword">and</span> first_name<span class="operator">=</span><span class="string">&#x27;SUSAN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">101</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">110</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 OR 组合多个条件查询 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> last_name<span class="operator">=</span><span class="string">&#x27;ALLEN&#x27;</span> <span class="keyword">or</span> last_name<span class="operator">=</span><span class="string">&#x27;DAVIS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">118</span> <span class="operator">|</span> CUBA       <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">145</span> <span class="operator">|</span> KIM        <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">194</span> <span class="operator">|</span> MERYL      <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> JENNIFER   <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">101</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">110</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br></pre></td></tr></table></figure>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">比较运算符</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
<td style="text-align:center">age = 18</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
<td style="text-align:center">不等于</td>
<td style="text-align:center">age &lt;&gt; 18</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
<td style="text-align:center">age != 18</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于，通常用于比较数字或者日期</td>
<td style="text-align:center">age &gt; 18</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于，通常用于比较数字或者日期</td>
<td style="text-align:center">age &gt;= 18</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于，通常用于比较数字或者日期</td>
<td style="text-align:center">age &lt; 18</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于，通常用于比较数字或者日期</td>
<td style="text-align:center">age &lt;= 18</td>
</tr>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">判断值是否在一个集合中</td>
<td style="text-align:center">age IN (18, 19)</td>
</tr>
<tr>
<td style="text-align:center">NOT IN</td>
<td style="text-align:center">判断值是否不在一个集合中</td>
<td style="text-align:center">age NOT IN (18, 19)</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:center">判断值是否介于两个数中间</td>
<td style="text-align:center">age BETWEEN 16 AND 18</td>
</tr>
<tr>
<td style="text-align:center">LIKE</td>
<td style="text-align:center">模糊匹配</td>
<td style="text-align:center">name LIKE ‘A%’</td>
</tr>
<tr>
<td style="text-align:center">IS NULL</td>
<td style="text-align:center">是否为 NULL</td>
<td style="text-align:center">name IS NULL</td>
</tr>
<tr>
<td style="text-align:center">IS NOT NULL</td>
<td style="text-align:center">是否不为 NULL</td>
<td style="text-align:center">name IS NOT NULL</td>
</tr>
</tbody>
</table>
</div>
<h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><p><code>IN</code> 运算符用来检查一个字段或值是否包含在一个集合中，如果值包含在集合中返回 1，否则返回 0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> last_name <span class="keyword">in</span> (<span class="string">&#x27;ALLEN&#x27;</span>,<span class="string">&#x27;DAVIS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">118</span> <span class="operator">|</span> CUBA       <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">145</span> <span class="operator">|</span> KIM        <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">194</span> <span class="operator">|</span> MERYL      <span class="operator">|</span> ALLEN     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span> JENNIFER   <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">101</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">110</span> <span class="operator">|</span> SUSAN      <span class="operator">|</span> DAVIS     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h2><p><code>BETWEEN</code> 是一个三目运算符，它需要 3 个操作数</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expression <span class="keyword">BETWEEN</span> min <span class="keyword">AND</span> max</span><br><span class="line">expression <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> min <span class="keyword">AND</span> max</span><br></pre></td></tr></table></figure>
<ul>
<li><code>expression</code> 可以是一个字段名、值或其他的表达式（比如函数调用、运算等）</li>
<li><code>min</code> 是范围的最小值（包含）</li>
<li><code>max</code> 是范围的最大值（包含）</li>
<li><code>AND</code> 是一个固定的连接词，用来连接 min 和 max</li>
<li><code>NOT</code> 是否定运算符，<code>NOT BETWEEN</code> 表达的含义与 <code>BETWEEN</code> 相反</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 搜索 Sakila 数据库中的 film 表 */</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    film_id, title, replacement_cost</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    film</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    replacement_cost <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title                  <span class="operator">|</span> replacement_cost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">23</span> <span class="operator">|</span> ANACONDA CONFESSIONS   <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">150</span> <span class="operator">|</span> CIDER DESIRE           <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>     <span class="number">953</span> <span class="operator">|</span> WAIT CIDER             <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">996</span> <span class="operator">|</span> YOUNG <span class="keyword">LANGUAGE</span>         <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* NOT BETWEEN */</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    film_id, title, replacement_cost</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    film</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    replacement_cost <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title                  <span class="operator">|</span> replacement_cost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">23</span> <span class="operator">|</span> ANACONDA CONFESSIONS   <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">150</span> <span class="operator">|</span> CIDER DESIRE           <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">182</span> <span class="operator">|</span> CONTROL ANTHEM         <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>     <span class="number">931</span> <span class="operator">|</span> VALENTINE VANISHING    <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">953</span> <span class="operator">|</span> WAIT CIDER             <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">996</span> <span class="operator">|</span> YOUNG <span class="keyword">LANGUAGE</span>         <span class="operator">|</span>             <span class="number">9.99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------+------------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h2><p><code>LIKE</code> 运算符可以根据指定的模式过滤数据。它是一个双目比较运算符，需要两个操作数</p>
<p>语法格式</p>
<p><code>expression LIKE pattern</code></p>
<ul>
<li><code>expression</code> 可以是一个字段名、值或其他的表达式（比如函数调用、运算等）</li>
<li><code>pattern</code> 是一个字符串模式。MySQL 字符串模式支持两个通配符：<code>%</code> 和 <code>_</code><ul>
<li><code>%</code> 匹配零或多个任意字符</li>
<li><code>_</code> 匹配任意单个字符</li>
<li>如果需要匹配通配符，则需要使用 <code>\</code> 转义字符，如 <code>\%</code> 和 <code>\_</code></li>
<li>使用通配符匹配文本时，不区分字母大小写</li>
</ul>
</li>
<li>如果 <code>expression</code> 与 <code>pattern</code> 匹配，<code>LIKE</code> 运算符返回 1，否则返回 0</li>
</ul>
<p>比如</p>
<ul>
<li><code>a%</code> 匹配以字符 a 开头的任意长度的字符串</li>
<li><code>%a</code> 匹配以字符 a 结尾的任意长度的字符串</li>
<li><code>%a%</code> 匹配包含字符 a 的任意长度的字符串</li>
<li><code>%a%b%</code> 匹配同时包含字符 a 和 b 且 a 在 b 前面的任意长度的字符串</li>
<li><code>a_</code> 匹配以字符 a 开头长度为 2 的字符串</li>
<li><code>_a</code> 匹配以字符 a 结尾长度为 2 的字符串</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配在 actor 表中 first_name 以字符 p 开头的所有演员 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">&#x27;P%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> PENELOPE   <span class="operator">|</span> GUINESS   <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">46</span> <span class="operator">|</span> PARKER     <span class="operator">|</span> GOLDBERG  <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">54</span> <span class="operator">|</span> PENELOPE   <span class="operator">|</span> PINKETT   <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">104</span> <span class="operator">|</span> PENELOPE   <span class="operator">|</span> CRONYN    <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">120</span> <span class="operator">|</span> PENELOPE   <span class="operator">|</span> MONROE    <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配 first_name 以 ES 结尾的所有演员 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> frist_name <span class="keyword">like</span> <span class="string">&#x27;%ES&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">48</span> <span class="operator">|</span> FRANCES    <span class="operator">|</span> <span class="keyword">DAY</span><span class="operator">-</span>LEWIS <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">84</span> <span class="operator">|</span> JAMES      <span class="operator">|</span> PITT      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">126</span> <span class="operator">|</span> FRANCES    <span class="operator">|</span> TOMEI     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配 first_name 以 AY 结尾且长度为 3 个字符的所有演员 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">&#x27;_AY&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">55</span> <span class="operator">|</span> FAY        <span class="operator">|</span> KILMER    <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">64</span> <span class="operator">|</span> RAY        <span class="operator">|</span> JOHANSSON <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">147</span> <span class="operator">|</span> FAY        <span class="operator">|</span> WINSLET   <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">156</span> <span class="operator">|</span> FAY        <span class="operator">|</span> WOOD      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">34</span>:<span class="number">33</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-----------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 NOT LIKE 从 category 表中检索不以 A 开头的分类 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> category_id <span class="operator">|</span> name        <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span> Children    <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span> Classics    <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span> Comedy      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">6</span> <span class="operator">|</span> Documentary <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">7</span> <span class="operator">|</span> Drama       <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">8</span> <span class="operator">|</span> Family      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">9</span> <span class="operator">|</span> <span class="keyword">Foreign</span>     <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span> Games       <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">11</span> <span class="operator">|</span> Horror      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">12</span> <span class="operator">|</span> Music       <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">13</span> <span class="operator">|</span> <span class="keyword">New</span>         <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">14</span> <span class="operator">|</span> Sci<span class="operator">-</span>Fi      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">15</span> <span class="operator">|</span> Sports      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">16</span> <span class="operator">|</span> Travel      <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">04</span>:<span class="number">46</span>:<span class="number">27</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+---------------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h2><p>在 MySQL 中，<code>NULL</code> 是一个特殊的值，它代表什么都没有。它不是空，也不是 0。<code>IS NULL</code> 运算符用来测试一个值是不是 <code>NULL</code>，如果是返回 1，否则返回 0</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expression <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">expression <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>expression</code> 可以是一个字段名、一个值或者一个表达式</li>
<li><code>IS NOT NULL</code> 是 <code>IS NULL</code> 的否定运算</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查询 Sakila 数据库中 staff 表中的那些没有设置密码的职员 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    first_name, last_name, password</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    staff</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    password <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> Jon        <span class="operator">|</span> Stephens  <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查询设置了密码的职员 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    first_name, last_name, password</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    staff</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    password <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> first_name <span class="operator">|</span> last_name <span class="operator">|</span> password                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Mike       <span class="operator">|</span> Hillyer   <span class="operator">|</span> <span class="number">8</span>cb2237d0679ca88db6464eac60da96345513964 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------+------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h2><p><code>EXISTS</code> 操作符是一个单目操作符，它需要一个子查询作为参数。它可以用来判断一个子查询是否返回数据行。如果一个子查询返回了至少一个数据行，则 <code>EXISTS</code> 的计算结果为 TRUE，否则为 FALSE</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(subquery);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>EXISTS</code> 一般用在 <code>WHERE</code> 子句中</li>
<li>如果子查询 <code>sunquery</code> 返回了至少一个数据行，则 <code>EXISTS</code> 的计算结果为 TRUE，否则计算结果为 FALSE</li>
<li><code>EXISTS</code> 运算时，一旦查询到一个匹配的行，<code>EXISTS</code> 运算就会返回</li>
<li><code>EXISTS</code> 不关心子查询中的列的数量或者名称，它只在乎子查询是否返回数据行。所以在 <code>EXISTS</code> 的子查询中，无论是使用 <code>SELECT 1</code> 还是 <code>SELECT *</code>，亦或是 <code>SELECT column_list</code>，都不影响 <code>EXISTS</code> 运算的结果</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查询 language 表中的一些语种，该语种在 film 表中存在相关语种的影片 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">language</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> film</span><br><span class="line">    <span class="keyword">WHERE</span> film.language_id <span class="operator">=</span> language.language_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> language_id <span class="operator">|</span> name    <span class="operator">|</span> last_update         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span> <span class="number">2006</span><span class="number">-02</span><span class="number">-15</span> <span class="number">05</span>:<span class="number">02</span>:<span class="number">19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="EXISTS-子查询的列"><a href="#EXISTS-子查询的列" class="headerlink" title="EXISTS 子查询的列"></a>EXISTS 子查询的列</h3><p><code>EXISTS</code> 不关心子查询中的列的数量或名称，它只在乎是否返回数据行</p>
<ol>
<li><p>在子查询中使用 <code>SELECT *</code></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">language</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> film</span><br><span class="line">    <span class="keyword">WHERE</span> film.language_id <span class="operator">=</span> language.language_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子查询中使用 <code>SELECT 1</code></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">language</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> film</span><br><span class="line">    <span class="keyword">WHERE</span> film.language_id <span class="operator">=</span> language.language_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子查询中使用 <code>SELECT column_name</code></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">language</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> film_id</span><br><span class="line">    <span class="keyword">FROM</span> film</span><br><span class="line">    <span class="keyword">WHERE</span> film.language_id <span class="operator">=</span> language.language_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述三种查询返回的结果都一样。这说明了 <code>EXISTS</code> 的子查询中的 <code>SELECT</code> 的列不影响 <code>EXISTS</code> 的结果</p>
<h3 id="在子查询中使用-TABLE-语句"><a href="#在子查询中使用-TABLE-语句" class="headerlink" title="在子查询中使用 TABLE 语句"></a>在子查询中使用 <code>TABLE</code> 语句</h3><p>在 MySQL 8.0.19 和以后的版本中，我们可以直接在 <code>EXISTS</code> 或 <code>NOT EXISTS</code> 的子查询中使用 <code>TABLE</code> 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">TABLE</span> t2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*等同于在子查询使用不带任何条件的 &#x27;SELECT *&#x27; */</span></span><br><span class="line"><span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t2);</span><br></pre></td></tr></table></figure>
<h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>通常情况下，<code>SELECT</code> 语句返回的结果集是按照数据库默认的规则排序的。如果我们想按照自定义自定义规则排序结果集，可以使用 <code>ORDER BY</code> 子句。在 <code>ORDER BY</code> 子句中，我们可以指定一个或多个排序的字段</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   table_name</span><br><span class="line">[<span class="keyword">WHERE</span> clause]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">   column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>],</span><br><span class="line">   column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>],</span><br><span class="line">   ...;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ORDER BY</code> 子句可以指定一个或多个字段</li>
<li><code>[ASCIDESC]</code> 代表排序是升序还是降序，这是可选的</li>
<li><code>ASC</code> 代表升序，<code>DESC</code> 代表降序</li>
<li>未指定 <code>[ASCIDESC]</code> 时，默认值是 <code>ASC</code>。即，默认是按指定的字段升序排序</li>
<li>当指定多个列时，首先按照前面的字段排序，其次按照后面的字段排序</li>
</ul>
<h3 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h3><ul>
<li><code>ORDER BY column ASC;</code> 对结果集按 column 字段的值升序排序</li>
<li><code>ORDER BY column DESC;</code> 对结果集按 column 字段的值降序排序</li>
<li><code>ORDER BY column;</code> 对结果集按 column 字段的值升序排序</li>
<li><code>ORDER BY column1, column2;</code> 对结果集先按 column1 字段的值升序排序，然后再按 column2 字段的值升序排序</li>
<li><code>ORDER BY column1 DESC, column2;</code> 对结果集先按 column1 字段的值降序排序，然后再按 column2 字段的值升序排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对 actor 表按照演员姓氏升序进行排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    actor_id, first_name, last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    actor</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> last_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name  <span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">92</span> <span class="operator">|</span> KIRSTEN     <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span> CHRISTIAN   <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">182</span> <span class="operator">|</span> DEBBIE      <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">194</span> <span class="operator">|</span> MERYL       <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">118</span> <span class="operator">|</span> CUBA        <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">145</span> <span class="operator">|</span> KIM         <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按照演员的姓氏进行降序排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    actor_id, first_name, last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    actor</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> last_name <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name  <span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">111</span> <span class="operator">|</span> CAMERON     <span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">85</span> <span class="operator">|</span> MINNIE      <span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">186</span> <span class="operator">|</span> JULIA       <span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">63</span> <span class="operator">|</span> CAMERON     <span class="operator">|</span> WRAY         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">156</span> <span class="operator">|</span> FAY         <span class="operator">|</span> WOOD         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">13</span> <span class="operator">|</span> UMA         <span class="operator">|</span> WOOD         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">144</span> <span class="operator">|</span> ANGELA      <span class="operator">|</span> WITHERSPOON  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">68</span> <span class="operator">|</span> RIP         <span class="operator">|</span> WINSLET      <span class="operator">|</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 先按姓氏，再按名字排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    actor_id, first_name, last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    actor</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> last_name, first_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> actor_id <span class="operator">|</span> first_name  <span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span> CHRISTIAN   <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">182</span> <span class="operator">|</span> DEBBIE      <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">92</span> <span class="operator">|</span> KIRSTEN     <span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">118</span> <span class="operator">|</span> CUBA        <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">145</span> <span class="operator">|</span> KIM         <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">194</span> <span class="operator">|</span> MERYL       <span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<h3 id="使用-CASE-实现自定义排序"><a href="#使用-CASE-实现自定义排序" class="headerlink" title="使用 CASE 实现自定义排序"></a>使用 CASE 实现自定义排序</h3><p>有时候单纯的按照字段的值排序并不能满足要求，我们需要按照自定义的顺序的排序。比如，我们需要按照电影分级 ‘G’, ‘PG’, ‘PG-13’, ‘R’, ‘NC-17’ 的顺序对影片进行排序。对于这样的需求，它可以理解为按照列表中元素的索引位置进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    film_id, title, rating</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    film</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CASE</span> rating</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;G&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;PG&#x27;</span> <span class="keyword">THEN</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;PG-13&#x27;</span> <span class="keyword">THEN</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;R&#x27;</span> <span class="keyword">THEN</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;NC-17&#x27;</span> <span class="keyword">THEN</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title                       <span class="operator">|</span> rating <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> ACE GOLDFINGER              <span class="operator">|</span> G      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> AFFAIR PREJUDICE            <span class="operator">|</span> G      <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> ACADEMY DINOSAUR            <span class="operator">|</span> PG     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">6</span> <span class="operator">|</span> AGENT TRUMAN                <span class="operator">|</span> PG     <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span> AIRPLANE SIERRA             <span class="operator">|</span> PG<span class="number">-13</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">9</span> <span class="operator">|</span> ALABAMA DEVIL               <span class="operator">|</span> PG<span class="number">-13</span>  <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>       <span class="number">8</span> <span class="operator">|</span> AIRPORT POLLOCK             <span class="operator">|</span> R      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">17</span> <span class="operator">|</span> ALONE TRIP                  <span class="operator">|</span> R      <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> ADAPTATION HOLES            <span class="operator">|</span> NC<span class="number">-17</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> ALADDIN CALENDAR            <span class="operator">|</span> NC<span class="number">-17</span>  <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="number">1000</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们使用 <code>CASE</code> 将电影的等级转换为一个索引数字。然后使用 <code>ORDER BY</code> 按照这个数字进行排序</p>
<h3 id="使用-FIELD-函数实现自定义排序"><a href="#使用-FIELD-函数实现自定义排序" class="headerlink" title="使用 FIELD() 函数实现自定义排序"></a>使用 FIELD() 函数实现自定义排序</h3><p>对于上面示例中的 <code>CASE</code> 语句，我们可以如下的使用 <code>FIELD()</code> 代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    film</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> FIELD(rating, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;PG&#x27;</span>, <span class="string">&#x27;PG-13&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;NC-17&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="ORDER-BY-和-NULL"><a href="#ORDER-BY-和-NULL" class="headerlink" title="ORDER BY 和 NULL"></a>ORDER BY 和 NULL</h3><p>在 MySQL 中的升序排序中， <code>NULL</code> 值出现在非 <code>NULL</code> 值之前</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">AS</span> v</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">AS</span> v</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">AS</span> v</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">0</span> <span class="keyword">AS</span> v</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AS</span> v;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> A    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 ORDER BY 子句升序 ASC 排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">AS</span> v</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">AS</span> v</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">AS</span> v</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">0</span> <span class="keyword">AS</span> v</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AS</span> v</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> v;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> B    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure>
<h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><p><code>LIMIT</code> 子句可用于限制 <code>SELECT</code> 语句返回的行的数量。它接受一个或两个非负正数作为参数</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT [<span class="keyword">offset</span>,] row_count;</span><br><span class="line">LIMIT row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>上述两种语法的结果是等效的</li>
<li><code>offset</code> 指定要返回的第一行的偏移量。偏移量是相对于未使用 <code>LIMIT</code> 语句时的原始结果集而言的。可以理解为在原始结果集的基础上跳过的行数</li>
<li><code>row_count</code> 执行要返回的最大行数</li>
<li><code>offset</code> 是可选的。未指定时默认值为 0</li>
<li><code>LIMIT</code> 一般位于 <code>SELECT</code> 语句的最后</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 最多返回 5 个记录行，等效于 limit 0 5 */</span></span><br><span class="line">limit <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在原始结果集中，跳过 2 个记录行，并从第 3 个记录行开始，最多返回 5 个记录行 */</span></span><br><span class="line">limit <span class="number">2</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回 film 表中等级为 G 的片长最长的 10 部影片 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    film_id, title, length</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    film</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    rating <span class="operator">=</span> <span class="string">&#x27;G&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> length <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title              <span class="operator">|</span> length <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">212</span> <span class="operator">|</span> DARN FORRESTER     <span class="operator">|</span>    <span class="number">185</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">182</span> <span class="operator">|</span> CONTROL ANTHEM     <span class="operator">|</span>    <span class="number">185</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">609</span> <span class="operator">|</span> MUSCLE BRIGHT      <span class="operator">|</span>    <span class="number">185</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">597</span> <span class="operator">|</span> MOONWALKER FOOL    <span class="operator">|</span>    <span class="number">184</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">128</span> <span class="operator">|</span> CATCH AMISTAD      <span class="operator">|</span>    <span class="number">183</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">996</span> <span class="operator">|</span> YOUNG <span class="keyword">LANGUAGE</span>     <span class="operator">|</span>    <span class="number">183</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">50</span> <span class="operator">|</span> BAKED CLEOPATRA    <span class="operator">|</span>    <span class="number">182</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">467</span> <span class="operator">|</span> INTRIGUE WORST     <span class="operator">|</span>    <span class="number">181</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">510</span> <span class="operator">|</span> LAWLESS VISION     <span class="operator">|</span>    <span class="number">181</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">612</span> <span class="operator">|</span> MUSSOLINI SPOILERS <span class="operator">|</span>    <span class="number">180</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------------+--------+</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-LIMIT-子句进行分页"><a href="#使用-LIMIT-子句进行分页" class="headerlink" title="使用 LIMIT 子句进行分页"></a>使用 LIMIT 子句进行分页</h3><p>LIMIT 的一个很重要的应用就是分页查询。对于一些大型的数据表来说，分页查询能很好的减少数据库的消耗和提高用户体验</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果我们引入分页，film 表弓 1000行数据，每页显示 10 行数据，那么 1000 行数据需要 100 (1000 / 10) 页就能显示完全。查询第一个页只需限制最多行数为 10 行数据即可 */</span></span><br><span class="line"><span class="keyword">SELECT</span> film_id, title <span class="keyword">FROM</span> film LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> ACADEMY DINOSAUR <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> ACE GOLDFINGER   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> ADAPTATION HOLES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> AFFAIR PREJUDICE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">5</span> <span class="operator">|</span> AFRICAN EGG      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">6</span> <span class="operator">|</span> AGENT TRUMAN     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span> AIRPLANE SIERRA  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">8</span> <span class="operator">|</span> AIRPORT POLLOCK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">9</span> <span class="operator">|</span> ALABAMA DEVIL    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> ALADDIN CALENDAR <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 要查询第二页需要先跳过第一页的 10 行数据并限制最多行数为 10 行数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span> film_id, title <span class="keyword">FROM</span> film LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"><span class="operator">|</span> film_id <span class="operator">|</span> title            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> ACADEMY DINOSAUR <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> ACE GOLDFINGER   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> ADAPTATION HOLES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> AFFAIR PREJUDICE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">5</span> <span class="operator">|</span> AFRICAN EGG      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">6</span> <span class="operator">|</span> AGENT TRUMAN     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span> AIRPLANE SIERRA  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">8</span> <span class="operator">|</span> AIRPORT POLLOCK  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">9</span> <span class="operator">|</span> ALABAMA DEVIL    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">10</span> <span class="operator">|</span> ALADDIN CALENDAR <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同样，最后一页的 SQL 语句如下 */</span></span><br><span class="line"><span class="keyword">SELECT</span> film_id, title <span class="keyword">FROM</span> film LIMIT <span class="number">990</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>当使用 <code>SELECT</code> 查询数据时，我们可能会得到一些重复的行。如果想得到一个唯一的、没有重复记录的结果集，就需要用到 <code>DISTINCT</code> 关键字</p>
<p>在 <code>SELECT</code> 语句中使用 <code>DISTINCT</code> 关键字会返回一个没有重复记录行的结果集。其语法格式如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    columns_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_name</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DISTINCT</code> 关键字位于 <code>SELECT</code> 关键字的后面</li>
<li><code>columns_list</code> 指定要查询的字段列表，也是 <code>DISTINCT</code> 评估记录行是否唯一的字段</li>
<li><code>columns_list</code> 可以是一个字段，也可以是多个字段</li>
<li><code>columns_list</code> 也可是 <code>*</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 检索 actor 表中的姓氏 */</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">200</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 DISTINCT 删除重复的数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ASTAIRE      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BACALL       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BAILEY       <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">121</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DISTINCT 多个字段 */</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, first_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span> first_name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> GUINESS      <span class="operator">|</span> PENELOPE    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WAHLBERG     <span class="operator">|</span> NICK        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHASE        <span class="operator">|</span> ED          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DAVIS        <span class="operator">|</span> JENNIFER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LOLLOBRIGIDA <span class="operator">|</span> JOHNNY      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NICHOLSON    <span class="operator">|</span> BETTE       <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> TEMPLE       <span class="operator">|</span> THORA       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">200</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同时去重名和姓 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span> first_name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> GUINESS      <span class="operator">|</span> PENELOPE    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WAHLBERG     <span class="operator">|</span> NICK        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CHASE        <span class="operator">|</span> ED          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> DAVIS        <span class="operator">|</span> JENNIFER    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LOLLOBRIGIDA <span class="operator">|</span> JOHNNY      <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> TEMPLE       <span class="operator">|</span> THORA       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">199</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><p><code>JOIN</code> 语句用于将数据库中的两个表或者多个表组合起来</p>
<p>MySQL 支持以下的连接</p>
<ul>
<li>内部连接(INNER JOIN)</li>
<li>左连接(LEFT JOIN)</li>
<li>右连接(RIGHT JOIN)</li>
<li>交叉连接(CROSS JOIN)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假设有如下两个表 */</span></span><br><span class="line"><span class="comment">/* student 表 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* student_score 表 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> subject <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+-------+</span></span><br></pre></td></tr></table></figure>
<h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h3><p>交叉连接返回两个集合的笛卡尔积。也就是两个表中的所有的行的所有可能的组合。这相当于内连接没有连接条件或者连接条件永远为真</p>
<p>如果一个有 m 行的表和另一个有 n 行的表，它们交叉连接将返回 m * n 行数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 显式的交叉连接 student 和 student_score 表 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> student_score;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐式的交叉连接 student 和 student_score 表 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student, student_score;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> name <span class="operator">|</span> student_id <span class="operator">|</span> subject <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="number">15</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接基于连接条件组合两个表中的数据。内连接相当于加了过滤条件的交叉连接</p>
<p>内连接将第一个表的每一行与第二个表的每一行进行比较，如果满足给定的连接条件，则将两个表的行组合在一起作为结果集中的一行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 student 表和 student_score 表内连接 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student_score</span><br><span class="line">  <span class="keyword">ON</span> student.student_id <span class="operator">=</span> student_score.student_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student, student_score</span><br><span class="line">  <span class="keyword">WHERE</span> student.student_id <span class="operator">=</span> student_score.student_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> name <span class="operator">|</span> student_id <span class="operator">|</span> subject <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>左连接是左外连接的简称，左连接需要连接条件。两个表左连接时，第一个表称为左表，第二表为右表，例如 <code>A LEFT JOIN B</code>，A 是左表，B 是右表。左连接以左表的数据行为基础，根据连接匹配右表的每一行，如果匹配成功则将左表和右表的行组合成新的数据行返回；如果匹配不成功则将左表的行和 <code>NULL</code> 值组合成新的数据行返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 student 表和 student_score 表左连接 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student_score</span><br><span class="line">  <span class="keyword">ON</span> student.student_id <span class="operator">=</span> student_score.student_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> name <span class="operator">|</span> student_id <span class="operator">|</span> subject <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>  <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><p>右连接是右外连接的简称，右连接需要连接条件。右连接与左连接处理逻辑相反，右连接以右表的数据行为基础，根据条件匹配左表中的数据。如果匹配不到左表中的数据，则左表中的列为 <code>NULL</code> 值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将 student 表和 student_score 表右连接 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  student.<span class="operator">*</span>,</span><br><span class="line">  student_score.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> student_score</span><br><span class="line">  <span class="keyword">ON</span> student.student_id <span class="operator">=</span> student_score.student_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> name <span class="operator">|</span> student_id <span class="operator">|</span> subject <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">80</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span> Math    <span class="operator">|</span>    <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span> English <span class="operator">|</span>    <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------+------------+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><code>GROUP BY</code> 子句用于将结果集根据指定的字段或者表达式进行分组</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1[, column2, ...], aggregate_function(ci)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span> clause]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1[, column2, ...];</span><br><span class="line">[<span class="keyword">HAVING</span> clause]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>column1[, column2, ...]</code> 是分组依据的字段，至少一个字段，可以多个字段</li>
<li><code>aggregate_function(ci)</code> 是聚合函数，用来汇总。这是可选的，但是一般都用得到</li>
<li><code>SELECT</code> 后的字段必须是分组字段中的字段</li>
<li><code>WHERE</code> 子句是可选的，用来过滤结果集中的数据</li>
<li><code>HAVING</code> 子句是可选的，用来过滤分组数据</li>
</ul>
<p>经常用于 <code>GROUP BY</code> 的聚合函数有</p>
<ul>
<li><code>SUM</code> 求总和</li>
<li><code>AVG</code> 求平均值</li>
<li><code>MAX</code> 求最大值</li>
<li><code>MIN</code> 求最小值</li>
<li><code>COUNT</code> 计数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查看 actor 表中的姓氏列表 */</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> actor</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> last_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ASTAIRE      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BACALL       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BAILEY       <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> ZELLWEGER    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">121</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以上的输出结果也可以使用下方的方式搜索 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 count() 查看 actor 表中的姓氏列表以及每个姓氏的次数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> actor</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> last_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> last_name    <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> KILMER       <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NOLTE        <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TEMPLE       <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AKROYD       <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN        <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BERRY        <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line">...</span><br><span class="line"><span class="operator">|</span> WRAY         <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+----------+</span></span><br><span class="line"><span class="number">121</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GROUP BY, LIMIT, SUM() */</span></span><br><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(amount) total</span><br><span class="line"><span class="keyword">FROM</span> payment</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+</span></span><br><span class="line"><span class="operator">|</span> customer_id <span class="operator">|</span> total  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">526</span> <span class="operator">|</span> <span class="number">221.55</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">148</span> <span class="operator">|</span> <span class="number">216.54</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">144</span> <span class="operator">|</span> <span class="number">195.58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">137</span> <span class="operator">|</span> <span class="number">194.61</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">178</span> <span class="operator">|</span> <span class="number">194.61</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">459</span> <span class="operator">|</span> <span class="number">186.62</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">469</span> <span class="operator">|</span> <span class="number">177.60</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">468</span> <span class="operator">|</span> <span class="number">175.61</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">236</span> <span class="operator">|</span> <span class="number">175.58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">181</span> <span class="operator">|</span> <span class="number">174.66</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+--------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><p><code>UNION</code> 操作符是一个集合操作符，它用于合并 2 个结果集中的所有的行</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> statement</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">DISTINCT</span> <span class="operator">|</span> <span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> statement</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UNION</code> 双目操作符，需要两个 <code>SELECT</code> 语句作为操作数</li>
<li><code>UNION</code> 中的 <code>SELECT</code> 语句中的列数、列顺序必须相同</li>
<li><code>UNION</code> 运算包括 <code>UNION DISTINCT</code> 和 <code>UNION ALL</code> 两种算法，其中 <code>UNION DISTINCT</code> 可以简写为 <code>UNION</code></li>
<li><code>UNION</code> <code>DISTINCT</code> 或 <code>UNION</code> 将过滤掉结果集中重复记录</li>
<li><code>UNION ALL</code> 将返回结果集中的所有记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假设有如下三个表 */</span></span><br><span class="line"><span class="comment">/* 表 a */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表 b */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表 c */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对 a 和 b 进行 UNION */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> b;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对 a, b, c 进行 UNION */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> b</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对 a, b 进行 UNION ALL */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> b;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> v    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>可以使用别名自定义输出列的名称</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> `alias`</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>AS</code> 关键字后面跟的是列的别名 alias</li>
<li>当别名 alias 中包含空格时，必须使用 <code>` </code> 将别名引起来，即 <code>`alias` </code></li>
<li><code>AS</code> 关键字是可选的</li>
<li>除了为字段指定别名，还可以为表达式指定别名。例如： <code>SELECT NOW() `Current Time` FROM dual</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 指定别名查询数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    first_name `<span class="keyword">First</span> Name`,</span><br><span class="line">    last_name `<span class="keyword">Last</span> Name`,</span><br><span class="line">    CONCAT(first_name, <span class="string">&#x27;, &#x27;</span>, last_name) `<span class="keyword">Full</span> Name`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    actor</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">First</span> Name <span class="operator">|</span> <span class="keyword">Last</span> Name    <span class="operator">|</span> <span class="keyword">Full</span> Name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> PENELOPE   <span class="operator">|</span> GUINESS      <span class="operator">|</span> PENELOPE, GUINESS    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> NICK       <span class="operator">|</span> WAHLBERG     <span class="operator">|</span> NICK, WAHLBERG       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ED         <span class="operator">|</span> CHASE        <span class="operator">|</span> ED, CHASE            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JENNIFER   <span class="operator">|</span> DAVIS        <span class="operator">|</span> JENNIFER, DAVIS      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JOHNNY     <span class="operator">|</span> LOLLOBRIGIDA <span class="operator">|</span> JOHNNY, LOLLOBRIGIDA <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h3><p>除了为列指定别名，还可以为表指定别名</p>
<p><code>table_name AS alias</code></p>
<p><code>AS</code> 关键字是可选的</p>
<h3 id="派生表别名"><a href="#派生表别名" class="headerlink" title="派生表别名"></a>派生表别名</h3><p>派生表是一个由表达式生成的表，使用派生表就像使用表一样。常见的派生表由子查询产生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">AVG</span>(t.customer_total) customer_avg</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        customer_id, <span class="built_in">SUM</span>(amount) customer_total</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        payment</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line">    <span class="keyword">HAVING</span> customer_total <span class="operator">&gt;</span> <span class="number">180</span>) t;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> customer_avg <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">201.585000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查询语句中的括号内部分被称为派生表 */</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">    customer_id, <span class="built_in">SUM</span>(amount) customer_total</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payment</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> customer_total <span class="operator">&gt;</span> <span class="number">180</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记-2</title>
    <url>/2022/05/14/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
    <content><![CDATA[<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询是嵌套一个语句中的查询语句，也被称为内部查询。子查询经常用在 <code>WHERE</code> 子句中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">language</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> film</span><br><span class="line">    <span class="keyword">WHERE</span> film.language_id <span class="operator">=</span> language.language_id</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
<p>其中括号内的内容就是子查询</p>
<span id="more"></span>
<h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p><code>INSERT</code> 语句用于将一行或者多行数据插入到数据表中</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 插入单行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column_1, column_2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value_1, value_2, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入多行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column_1, column_2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value_11, value_12, ...),</span><br><span class="line">       (value_21, value_22, ...)</span><br><span class="line">       ...;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>INSERT INTO</code> 和 <code>VALUES</code> 都是关键字</li>
<li><code>INSERT INTO</code> 后跟表名 table_name</li>
<li>表名 table_name 后跟要插入数据的列名列表。列名放在小括号中，多个列表使用逗号分隔</li>
<li><code>VALUES</code> 关键字之后的小括号中是值列表。值的数量要和字段的数量相同。值的位置和列的位置一一对应</li>
<li>当插入多行数据时，多个值列表之间使用逗号分隔</li>
<li><code>INSERT</code> 语句返回插入的行数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 首先创建一个 user 表 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    birthday <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入单行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (&quot;Jim&quot;, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看刚刚插入的数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span> birthday <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim  <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入多行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (&quot;Tim&quot;, <span class="number">19</span>), (&quot;Lucy&quot;, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看数据 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span> birthday <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim  <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Tim  <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="INSERT-修饰符"><a href="#INSERT-修饰符" class="headerlink" title="INSERT 修饰符"></a>INSERT 修饰符</h3><ul>
<li><p><code>LOW_PRIORITY</code> 如果你指定了 <code>LOW_PRIORITY</code> 修饰符，MySQL 服务器将延迟执行 <code>INSERT</code> 操作直到没有客户端对表进行读操作<br>  <code>LOW_PRIORITY</code> 修饰符影响那些只支持表级锁的存储引擎，比如： MyISAM, MEMORY, 和 MERGE</p>
</li>
<li><p><code>HIGH_PRIORITY</code> 如果你指定了 <code>HIGH_PRIORITY</code> 修饰符，它会覆盖掉服务器启动时的 <code>--low-priority-updates</code> 选项<br>  <code>HIGH_PRIORITY</code> 修饰符影响那些只支持表级锁的存储引擎，比如： MyISAM, MEMORY, 和 MERGE</p>
</li>
<li><p><code>IGNORE</code> 如果你指定了 <code>IGNORE</code> 修饰符，MySQL 服务器会在执行 <code>INSERT</code> 操作期间忽略那些可忽略的错误。这些错误最终会作为 <code>WARNING</code> 返回</p>
</li>
</ul>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [LOW_PRIORITY <span class="operator">|</span> DELAYED <span class="operator">|</span> HIGH_PRIORITY] [IGNORE]</span><br><span class="line"><span class="keyword">INTO</span> table_name</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="INSERT-限制"><a href="#INSERT-限制" class="headerlink" title="INSERT 限制"></a>INSERT 限制</h3><p>在 MySQL 中，<code>max_allowed_packet</code> 配置了服务器和客户端任何单个消息大小的上限。这同样适用于 <code>SELECT</code> 语句。当一个 <code>SELECT</code> 语句的大小超过 <code>max_allowed_packet</code> 值时，服务器就会给出一个错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;max_allowed_packet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> max_allowed_packet <span class="operator">|</span> <span class="number">67108864</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p><code>DELETE</code> 语句用于从表中删除满足条件的记录行</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> clause]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]</span><br><span class="line">[LIMIT row_count]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DELETE FROM</code> 后跟的是要从中删除数据的表</li>
<li><code>WHERE</code> 子句用来过滤需要删除的行。满足条件的行会被删除</li>
<li><code>WHERE</code> 子句是可选的。没有 <code>WHERE</code> 子句时，<code>DELETE</code> 语句将删除表中的所有行</li>
<li><code>ORDER BY</code> 子句用来指定删除行的顺序。它是可选的</li>
<li><code>LIMIT</code> 子句用来指定删除的最大行数。它是可选的</li>
<li><code>DELETE</code> 语句返回删除的行数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 删除 actor_id 等于 1 的行 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> actor <span class="keyword">WHERE</span> actor_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 last_name 等于 KILMER 的行 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> actor <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;KILMER&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">5</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="限制删除的最大行数"><a href="#限制删除的最大行数" class="headerlink" title="限制删除的最大行数"></a>限制删除的最大行数</h3><p>可以结合使用 <code>ORDER BY</code> 和 <code>LIMIT</code> 子句来限制删除的最大行数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 删除 actor 中 actor_id 最大的 10 行 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> actor</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> actor_id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">10</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="删除表中所有的行"><a href="#删除表中所有的行" class="headerlink" title="删除表中所有的行"></a>删除表中所有的行</h3><p>如果不使用 <code>WHERE</code> 或 <code>LIMIT</code> 子句，则会删除表中的所有行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> actor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">185</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>如果只是想清空表，可以使用 <code>TRUNCATE TABLE</code> 语句以获得更好的性能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> actor;</span><br></pre></td></tr></table></figure>
<h3 id="DELETE-修饰符"><a href="#DELETE-修饰符" class="headerlink" title="DELETE 修饰符"></a>DELETE 修饰符</h3><p><code>DELETE</code> 支持 3 个修饰符</p>
<ul>
<li><p><code>LOW_PRIORITY</code> 如果你指定了 <code>LOW_PRIORITY</code> 修饰符，MySQL 服务器将延迟执行 <code>DELETE</code> 操作直到没有客户端对表进行读操作。这个修饰符影响那些只支持表级锁的存储引擎，比如： MyISAM, MEMORY, 和 MERGE</p>
</li>
<li><p><code>QUICK</code> 如果你指定了 <code>QUICK</code> 修饰符，MyISAM 存储引擎不会在 <code>DELETE</code> 操作期间合并索引。这在某种程度上会加快 <code>DELETE</code> 操作</p>
</li>
<li><p><code>IGNORE</code> 如果你指定了 <code>IGNORE</code> 修饰符，MySQL 服务器会在执行 <code>DELETE</code> 操作期间忽略那些可忽略的错误。这些错误最终会作为 <code>WARNING</code> 返回</p>
</li>
</ul>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> [LOW_PRIORITY] [QUICK] [IGNORE] <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>
<h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p><code>UPDATE</code> 语句可以更新表中的一行或者多行数据，可以更新表中的一个或者多个字段（列）</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [IGNORE] table_name</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">    column_name1 <span class="operator">=</span> value1,</span><br><span class="line">    column_name2 <span class="operator">=</span> value2,</span><br><span class="line">    ...</span><br><span class="line">[<span class="keyword">WHERE</span> clause];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UPDATE</code> 关键字后指定要更新数据的表名</li>
<li>使用 <code>SET</code> 子句设置字段的新值。多个字段使用逗号分隔。字段的值可以是普通的字面值，也可以是表达式运算，还可以是子查询</li>
<li>使用 <code>WHERE</code> 子句指定要更新的行。只有符合 <code>WHERE</code> 条件的行才会被更新</li>
<li><code>WHERE</code> 子句是可选的。如果不指定 <code>WHERE</code> 子句，则更新表中的所有行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 更新 customer 表中 customer_id 为 1 的客户的电子邮件 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> customer</span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;NEW.MARY.SMITH@sakilacustomer.org&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更新多行的值 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> customer</span><br><span class="line"><span class="keyword">SET</span> first_name <span class="operator">=</span> <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    last_name <span class="operator">=</span> <span class="string">&#x27;Duncan&#x27;</span>,</span><br><span class="line">    email <span class="operator">=</span> <span class="string">&#x27;Tim.Duncan@sakilacustomer.org&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用表达式更新"><a href="#使用表达式更新" class="headerlink" title="使用表达式更新"></a>使用表达式更新</h3><p>使用 <code>UPDATE</code> 更新时，字段的值可以设置为表达式的运算结果，比如函数或其他的运算</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意，下述语句中没有使用 WHERE 子句，所以表中所有的数据都进行了更新 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> customer</span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> REPLACE(email, <span class="string">&#x27;sakilacustomer.org&#x27;</span>, <span class="string">&#x27;sjkjc.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="使用子查询更新"><a href="#使用子查询更新" class="headerlink" title="使用子查询更新"></a>使用子查询更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用 SELECT 语句返回一个随机的商店 id 并绑定给没有商店的客户 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> customer</span><br><span class="line"><span class="keyword">SET</span> store_id <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> store_id</span><br><span class="line">    <span class="keyword">FROM</span> store</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> RAND()</span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">WHERE</span> store_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h3 id="UPDATE-修饰符"><a href="#UPDATE-修饰符" class="headerlink" title="UPDATE 修饰符"></a>UPDATE 修饰符</h3><ul>
<li><p><code>LOW_PRIORITY</code> 如果你指定了 <code>LOW_PRIORITY</code> 修饰符，MySQL 服务器将延迟执行 <code>UPDATE</code> 操作直到没有客户端对表进行读操作<br>  <code>LOW_PRIORITY</code> 修饰符影响那些只支持表级锁的存储引擎，比如： MyISAM, MEMORY, 和 MERGE</p>
</li>
<li><p><code>IGNORE</code> 如果你指定了 <code>IGNORE</code> 修饰符，MySQL 服务器会在执行 <code>UPDATE</code> 操作期间忽略那些可忽略的错误。这些错误最终会作为 <code>WARNING</code> 返回</p>
</li>
</ul>
<h2 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h2><p>如果想向表中插入数据，除了使用 <code>INSERT</code> 语句，还可以使用 <code>REPLACE</code> 语句。<code>REPLACE</code> 语句和 <code>INSERT</code> 语句很像，它们的不同之处在于，当插入过程中出现了重复的主键或者重复的唯一索引的时候，<code>INSERT</code> 语句会产生一个错误，而 <code>REPLACE</code> 语句则先删除旧的行，再插入新的行</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE [<span class="keyword">INTO</span>] table_name (column_1, column_2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value_11, value_12, ...),</span><br><span class="line">       (value_21, value_22, ...)</span><br><span class="line">       ...;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>REPLACE INTO</code> 和 <code>VALUES</code> 都是关键字。<code>INTO</code> 可省略</li>
<li><code>REPLACE INTO</code> 后跟表名 table_name</li>
<li>表名 table_name 后跟要插入数据的列名列表。列名放在小括号中，多个列表使用逗号分隔</li>
<li><code>VALUES</code> 关键字之后的小括号中是值列表。值的数量要和字段的数量相同。值的位置和列的位置一一对应</li>
<li>当插入多行数据时，多个值列表之间使用逗号分隔</li>
</ul>
<p><code>REPLACE</code> 语句还可以使用 <code>SET</code> 关键词，这只适用于操作单行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE [<span class="keyword">INTO</span>] table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1,</span><br><span class="line">    column2 <span class="operator">=</span> value2,</span><br><span class="line">    ...;</span><br></pre></td></tr></table></figure>
<p>这种用法与 <code>UPDATE</code> 语句的相似，但也是不同的。 <code>UPDATE</code> 只更新符合条件的行的指定字段的值，未指定的字段保留原值。<code>REPLACE</code> 则会删掉旧行，再插入新行，<code>REPLACE</code> 语句中未指定的字段则为默认值或者 <code>NULL</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假设有如下表 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim  <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 2 个新行 */</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, &quot;Tim&quot;, <span class="number">19</span>), (<span class="number">3</span>, &quot;Lucy&quot;, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="comment">/* 2 row affected 表示已经成功插入 2 行 */</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim  <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Tim  <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Lucy <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入一个具有重复主键的行，此时表中已有 id 为 3 的行，因此会先删除旧的数据，再插入新的数据 */</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, &quot;Alice&quot;, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim   <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Tim   <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Alice <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入并替换 */</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, &quot;James&quot;, <span class="number">20</span>), (<span class="number">4</span>, &quot;Kobe&quot;, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 rows affected 表示删除了一行，又插入了两行。</span></span><br><span class="line"><span class="comment">Records: 2 表示语句中有两行。</span></span><br><span class="line"><span class="comment">Duplicates: 1 表示重复了一行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Jim   <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> James <span class="operator">|</span>   <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Alice <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Kobe  <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+------+</span></span><br></pre></td></tr></table></figure>
<h2 id="CREATE-DATABASE"><a href="#CREATE-DATABASE" class="headerlink" title="CREATE DATABASE"></a>CREATE DATABASE</h2><p><code>CREATE DATABASE</code> 语句用来创建数据库</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">[<span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name]</span><br><span class="line">[<span class="keyword">COLLATE</span> collation_name]</span><br><span class="line">[ENCRYPTION &#123;<span class="string">&#x27;Y&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;N&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CREATE DATABASE</code> 和 <code>CREATE SCHEMA</code> 的是一样的</li>
<li><code>CREATE DATABASE</code> 后指定要创建的数据库的名字</li>
<li><code>IF NOT EXISTS</code> 表示在指定的数据库不存在的情况下才创建。它是可选的</li>
<li><code>CHARACTER SET charset_name</code> 指定数据库的字符集。它是可选的。默认使用数据库服务器的配置</li>
<li><code>COLLATE collation_name</code> 指定数据库的排序规则。它是可选的。默认使用数据库服务器的配置</li>
<li><code>ENCRYPTION</code> 指定数据库的是否加密。它是可选的。默认使用数据库服务器的配置</li>
</ul>
<h3 id="MySQL-数据库命名的要求"><a href="#MySQL-数据库命名的要求" class="headerlink" title="MySQL 数据库命名的要求"></a>MySQL 数据库命名的要求</h3><ul>
<li>数据库的名字最长为 64 个字符。名字的长度还取决于操作系统</li>
<li>数据库名可以由字母、数字、下划线、美元符号组成</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个数据库 */</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE newdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="comment">/* 1 row affected 表示已经成功创建了数据库 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用新创建的数据库 */</span></span><br><span class="line">USE testdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看创建数据库的信息 */</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE newdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database <span class="operator">|</span> <span class="keyword">Create</span> Database                                                                                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> newdb    <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `newdb` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="DROP-DATABASE"><a href="#DROP-DATABASE" class="headerlink" title="DROP DATABASE"></a>DROP DATABASE</h2><p><code>DROP DATABASE</code> 语句将永久删除数据库和数据库中的所有表</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;DATABASE <span class="operator">|</span> SCHEMA&#125; [IF <span class="keyword">EXISTS</span>] database_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DROP DATABASE</code> 和 <code>DROP SCHEMA</code> 是一样的</li>
<li><code>DROP DATABASE</code> 关键字后指定要删除的数据库的名称</li>
<li><code>IF EXISTS</code> 选项可以避免删除不存在数据库时发生的错误。它是可选的</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 删除数据库 */</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE newdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h2><p><code>CREATE TABLE</code> 语句用于创建表</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name (</span><br><span class="line">   column_name data_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>] [<span class="keyword">DEFAULT</span> expr],</span><br><span class="line">   column_name data_type [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>] [<span class="keyword">DEFAULT</span> expr],</span><br><span class="line">   ...,</span><br><span class="line">   [table_constraints]</span><br><span class="line">) [ENGINE<span class="operator">=</span>storage_engine];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CREATE TABLE</code> 语句创建一个给定名字 table_name 的表<ul>
<li>表名可由字母、数字、下划线和美元符号组成，列名长度在 64 个字符以内</li>
<li>表名在一个数据库中是唯一的</li>
<li>新建的表会在当前默认的数据库中。如果还没有选择数据库，请使用 <code>db_name.table_name</code> 格式指定要新建的表所在的数据库</li>
</ul>
</li>
<li><code>IF NOT EXISTS</code> 指示只有给定的表不存在的时候才进行创建。它是可选的<br>  如果你给定一个已经存在的表名，又没有使用 <code>IF NOT EXISTS</code> 子句，服务器会返回一个错误</li>
<li><code>column_name data_type [NOT NULL | NULL] [DEFAULT expr] [AUTO_INCREMENT]</code> 定义了表中的一列。多个列使用逗号分隔<ul>
<li><code>column_name</code> 是列的名字。列名可由字母、数字、下划线和美元符号组成，列名长度在 64 个字符以内。列名在一个表中是唯一的</li>
<li><code>data_type</code> 是数据类型，可以是 <code>CHAR</code>, <code>VARCHAR</code>, <code>INT</code>, <code>DATE</code>, <code>DATETIME</code>, <code>BIT</code>, <code>TEXT</code>, <code>ENUM</code>, <code>JSON</code>, <code>BOLB</code> 等</li>
<li><code>[NOT NULL | NULL]</code> 指示该列是否可以为 <code>NULL</code>。它是可选的。如果不指定该选项，则此列可以为 <code>NULL</code>。如果设置为 <code>NOT NULL</code>，则插入新行时该列必须有值</li>
<li><code>[DEFAULT expr]</code> 指示该列的默认值。它是可选的。如果不指定该选项，则此列的默认是 <code>NULL</code></li>
<li><code>[AUTO_INCREMENT]</code> 指示该列是否是一个自增列。如果使用了此选项，则该列的值可有服务器自动产生和填充。该列的值从 1 开始，每增加一个行就会加 1。一个表中只能有一个自增列</li>
<li><code>[table_constraints]</code> 位于列定义之后，它定义了表的约束。它是可选的。表的约束有主键、外键、CHECK、UNIQUE 等</li>
</ul>
</li>
<li><code>ENGINE=storage_engine</code> 子句指定了表使用的存储引擎。它是可选的</li>
<li>如果不指定此选项，则采用服务器默认的存储引擎。自 MySQL 5.5 版以来，服务器默认的引擎是由 MyISAM 变成了 InnoDB</li>
<li>当表名或者字段名中含有空格或者其他特殊字字符时，请使用 <code>` </code> 包围起来。比如： <code>test 1</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建 user 表 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `user_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `locked` TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `created_at` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建 user_hobby 表 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testdb`.`user_hobby` (</span><br><span class="line">  `hobby_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `hobby` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created_at` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  INDEX `fk_user_idx` (`user_id` <span class="keyword">ASC</span>) VISIBLE,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`hobby_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_user`</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`user_id`)</span><br><span class="line">    <span class="keyword">REFERENCES</span> `testdb`.`<span class="keyword">user</span>` (`user_id`)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT);</span><br></pre></td></tr></table></figure>
<h3 id="CREATE-TABLE-…-LIKE"><a href="#CREATE-TABLE-…-LIKE" class="headerlink" title="CREATE TABLE … LIKE"></a>CREATE TABLE … LIKE</h3><p><code>CREATE TABLE ... LIKE</code> 语句可以用来克隆另一个表的定义。它以另一个表的定义为基础创建一个新的空表，包含了原表中定义的列属性和索引</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table <span class="keyword">LIKE</span> original_table;</span><br></pre></td></tr></table></figure>
<h3 id="CREATE-TABLE-…-SELECT"><a href="#CREATE-TABLE-…-SELECT" class="headerlink" title="CREATE TABLE … SELECT"></a>CREATE TABLE … SELECT</h3><p>可以使用 <code>CREATE TABLE ... SELECT</code> 语句从另一个表创建一个新表。该语句会依据 <code>SELECT</code> 子句中的列创建新表，并将 <code>SELECT</code> 的结果集插入到新表中</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table [<span class="keyword">AS</span>] <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> original_table;</span><br></pre></td></tr></table></figure>
<h2 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h2><p><code>DROP TABLE</code> 用于永久删除数据表和表中的数据</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>]</span><br><span class="line">  table_name [, table_name] ...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DROP TABLE</code> 关键字后面是要删除的表名。如果要删除多个表，请使用逗号分隔表名</li>
<li><code>IF EXISTS</code> 选项避免了删除不存在的表时发生的错误。它是可选的<ul>
<li>当要删除的表中有不存在的表时：<ul>
<li>有 <code>IF EXISTS</code> 选项，不会对不存在的表报错。该语句会删除存在的表，并给出不存在的表的提示</li>
<li>没有 <code>IF EXISTS</code> 选项，该语句运行失败带有一个指示不能移除不存在的表的错误。该语句不会删除任何表</li>
</ul>
</li>
</ul>
</li>
<li><code>DROP TABLE</code> 删除表的定义和表中的数据，以及表上触发器</li>
<li>你需要具有要删除的每一个表的 <code>DROP</code> 权限</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 删除一个表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除多个表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test2, test3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除一个不存在的表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">ERROR <span class="number">1051</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;testdb.test5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带 IF EXISTS 删除不存在的表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> test5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 warning 表示有一个需要注意的事项，可查看具体信息 */</span></span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Level <span class="operator">|</span> Code <span class="operator">|</span> Message                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Note  <span class="operator">|</span> <span class="number">1051</span> <span class="operator">|</span> <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;testdb.test5&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------+------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h2><p>通过 <code>ALTER TABLE</code> 语句，可以重命名表、重命名列、添加列、删除列、修改列的属性等</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">  [alter_action options], ...</span><br></pre></td></tr></table></figure>
<p>其中 <code>alter_action</code> 是一个修改动作，包括：</p>
<ul>
<li><p><code>ADD</code> 关键字可用来添加列、索引、约束等，包括：</p>
<ul>
<li><code>ADD [COLUMN]</code> 添加列</li>
<li><code>ADD INDEX</code> 添加索引</li>
<li><code>ADD PRIMARY KEY</code> 添加主键</li>
<li><code>ADD FOREIGN KEY</code> 添加外键</li>
<li><code>ADD UNIQUE INDEX</code> 添加唯一索引</li>
<li><code>ADD CHECK</code> 添加检查约束</li>
</ul>
</li>
<li><p><code>DROP</code> 关键字可用来删除列、索引、约束等，包括：</p>
<ul>
<li><code>DROP [COLUMN] col_name</code> 删除列</li>
<li><code>DROP INDEX index_name</code> 删除索引</li>
<li><code>DROP PRIMARY KEY</code> 删除主键</li>
<li><code>DROP FOREIGN KEY fk_symbol</code> 删除外键</li>
<li><code>DROP CHECK symbol</code> 删除检查约束</li>
</ul>
</li>
<li><p><code>MODIFY</code> 关键字用来修改列的定义。与 <code>CHANGE</code> 关键字不同，它不能重命名列。例如: <code>MODIFY [COLUMN] col_name column_definition</code></p>
</li>
<li><p><code>CHANGE</code> 关键字用来修改列的定义。与 <code>MODIFY</code> 关键字不同，它可以重命名列。例如: <code>CHANGE [COLUMN] old_col_name new_col_name column_definition</code></p>
</li>
<li><p><code>RENAME</code> 关键字可以重命名列、索引和表。包括：</p>
<ul>
<li><code>RENAME COLUMN old_col_name TO new_col_name</code> 重命名列</li>
<li><code>RENAME INDEX old_index_name TO new_index_name</code> 重命名索引</li>
<li><code>RENAME new_tbl_name</code> 重命名表</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 首先创建一个新表 user */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (id <span class="type">INT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加 name 列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> name <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加多个列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> age <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">ADD</span> email <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重命名列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">RENAME <span class="keyword">COLUMN</span> name <span class="keyword">TO</span> username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改列定义 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">MODIFY username <span class="type">VARCHAR</span>(<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改列名和定义 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">CHANGE username name <span class="type">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加主键 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> email;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重命名表 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">RENAME users;</span><br></pre></td></tr></table></figure>
<h2 id="TRUNCATE-TABLE"><a href="#TRUNCATE-TABLE" class="headerlink" title="TRUNCATE TABLE"></a>TRUNCATE TABLE</h2><p><code>TRUNCATE TABLE</code> 可以清空一个表中的所有行</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br></pre></td></tr></table></figure>
<p>其中 <code>TABLE</code> 关键字是可选的。<code>TRUNCATE TABLE</code> 语句相当于先将此表删掉，再创建一个新表</p>
<h3 id="区别于-DELETE"><a href="#区别于-DELETE" class="headerlink" title="区别于 DELETE"></a>区别于 DELETE</h3><p>虽然 <code>TRUNCATE</code> 与 <code>DELETE</code> 类似，但是他们在以下几个方面存在不同：</p>
<ul>
<li><code>TRUNCATE</code> 被归类为 DDL 语句，而 <code>DELETE</code> 被归类为 DML 语句</li>
<li><code>TRUNCATE</code> 操作无法被回滚，而 <code>DELETE</code> 可以被回滚</li>
<li><code>TRUNCATE</code> 操作删除和重建表，它的速度比 <code>DELETE</code> 快得多</li>
<li><code>TRUNCATE</code> 操作会重置表的自增值，而 <code>DELETE</code> 不会</li>
<li><code>TRUNCATE</code> 操作不会激活删除触发器，而 <code>DELETE</code> 会</li>
<li><code>TRUNCATE</code> 操作不返回代表删除行的数量的值，它通常返回 <code>0 rows affected``。DELETE</code> 返回删除的行数</li>
<li>如果一个表被其他表的外键引用，对此表的 <code>TRUNCATE</code> 操作会失败</li>
</ul>
<h2 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h2><p>在关系数据库中，主键是能够唯一标识表中的每一行的一个字段或者多个字段的组合</p>
<p>在 MySQL 中，主键需要遵循以下规则：</p>
<ul>
<li>主键是定义在表上的。一个表不强制定义主键，但最多只能定义一个主键</li>
<li>主键可以包含一个列或者多个列</li>
<li>主键列的值必须是唯一的。如果主键包含多个列，则这些列的值组合起来必须是唯一的</li>
<li>主键列中不能包含 NULL 值</li>
</ul>
<p>如果不遵循上面的规则，则可能会引发以下的错误：</p>
<ul>
<li>如果定义了多个主键，会返回错误：<code>ERROR 1068 (42000): Multiple primary key defined</code></li>
<li>如果插入或者更新时有重复的主键值，则会返回类似的错误：<code>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;user.PRIMARY&#39;</code></li>
<li>如果插入了 NULL 值，则会返回类似的错误：<code>ERROR 1048 (23000): Column &#39;id&#39; cannot be null</code></li>
</ul>
<h3 id="定义主键"><a href="#定义主键" class="headerlink" title="定义主键"></a>定义主键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在创建表时定义主键 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">45</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主键包含多个列 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">    com_id <span class="type">INT</span>,</span><br><span class="line">    user_number <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(com_id, user_number)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加主键 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除主键 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<h2 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h2><p>在关系数据库中，外键用来定义两个实体之间的约束关系。外键相对于主键而言，用来引用其他表。外键通过子表的一个或多个列对应到父表的主键或唯一键值，将子表的行和父表行建立起关联关系</p>
<h3 id="外键语法"><a href="#外键语法" class="headerlink" title="外键语法"></a>外键语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> `fk_city_country` <span class="keyword">FOREIGN</span> KEY (`country_id`)</span><br><span class="line">    <span class="keyword">REFERENCES</span> `country` (`country_id`)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br></pre></td></tr></table></figure>
<p>这里定义了一个外键：</p>
<ul>
<li><p>位于 <code>CONSTRAINT</code> 关键字之后的 <code>fk_city_country</code> 是外键的名字。它是可选的</p>
</li>
<li><p>位于 <code>FOREIGN KEY</code> 关键字之后的是作为外键的列名</p>
</li>
<li><p>位于 <code>REFERENCES</code> 关键字之后的是被引用的表和列</p>
</li>
<li><p><code>ON DELETE</code> 和 <code>ON UPDATE</code> 指定了删除或更新被引用的表中的数据时要采取的约束策略。你可以使用以下 3 个策略中的一个：</p>
<ul>
<li><code>CASCADE</code> 如果被引用的表中的一行被删除或更新，该表中匹配行的值会自动删除或更新</li>
<li><code>SET NULL</code> 如果被引用的表中的一行被删除或更新，该表中匹配行的值设置为 <code>NULL</code></li>
<li><code>RESTRICT</code> 如果被引用的表中的一行在该表中有匹配的行，试图删除或更新被引用的表中行时会引发 MySQL 错误。这是默认的策略</li>
</ul>
</li>
</ul>
<p>通常，外键所属的表被称作子表，被外键引用的表被称作父表</p>
<h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> child_table_name</span><br><span class="line"><span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> foreign_key_name]</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (<span class="keyword">column</span>))</span><br><span class="line">  <span class="keyword">REFERENCES</span> parent_table_name (<span class="keyword">column</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法 1 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_hobby</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY foreign_key_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法 2 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_hobby</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constraint_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>ALTER TABLE</code> 语句修改表的定义</li>
<li><code>DROP FOREIGN KEY</code> 后面指定外键名，也就是约束名</li>
<li><code>DROP CONSTRAINT</code> 后面指定约束名。它可以通过名字删除任何约束，并不仅仅是外键</li>
</ul>
<h3 id="CASCADE-策略"><a href="#CASCADE-策略" class="headerlink" title="CASCADE 策略"></a>CASCADE 策略</h3><p>如果外键的 <code>ON DELETE</code> 和 <code>ON UPDATE</code> 使用了 <code>CASCADE</code> 策略：</p>
<ul>
<li>当父表的行被删除的时候，子表中匹配的行也会被删除。</li>
<li>当父表的行的键值更新的时候，子表中匹配的行的字段也会被更新。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 首先创建 user 表并插入数据 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `user_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (user_id, name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, &quot;Tim&quot;), (<span class="number">2</span>, &quot;Lucy&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建 user_hobby 表，它的外键采用 CASCADE 策略 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> user_hobby;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_hobby` (</span><br><span class="line">  `hobby_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `hobby` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`hobby_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_user`</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`user_id`)</span><br><span class="line">    <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`user_id`)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向两个表中插入数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (user_id, name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, &quot;Tim&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_hobby (hobby_id, user_id, hobby)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;Football&#x27;</span>), (<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;Swimming&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时的 user_hobby */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> hobby_id <span class="operator">|</span> user_id <span class="operator">|</span> hobby    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> Football <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> Swimming <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对父表进行 UPDATE 操作 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> user_id <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* user_hobby 表中的数据也被修改 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> hobby_id <span class="operator">|</span> user_id <span class="operator">|</span> hobby    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span> Football <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span> Swimming <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对父表进行 DELETE 操作 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* user_hobby 表中数据也被删除 */</span></span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="RESTRICT-策略"><a href="#RESTRICT-策略" class="headerlink" title="RESTRICT 策略"></a>RESTRICT 策略</h3><p>如果外键的 <code>ON DELETE</code> 和 <code>ON UPDATE</code> 使用了 <code>RESTRICT</code> 策略：</p>
<ul>
<li>MySQL 禁止删除父表中与子表匹配的行</li>
<li>MySQL 禁止删除父表中与子表匹配的行的键的值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 建表过程如上，先对父表进行 UPDATE 操作 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> user_id <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 服务器返回错误 */</span></span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`testdb`.`user_hobby`, <span class="keyword">CONSTRAINT</span> `fk_user` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`user_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DELETE 操作 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 服务器返回错误 */</span></span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`testdb`.`user_hobby`, <span class="keyword">CONSTRAINT</span> `fk_user` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`user_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT)</span><br></pre></td></tr></table></figure>
<h3 id="SET-NULL-策略"><a href="#SET-NULL-策略" class="headerlink" title="SET NULL 策略"></a>SET NULL 策略</h3><p>如果外键的 <code>ON DELETE</code> 和 <code>ON UPDATE</code> 使用了 <code>SET NULL</code> 策略：</p>
<ul>
<li>当父表的行被删除的时候，子表中匹配的行的列的值被设置为 <code>NULL</code></li>
<li>当父表的行的键值被更新的时候，子表中匹配的行的列的值被设置为 <code>NULL</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* UPDATE */</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> user_id <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 user_hobby 表的数据 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> hobby_id <span class="operator">|</span> user_id <span class="operator">|</span> hobby    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> Football <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> Swimming <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DELETE */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* user_hobby */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> hobby_id <span class="operator">|</span> user_id <span class="operator">|</span> hobby    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> Football <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> Swimming <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+----------+</span></span><br></pre></td></tr></table></figure>
<h3 id="自引用外键"><a href="#自引用外键" class="headerlink" title="自引用外键"></a>自引用外键</h3><p>有时，子表和父表可能是同一个表。这种表中的外键被称为自引用外键。通常，自引用外键定义在表示树形数据结构的表中。比如一个代表分类的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category (</span><br><span class="line">  category_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  category_name <span class="type">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">  parent_category_id <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fk_category <span class="keyword">FOREIGN</span> KEY (parent_category_id)</span><br><span class="line">    <span class="keyword">REFERENCES</span> category (category_id)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在这个表中，parent_category_id 列是一个外键。它引用了 category 表的 category_id 列</p>
<h3 id="启用或禁用外键约束"><a href="#启用或禁用外键约束" class="headerlink" title="启用或禁用外键约束"></a>启用或禁用外键约束</h3><p>要禁用外键约束，使用如下语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>要启用外键约束，使用如下语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h2><p>在 MySQL 中，如果需要一个列的值为一个有序的整数序列，可以使用自增列。自增列是 MySQL 中的一个特殊的列，该列的值可由 MySQL 服务器自动生成，并且是一个按升序增长的正整数序列。自增列能够被用来为表的新行产生唯一的标识</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">column_name data_type AUTO_INCREMENT</span><br></pre></td></tr></table></figure>
<ul>
<li><code>AUTO_INCREMENT</code> 关键字标识该列是一个自增列</li>
<li>自增列不能使用全部的数据类型，它只适用于整数或者浮点数类型，包括： <code>TINYINT</code>, <code>SMALLINT</code>, <code>INT</code>, <code>MEDIUMINT</code>, <code>BIGINT</code>, <code>DECIMAL</code>, <code>FLOAT</code>, <code>DOUBLE</code></li>
<li>自增列必须是主键或者唯一键</li>
<li>自增列默认是 <code>NOT NULL</code> 的</li>
<li>每个表中只能有一个自增列</li>
<li>自增列的初始值是 1。每插入一行到表中，该列的值自动增加 1。</li>
<li>不像生成列，在插入新行时你可以为自增列指定一个值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 新建一个 user 表，user_id 为自增列 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">&#x27;user&#x27;</span>(</span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span> <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> <span class="type">VARCHAR</span>(<span class="number">45</span>)</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入两行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&#x27;user&#x27;</span> (<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Tim&#x27;</span>),(<span class="string">&#x27;Jim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 user 表如下 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span> user_id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> Jim  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 user_id 为 2 的行 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`</span><br><span class="line"><span class="keyword">WHERE</span> `user_id` <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再插入一个新行 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">&#x27;user&#x27;</span> (<span class="string">&#x27;name&#x27;</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;Jim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 user 表如下 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span> user_id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> Jim  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="comment">/* 新行的 user_id 不是 2 而是 3。这是因为 MySQL 不会重用删除的序列值 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入数据时为自增列指定一个值 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`user_id`, `name`)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 然后再插入一行数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;Lucy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 user 表的数据如下 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span> user_id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> Tim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> Jim  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">20</span> <span class="operator">|</span> Tom  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">21</span> <span class="operator">|</span> Lucy <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+</span></span><br></pre></td></tr></table></figure>
<h3 id="如何查看自增列的值"><a href="#如何查看自增列的值" class="headerlink" title="如何查看自增列的值"></a>如何查看自增列的值</h3><ol>
<li><p>从 <code>SHOW CREATE TABLE</code> 语句输出的表定义中查看自增列的值</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`\G</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">    <span class="keyword">Table</span>: <span class="keyword">user</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`user_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">22</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure>
<p> 通过 <code>AUTO_INCREMENT=22</code> 可知自增列的下一个值是 22</p>
</li>
<li><p>从数据库信息表中查询自增列的值</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AUTO_INCREMENT</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;testdb&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> AUTO_INCREMENT <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure>
<p> 这种方式有时候并不准确。因为当重置或修改了表的 <code>AUTO_INCREMENT</code> 值之后，这里并不会立刻更新</p>
</li>
</ol>
<h3 id="自定自增列初始值"><a href="#自定自增列初始值" class="headerlink" title="自定自增列初始值"></a>自定自增列初始值</h3><p>自增列的初始值默认是 1，但我们可以在创建表的时候设置一个自定义的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `user_id` <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) AUTO_INCREMENT <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改表的自增值"><a href="#修改表的自增值" class="headerlink" title="修改表的自增值"></a>修改表的自增值</h3><p>如果想重置或者修改表的自增值，可以使用 <code>ALTER TABLE</code> 语句修改表定义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` AUTO_INCREMENT <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果这里设置的值小于等于表中自增列的最大值，最终设置的值还是这个最大值的下一个数值</p>
<p>  比如，在 user 表中，我们修改 <code>AUTO_INCREMENT</code> 为 1，但 user 表的 <code>AUTO_INCREMENT</code> 的值还是 22</p>
</li>
<li><p>当修改了表的 <code>AUTO_INCREMENT</code> 值之后， INFORMATION_SCHEMA.TABLES 表中的 <code>AUTO_INCREMENT</code> 列并不会立刻更新。可以使用 <code>SHOW CREATE TABLE</code> 语句查看</p>
</li>
</ul>
<h2 id="GENERATED-COLUMN"><a href="#GENERATED-COLUMN" class="headerlink" title="GENERATED COLUMN"></a>GENERATED COLUMN</h2><p>在 MySQL 中，生成列（GENERATED COLUMN）是一个特殊的列，它的值会根据列定义中的表达式自动计算得出。并且，你不能直接写入或更新生成列的值</p>
<p>生成列有 2 种类型：</p>
<ul>
<li>虚拟生成列：列值不会被存储下来。当读取该列时，MySQL 自动计算该列的值。</li>
<li>存储生成列：当插入或修改数据时，MySQL 自动计算该列的值并存储在磁盘上</li>
</ul>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">col_name data_type</span><br><span class="line">  [GENERATED ALWAYS] <span class="keyword">AS</span> (expr) [VIRTUAL <span class="operator">|</span> STORED]</span><br><span class="line">  [<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>]</span><br><span class="line">  [<span class="keyword">UNIQUE</span> [KEY]]</span><br><span class="line">  [[<span class="keyword">PRIMARY</span>] KEY]</span><br><span class="line">  [COMMENT <span class="string">&#x27;string&#x27;</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>GENERATED ALWAYS</code> 关键字指示此列是一个生成列。它是可选的</p>
</li>
<li><p><code>AS (expr)</code> 设置此生成列的表达式</p>
</li>
<li><p><code>VIRTUAL</code> 或 <code>STORED</code> 关键字指示了是否存储列值。这是可选的</p>
<ul>
<li><code>VIRTUAL</code> 列值不会被存储。当读取该列时，MySQL 自动计算该列的值。它是默认值</li>
<li><code>STORED</code> 当插入或修改数据时，MySQL 自动计算该列的值并存储下来</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个新表 order_item 并插入数据 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> order_item (</span><br><span class="line">  order_item_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  goods <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  price <span class="type">DECIMAL</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  quantity <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item (goods, price, quantity)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Apple&#x27;</span>, <span class="number">5</span>, <span class="number">3</span>), (<span class="string">&#x27;Peach&#x27;</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 order_item 表中的数据 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> goods <span class="operator">|</span> price <span class="operator">|</span> quantity <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------+-------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> Apple <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> Peach <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------+-------+----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用生成列计算总金额 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> order_item</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> total_amount <span class="type">DECIMAL</span></span><br><span class="line">  GENERATED ALWAYS <span class="keyword">AS</span> (price <span class="operator">*</span> quantity) STORED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 order_item 表的结构 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+---------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+---------+------------------+</span></span><br><span class="line"><span class="operator">|</span> order_id     <span class="operator">|</span> <span class="type">int</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> goods        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">45</span>)   <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> quantity     <span class="operator">|</span> <span class="type">int</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> total_amount <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> STORED GENERATED <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+---------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此时 order_item 的数据 */</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> goods <span class="operator">|</span> price <span class="operator">|</span> quantity <span class="operator">|</span> total_amount <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Apple <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span>           <span class="number">15</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Peach <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span>           <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="UNIQUE-KEY"><a href="#UNIQUE-KEY" class="headerlink" title="UNIQUE KEY"></a>UNIQUE KEY</h2><p>唯一键也是一个常用的约束，用来保证表中的一列或几列的中的值是唯一的</p>
<p>与主键相比，主键用于表示一个行的唯一性，主键的一般采用一个与业务无关的值，比如自增值，UUID 等。而唯一键一般用于约束与业务相关的数据的唯一性。主键列不能包含 NULL 值，而唯一键列可以包含 NULL 值</p>
<p>语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义一列为唯一键 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">    ...,</span><br><span class="line">    column_name data_type <span class="keyword">UNIQUE</span>,</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义多列为唯一键 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">   column_name1 column_definition,</span><br><span class="line">   column_name2 column_definition,</span><br><span class="line">   ...,</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span> constraint_name]</span><br><span class="line">      <span class="keyword">UNIQUE</span>(column_name1,column_name2)</span><br><span class="line">);</span><br><span class="line"><span class="comment">/* CONSTRAINT constraint_name 用于定义一个约束的名称。 它是可选的。如果不定义约束名称， MySQL 会自动为他生成一个 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加唯一键 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> constraint_name] <span class="keyword">UNIQUE</span> (column_list);</span><br><span class="line"><span class="comment">/* 注意，如果现有表中的要设置为唯一键的列中已有重复数据，MySQL 服务器会返回错误 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除唯一键 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constraint_name;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name;</span><br><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure>
<h3 id="唯一键与-NULL"><a href="#唯一键与-NULL" class="headerlink" title="唯一键与 NULL"></a>唯一键与 NULL</h3><p>不像主键，唯一键允许其中的列接受 NULL 值。但是，NULL 值会破坏唯一键约束。也就是唯一键对 NULL 值无效</p>
<h2 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h2><p><code>NOT NULL</code> 用来约束列中的值不能为 <code>NULL</code> 值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义 NOT NULL 列 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">  ...</span><br><span class="line">  column_name data_type <span class="keyword">NOT</span> <span class="keyword">NULL</span> ...,</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加 NOT NULL 约束 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">MODIFY column_name data_type <span class="keyword">NOT</span> <span class="keyword">NULL</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 NOT NULL 约束 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">MODIFY column_name data_type ...;</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><p>MySQL 中的数据类型包括以下几个大类：</p>
<ul>
<li>字符串类型</li>
<li>数字类型</li>
<li>日期和时间类型</li>
<li>二进制类型</li>
<li>地理位置数据类型</li>
<li>JSON 数据类型</li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串是最常用的数据类型，它可以用来存储一段文本。比如我们存储名称、地址等，都需要用到字符串数据类型。在 MySQL 中，可以使用纯文本或者二进制方式来存储字符串。MySQL 提供了很多数据类型来存储字符串，最常用的是 <code>VARCHAR</code> 和 <code>CHAR</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">字符串类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">VARCHAR</td>
<td style="text-align:center">纯文本字符串，字符串长度是可变的</td>
</tr>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">纯文本字符串，字符串长度是固定的。当实际字段内容小于定义的长度时，MySQL 会用空白空白符好补足</td>
</tr>
<tr>
<td style="text-align:center">VARBINARY</td>
<td style="text-align:center">二进制字符串，字符串长度是可变的</td>
</tr>
<tr>
<td style="text-align:center">BINARY</td>
<td style="text-align:center">二进制字符串，字符串长度是固定的</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">二进制字符串，最大为 255 个字节</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">二进制字符串，最大为 65K</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">二进制字符串，最大为 16M</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">二进制字符串，最大为 4G</td>
</tr>
<tr>
<td style="text-align:center">ENUM</td>
<td style="text-align:center">枚举；每个列值可以分配一个 ENUM 成员</td>
</tr>
<tr>
<td style="text-align:center">SET</td>
<td style="text-align:center">集合；每个列值可以分配零个或多个 SET 成员</td>
</tr>
</tbody>
</table>
</div>
<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>MySQL 支持 SQL 标准中所有的数字类型，包括整数和小数</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数字类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">一个非常小的整数，最大为 1 个字节</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">一个小整数，最大为 2 个字节</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">一个中等大小的整数，最大为 3 个字节</td>
</tr>
<tr>
<td style="text-align:center">INT</td>
<td style="text-align:center">标准整数，最大为 4 个字节</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">一个大整数，最大为 8 个字节</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL</td>
<td style="text-align:center">一个定点数</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">单精度浮点数，最大为 4 个字节</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">双精度浮点数，最大为 8 个字节</td>
</tr>
<tr>
<td style="text-align:center">BIT</td>
<td style="text-align:center">按位存储</td>
</tr>
</tbody>
</table>
</div>
<h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>MySQL 提供了丰富的日期和时间类型，这包括日期(DATE)、时间(TIME)、日期和时间(DATETIME)、时间戳(TIMESTAMP)、年份(YEAR)。其中时间戳(TIMESTAMP)数据类型，可以用于跟踪表中一行的变化</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">日期和时间类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">CCYY-MM-DD 格式的日期值</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">hh:mm:ss 格式的时间值</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">CCYY-MM-DD hh:mm:ss 格式的日期和时间值</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">CCYY-MM-DD hh:mm:ss 格式的时间戳值</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">CCYY 或 YY 格式的年份值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h3><p>除了字符串、数字、日期等类型， MySQL 还支持存储二进制的数据，比如图片文件等。如果要存储文件，就要用到 BLOB 类型。 BLOB 是 binary large object 的缩写，意思是二进制大对象</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">二进制类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYBLOB</td>
<td style="text-align:center">最大为 255 个字节</td>
</tr>
<tr>
<td style="text-align:center">BLOB</td>
<td style="text-align:center">最大为 65K</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMBLOB</td>
<td style="text-align:center">最大为 16M</td>
</tr>
<tr>
<td style="text-align:center">LONGBLOB</td>
<td style="text-align:center">最大为 4G</td>
</tr>
</tbody>
</table>
</div>
<h3 id="空间数据类型"><a href="#空间数据类型" class="headerlink" title="空间数据类型"></a>空间数据类型</h3><p>MySQL 支持许多包含各种几何和地理值的空间数据类型</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">空间数据类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GEOMETRY</td>
<td style="text-align:center">任何类型的空间值</td>
</tr>
<tr>
<td style="text-align:center">POINT</td>
<td style="text-align:center">使用横坐标和纵坐标表示的一个点</td>
</tr>
<tr>
<td style="text-align:center">LINESTRING</td>
<td style="text-align:center">一条曲线（一个或多个 POINT 值）</td>
</tr>
<tr>
<td style="text-align:center">POLYGON</td>
<td style="text-align:center">一个多边形</td>
</tr>
<tr>
<td style="text-align:center">GEOMETRYCOLLECTION</td>
<td style="text-align:center">GEOMETRY 值的集合</td>
</tr>
<tr>
<td style="text-align:center">MULTILINESTRING</td>
<td style="text-align:center">LINESTRING 值的集合</td>
</tr>
<tr>
<td style="text-align:center">MULTIPOINT</td>
<td style="text-align:center">POINT 值的集合</td>
</tr>
<tr>
<td style="text-align:center">MULTIPOLYGON</td>
<td style="text-align:center">POLYGON 值的集合</td>
</tr>
</tbody>
</table>
</div>
<h3 id="JSON-数据类型"><a href="#JSON-数据类型" class="headerlink" title="JSON 数据类型"></a>JSON 数据类型</h3><p>MySQL 从 5.7.8 版本开始支持 JSON 数据类型，允许您更有效地存储和管理 JSON 文档。与 JSON 格式的字符串相比，原生 JSON 数据类型提供有如下的优点</p>
<ul>
<li>自动验证。MySQL 会对存储在 JSON 列中的 JSON 文档进行自动验证，无效的文档会产生错误</li>
<li>最佳存储格式。MySQL 会将存储在 JSON 列中的 JSON 文档转换为允许快速读取文档元素的内部格式</li>
</ul>
<h3 id="布尔数据类型"><a href="#布尔数据类型" class="headerlink" title="布尔数据类型"></a>布尔数据类型</h3><p>MySQL 没有内置布尔数据类型。但是，MySQL 支持 <code>BOOLEAN</code> 或 <code>BOOL</code> 关键字，MySQL 会将 <code>BOOLEAN</code> 或 <code>BOOL</code> 类型转换为 <code>TINYINT(1)</code>。当我们插入 TRUE 或者 FALSE 时，MySQL 会存储为 1 或者 0</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 学习笔记-1</title>
    <url>/2022/01/02/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>单行注释使用 <code>#</code>，例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="comment"># 这是一个单行注释</span></span><br></pre></td></tr></table></figure>
<ul>
<li>多行注释使用 <code>&#39;&#39;&#39;内容&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;内容&quot;&quot;&quot;</code>，例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注释第一行</span></span><br><span class="line"><span class="string">注释第二行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 <code>\</code> 来实现多行语句，例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>
<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 <code>\</code>，例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>使用一系列标识符来记录或标记数据，并且被记录的数据可变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul>
<li>第一个字符必须是字母表中字母或下划线 _</li>
<li>标识符的其他的部分由字母、数字和下划线组成</li>
<li>标识符对大小写敏感</li>
</ul>
<h4 id="Python-保留字"><a href="#Python-保留字" class="headerlink" title="Python 保留字"></a>Python 保留字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment"># output: 10 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">c, d = <span class="number">30</span>, <span class="number">40</span></span><br><span class="line"><span class="built_in">print</span>(c, d)</span><br><span class="line"><span class="comment"># output: 30 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用于变量交换</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment"># output: 20 10</span></span><br></pre></td></tr></table></figure>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Python 中共有六个标准的数据类型</p>
<ul>
<li>Number (数字)</li>
<li>String (字符串)</li>
<li>List (列表)</li>
<li>Tuple (元组)</li>
<li>Set (集合)</li>
<li>Dictionary (字典)</li>
</ul>
<p>在 Python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = <span class="string">&quot;Runoob&quot;</span></span><br></pre></td></tr></table></figure>
<p>如上所示，<code>[1,2,3]</code> 是 List 类型， <code>Runoob</code> 是 String 类型，而变量 a 没有类型，它仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象</p>
<p>其他分类方式</p>
<ul>
<li>不可变数据类型：Number, String, Tuple<ul>
<li>变量赋值 <code>a=5</code> 后再赋值 <code>a=10</code>，这里实际是新生成一个 Int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a</li>
</ul>
</li>
<li><p>可变数据类型：List, Dictionary, Set</p>
<ul>
<li>变量赋值 <code>la = [1,2,3,4]</code> 后再赋值 <code>la[2]=5</code> 则是将 la 的第三个元素值更改，本身 la 没有变动，只是其内部的一部分值被修改了</li>
</ul>
</li>
<li><p>容器类型：String, List, Tuple, Dictionary, Set</p>
</li>
<li>非容器类型：Number, Bool</li>
</ul>
<h3 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number (数字)"></a>Number (数字)</h3><p>python 中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li>int (整数)，如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 long</li>
<li>bool (布尔)，如 True</li>
<li>float (浮点数)，如 1.23、3E-2</li>
<li>complex (复数)，如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<h4 id="数字类型转换"><a href="#数字类型转换" class="headerlink" title="数字类型转换"></a>数字类型转换</h4><ul>
<li>int(x) 转换为整型</li>
<li>float(x) 转换为浮点型</li>
<li>complex(x) 将x转换为复数，实数部分为x，虚数为0</li>
<li>complex(x,y) 实数为x，虚数为y</li>
</ul>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul>
<li>在整数除法中，除法 <code>/</code> 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 <code>//</code></li>
<li><code>//</code> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。</li>
<li>Python 可以使用 <code>**</code> 操作来进行幂运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">18</span> / <span class="number">5</span>)  <span class="comment"># output: 3.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">18</span> // <span class="number">5</span>)  <span class="comment"># output: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">18.0</span> // <span class="number">5</span>)  <span class="comment"># output: 3.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">18.0</span> // <span class="number">5.0</span>)  <span class="comment"># output: 3.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> ** <span class="number">4</span>)  <span class="comment"># output: 16</span></span><br></pre></td></tr></table></figure>
<h4 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h4><ul>
<li><code>abs()</code> 返回数字的绝对值</li>
<li><code>ceil()</code> 返回数字的上入整数</li>
<li><code>exp(x)</code> 返回 e 的 x 次幂</li>
<li><code>fabs()</code> 返回数字的绝对值。该函数在 math 模块中定义，只对浮点型与整型数值有效。<code>abs()</code> 还可以用在复数中</li>
<li><code>floor(x)</code> 返回数字的下舍整数</li>
<li><code>log(x)</code> 对数函数</li>
<li><code>log10(x)</code> 以 10 为底的对数</li>
<li><code>max(x1,x2,...)</code> 返回给定参数的最大值</li>
<li><code>min(x1,x2,...)</code> 返回给定参数的最小值</li>
<li><code>modf(x)</code> 返回 x 的整数部分与小数部分，两部分的数值符号与 x 相同，整数部分以浮点型表示</li>
<li><code>pow(x,y)</code> 返回 x**y</li>
<li><code>round(x[,n])</code> 返回浮点数 x 的四舍五入值，如果给出 n 的值，则代表舍入到小数点后的位数</li>
<li><code>sqrt(x)</code> 返回 x 的平方根</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abs:&quot;</span>, <span class="built_in">abs</span>(-<span class="number">10</span>))  <span class="comment"># abs: 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ceil:&quot;</span>, math.ceil(<span class="number">4.7</span>))  <span class="comment"># ceil: 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;exp:&quot;</span>, math.exp(<span class="number">1</span>))  <span class="comment"># exp: 2.718281828459045</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fabs:&quot;</span>, math.fabs(-<span class="number">12.15</span>))  <span class="comment"># fabs: 12.15</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;floor:&quot;</span>, math.floor(<span class="number">2.5</span>))  <span class="comment"># floor: 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log:&quot;</span>, math.log(<span class="number">100</span>))  <span class="comment"># log: 4.605170185988092</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;log10:&quot;</span>, math.log10(<span class="number">100</span>))  <span class="comment"># log10: 2.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max:&quot;</span>, <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">7</span>))  <span class="comment"># max: 7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min:&quot;</span>, <span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">7</span>))  <span class="comment"># min: -4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;modf:&quot;</span>, math.modf(<span class="number">100.12</span>))  <span class="comment"># modf: (0.12000000000000455, 100.0)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pow:&quot;</span>, <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>))  <span class="comment"># pow: 16</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round:&quot;</span>, <span class="built_in">round</span>(<span class="number">7.34</span>))  <span class="comment"># round: 7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sqrt:&quot;</span>, math.sqrt(<span class="number">8</span>))  <span class="comment"># sqrt: 2.8284271247461903</span></span><br></pre></td></tr></table></figure>
<h4 id="常用随机数函数"><a href="#常用随机数函数" class="headerlink" title="常用随机数函数"></a>常用随机数函数</h4><ul>
<li><code>choice(seq)</code> 从序列的元素中随机挑选一个元素</li>
<li><code>randrange([start,]stop[,step])</code> 从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认为 1</li>
<li><code>random()</code> 随机生成下一个实数，范围是 [0,1)</li>
<li><code>seed([x])</code> 改变随机数生成器的种子</li>
<li><code>shuffle()</code> 将序列的所有元素随机排序</li>
<li><code>uniform(x,y)</code> 随机生成下一个实数，范围在 [x,y] 内</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># choice</span></span><br><span class="line">a = random.choice(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;choice:&quot;</span>, a)</span><br><span class="line"><span class="comment"># choice: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># randrange</span></span><br><span class="line">b = random.randrange(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;randrange:&quot;</span>, b)</span><br><span class="line"><span class="comment"># randrange: 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;random:&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># random: 0.9494702754144485</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">random.shuffle(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;shuffle:&quot;</span>, l)</span><br><span class="line"><span class="comment"># shuffle: [5, 1, 4, 6, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uniform</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;uniform:&quot;</span>, random.uniform(<span class="number">19</span>, <span class="number">27</span>))</span><br><span class="line"><span class="comment"># uniform: 19.36935154959944</span></span><br></pre></td></tr></table></figure>
<h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String (字符串)"></a>String (字符串)</h3><ul>
<li>Python 中单引号 <code>&#39;</code> 和双引号 <code>&quot;</code> 使用完全相同</li>
<li>使用三引号 (<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>) 可以指定一个多行字符串</li>
<li>转义符 <code>\</code></li>
<li>按字面意义级联字符串，如 <code>&quot;this &quot; &quot;is &quot; &quot;string&quot;</code> 会被自动转换为 <code>this is string</code></li>
<li>Python 中的字符串不能改变</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串</li>
</ul>
<h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><ul>
<li><code>+</code> 表示字符串连接</li>
<li><code>*</code> 表示重复输出字符串</li>
<li><code>[]</code> 表示通过索引得到字符串中的字符。Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始</li>
<li><code>[:]</code> 表示截取字符串中的一部分，遵循左开右闭原则。字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li>
<li><code>in</code>, <code>not in</code> 表示字符是否包含在字符串中</li>
<li><code>r/R</code> 表示原始字符串。使用 <code>r</code> 可以让反斜杠不发生转义。 如 <code>r&quot;this is a line with \n&quot;</code> 则 <code>\n</code> 会显示，并不是换行</li>
<li><code>%</code> 表示格式化字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str_2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +</span></span><br><span class="line"><span class="built_in">print</span>(str_1 + str_2)  <span class="comment"># helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="built_in">print</span>(str_1 * <span class="number">3</span>)  <span class="comment"># hellohellohello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"><span class="built_in">print</span>(str_1[<span class="number">0</span>], str_2[<span class="number">0</span>])  <span class="comment"># h w</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [:]</span></span><br><span class="line"><span class="built_in">print</span>(str_1[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># hel</span></span><br><span class="line"><span class="built_in">print</span>(str_2[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># ol</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in, not in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> str_1)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> str_2)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello \n world1&quot;</span>)</span><br><span class="line"><span class="comment"># hello </span></span><br><span class="line"><span class="comment">#  world1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;hello \n world2&quot;</span>)  <span class="comment"># hello \n world2</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><ul>
<li>通过 <code>%</code> 格式化字符串。<code>%s</code> 表示字符串， <code>%d</code> 表示整型</li>
<li>python3.6 版本后可用 f-string 字面量格式化字符串</li>
<li>格式化字符串函数 <code>str.format()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Xiao ming&quot;</span></span><br><span class="line">sex = <span class="string">&quot;boy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s is a %s&quot;</span> % (name, sex))</span><br><span class="line"><span class="comment"># Xiao ming is a boy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f-string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is a <span class="subst">&#123;sex&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># Xiao ming is a boy</span></span><br></pre></td></tr></table></figure>
<h4 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h4><ul>
<li><code>capitalize()</code> 将字符串的第一个字符转为大写</li>
<li><code>casefold()</code> 返回原字符串消除大小写的副本。消除大小写的字符串可用于忽略大小写的匹配。消除大小写类似于转为小写，但是更加彻底一些，因为它会移除字符串中的所有大小写变化形式。例如，德语小写字母 <code>&#39;ß&#39;</code> 相当于 <code>&quot;ss&quot;</code>，但是它已经是小写了，<code>lower()</code> 不会对 <code>&#39;ß&#39;</code> 做任何改变；而 <code>casefold()</code> 则会将其转换为 <code>&quot;ss&quot;</code></li>
<li><code>center(width, fillchar)</code> 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格</li>
<li><code>count(str,beg=0,end=len(string))</code> 返回 str 在 string 里面出现的次数，如果beg 或者 end 指定则返回指定范围内 str 出现的次数</li>
<li><code>bytes.decode(encoding=&quot;utf-8&quot;,errors=&quot;strict&quot;)</code> 以指定的编码格式解码 bytes 对象。默认编码为 ‘utf-8’</li>
<li><code>encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code> 以指定的编码格式编码字符串,errors 参数可以指定不同的错误处理方案</li>
<li><code>endswith(suffix,beg=0,end=len(string))</code> 检查字符串是否以 obj 结束，如果 beg 或 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True，否则返回 False</li>
<li><code>expandtabs(tabsize=8)</code> 将字符串中的 tab 转换为空格，tab 默认的空格数为8</li>
<li><code>find(str,beg=0,end=len(string))</code> 检测 str 是否包含在字符串中，如果包含返回开始的索引值，否则返回 -1</li>
<li><code>index(str,beg=0,end=len(string))</code> 与 <code>find()</code> 方法一样，只不过如果 str 不在字符串会报异常</li>
<li><code>isalnum()</code> 如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False</li>
<li><code>isalpha()</code> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True，否则返回 False</li>
<li><code>isdigit()</code> 如果字符串只包含数字则返回 True，否则返回 False</li>
<li><code>islower()</code> 如果字符串中包含至少一个区分大小写的字符，并且所有这些字符都是小写，则返回 True，否则返回 False</li>
<li><code>isupper()</code> 如果字符串中包含至少一个区分大小写的字符，并且所有这些字符都是大写，则返回 True，否则返回 False</li>
<li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False</li>
<li><code>isspace()</code> 如果字符串中只包含空白，则返回 True，否则返回 False</li>
<li><code>istitle()</code> 如果字符串是标题化的，则返回 True，否则返回 False</li>
<li><code>join(seq)</code> 以指定字符串作为分隔符，将 seq 中所有的元素合并为一个新的字符串</li>
<li><code>len(string)</code> 返回字符串长度</li>
<li><code>ljust(width[,fillchar])</code> 返回一个原字符串左对齐，并使用 fillchar 填充至长度 width 的新字符串， fillchar 默认为空格</li>
<li><code>lower()</code> 转化字符串中所有大写字符为小写</li>
<li><code>lstrip()</code> 截掉字符串左边的空格或指定字符</li>
<li><code>maketrans()</code> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标</li>
<li><code>max(str)</code> 返回字符串 str 中最大的字母</li>
<li><code>min(str)</code> 返回字符串 str 中最小的字母</li>
<li><code>replace(old,new[,max])</code> 将字符串中的 old 替换成 new，如果 max 指定，则替换不超过 max 次</li>
<li><code>rfind(str,beg=0,end=len(string))</code> 从右边开始查找</li>
<li><code>rindex(str,beg=0,end=len(string))</code> 类似于 index()，从右边开始</li>
<li><code>rjust(width[,fillchar])</code> 返回一个原字符串右对齐，并使用 fillchar 填充至长度 width 的新字符串</li>
<li><code>rstrip()</code> 删除字符串末尾的空格或指定字符</li>
<li><code>split(str=&quot;&quot;,num=string.count(str))</code> 以 str 为分隔符截取字符串，如果 num 有指定值，则截取 num+1 个字符串</li>
<li><code>splitlines([keepends])</code> 按照行(‘\r’,’\r\n’,’\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符</li>
<li><code>startwith(substr,beg=0,end=len(string))</code> 检查字符串是否是以指定字符串 substr 开头，是则返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查</li>
<li><code>strip([chars])</code> 在字符串上执行 <code>lstrip()</code> 和 <code>rstrip()</code></li>
<li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写</li>
<li><code>title()</code> 返回“标题化”的字符串</li>
<li><code>translate(table,deletechars=&quot;&quot;)</code> 根据 table 给出的表转换 string 字符，要过滤掉的字符放到 deletchars 参数中</li>
<li><code>upper()</code> 转换字符串中的小写字母为大写</li>
<li><code>zfill(width)</code> 返回长度为 width 的字符串，原字符串右对齐，前面填充 0</li>
<li><code>isdecima()</code> 检查字符串是否只包含十进制字符，如果是返回 True， 否则返回 False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># capitalize</span></span><br><span class="line">str_1 = <span class="string">&quot;this is an example.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;capitalize:&quot;</span>, str_1.capitalize())  <span class="comment"># capitalize: This is an example.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># center</span></span><br><span class="line">str_2 = <span class="string">&quot;[example]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;center:&quot;</span>, str_2.center(<span class="number">40</span>, <span class="string">&#x27;_&#x27;</span>))  <span class="comment"># center: _______________[example]________________</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count</span></span><br><span class="line">str_3 = <span class="string">&quot;www.baidu.com,www.huaji.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;count:&quot;</span>, str_3.count(<span class="string">&#x27;w&#x27;</span>))  <span class="comment"># count: 6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;count:&quot;</span>, str_3.count(<span class="string">&#x27;w&#x27;</span>, <span class="number">3</span>))  <span class="comment"># count: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encode</span></span><br><span class="line">str_4 = <span class="string">&quot;你好&quot;</span></span><br><span class="line">str_utf8 = str_4.encode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">str_gbk = str_4.encode(<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;encode:&quot;</span>, str_utf8)  <span class="comment"># encode: b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;encode:&quot;</span>, str_gbk)  <span class="comment"># encode: b&#x27;\xc4\xe3\xba\xc3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes.decode</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;decode:&quot;</span>, str_utf8.decode(<span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;strict&quot;</span>))  <span class="comment"># decode: 你好</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;decode:&quot;</span>, str_gbk.decode(<span class="string">&#x27;GBK&#x27;</span>, <span class="string">&#x27;strict&#x27;</span>))  <span class="comment"># decode: 你好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># endwith</span></span><br><span class="line">str_5 = <span class="string">&quot;Hello world!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;endwith:&quot;</span>, str_5.endswith(<span class="string">&#x27;!&#x27;</span>))  <span class="comment"># endwith: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;endwith:&quot;</span>, str_5.endswith(<span class="string">&#x27;!&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>))  <span class="comment"># endwith: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expandtabs</span></span><br><span class="line">str_6 = <span class="string">&quot;What\tis\tyour\tname?&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;expandtabs:&quot;</span>, str_6.expandtabs())  <span class="comment"># expandtabs: What    is      your    name?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find</span></span><br><span class="line">str_7 = <span class="string">&quot;Example,examples&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;find:&quot;</span>, str_7.find(<span class="string">&quot;ple&quot;</span>))  <span class="comment"># find: 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;find:&quot;</span>, str_7.find(<span class="string">&quot;ple&quot;</span>, <span class="number">10</span>))  <span class="comment"># find: 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>, str_7.index(<span class="string">&quot;ple&quot;</span>))  <span class="comment"># index: 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;index:&quot;</span>, str_7.index(<span class="string">&quot;ple&quot;</span>, <span class="number">10</span>))  <span class="comment"># index: 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isalnum</span></span><br><span class="line">str_8 = <span class="string">&quot;example001&quot;</span></span><br><span class="line">str_9 = <span class="string">&quot;example_001&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isalnum:&quot;</span>, str_8.isalnum())  <span class="comment"># isalnum: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isalnum:&quot;</span>, str_9.isalnum())  <span class="comment"># isalnum: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isalpha</span></span><br><span class="line">str_10 = <span class="string">&quot;example例子&quot;</span></span><br><span class="line">str_11 = <span class="string">&quot;example_例子&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isalpha:&quot;</span>, str_10.isalpha())  <span class="comment"># isalpha: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isalpha:&quot;</span>, str_11.isalpha())  <span class="comment"># isalpha: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigit</span></span><br><span class="line">str_12 = <span class="string">&quot;123456&quot;</span></span><br><span class="line">str_13 = <span class="string">&quot;123456abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isdigit:&quot;</span>, str_12.isdigit())  <span class="comment"># isdigit: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isdigit:&quot;</span>, str_13.isdigit())  <span class="comment"># isdigit: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># islower</span></span><br><span class="line">str_14 = <span class="string">&quot;example&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;islower:&quot;</span>, str_14.islower())  <span class="comment"># islower: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isupper</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isupper:&quot;</span>, str_14.isupper())  <span class="comment"># isupper: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isnumeric</span></span><br><span class="line">str_15 = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isnumeric:&quot;</span>, str_15.isnumeric())  <span class="comment"># isnumeric: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isspace</span></span><br><span class="line">str_16 = <span class="string">&quot;   &quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;isspace:&quot;</span>, str_16.isspace())  <span class="comment"># isspace: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># istitle</span></span><br><span class="line">str_17 = <span class="string">&quot;This Is A Title!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;istitle:&quot;</span>, str_17.istitle())  <span class="comment"># istitle: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join</span></span><br><span class="line">list_1 = [<span class="string">&quot;h&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;o&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;join:&quot;</span>, <span class="string">&quot;_&quot;</span>.join(list_1))  <span class="comment"># join: h_e_l_l_o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># len</span></span><br><span class="line">str_18 = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(str_18))  <span class="comment"># len: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ljust</span></span><br><span class="line">str_19 = <span class="string">&quot;this is an example.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ljust:&quot;</span>, str_19.ljust(<span class="number">40</span>, <span class="string">&quot;*&quot;</span>))  <span class="comment"># ljust: this is an example.*********************</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower</span></span><br><span class="line">str_20 = <span class="string">&quot;EXAMPLE&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lower:&quot;</span>, str_20.lower())  <span class="comment"># lower: example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lstrip</span></span><br><span class="line">str_21 = <span class="string">&quot;   test   &quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lstrip:&quot;</span>, str_21.lstrip())  <span class="comment"># lstrip: test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rstrip</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rstrip:&quot;</span>, str_21.rstrip())  <span class="comment"># rstrip:    test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strip</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;strip:&quot;</span>, str_21.strip())  <span class="comment"># strip: test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># min</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min:&quot;</span>, <span class="built_in">min</span>(<span class="string">&quot;test&quot;</span>))  <span class="comment"># min: e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># max</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max:&quot;</span>, <span class="built_in">max</span>(<span class="string">&quot;test&quot;</span>))  <span class="comment"># max: t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace</span></span><br><span class="line">str_22 = <span class="string">&quot;www.helloworld.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;replace:&quot;</span>, str_22.replace(<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>))  <span class="comment"># replace: xxx.helloxorld.com</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;replace:&quot;</span>, str_22.replace(<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="number">2</span>))  <span class="comment"># replace: xxw.helloworld.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split</span></span><br><span class="line">str_23 = <span class="string">&quot;www.test.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;split:&quot;</span>, str_23.split(<span class="string">&quot;.&quot;</span>))  <span class="comment"># split: [&#x27;www&#x27;, &#x27;test&#x27;, &#x27;com&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># splitlines</span></span><br><span class="line">str_24 = <span class="string">&quot;hello\nworld\ntest&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;splitlines:&quot;</span>, str_24.splitlines())  <span class="comment"># splitlines: [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startwith</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;startwith:&quot;</span>, str_24.startswith(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># startwith: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swapcase</span></span><br><span class="line">str_25 = <span class="string">&quot;Test&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;swapcase:&quot;</span>, str_25.swapcase())  <span class="comment"># swapcase: tEST</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># upper</span></span><br><span class="line">str_26 = <span class="string">&quot;example&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;upper:&quot;</span>, str_26.upper())  <span class="comment"># upper: EXAMPLE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zfill</span></span><br><span class="line">str_27 = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;zfill:&quot;</span>, str_27.zfill(<span class="number">10</span>))  <span class="comment"># zfill: 000000test</span></span><br></pre></td></tr></table></figure>
<h5 id="isidigit-isdecimal-isnumeric-的区别"><a href="#isidigit-isdecimal-isnumeric-的区别" class="headerlink" title="isidigit(), isdecimal(), isnumeric()的区别"></a>isidigit(), isdecimal(), isnumeric()的区别</h5><ul>
<li><p>isdigit()</p>
<ul>
<li>True: Unicode数字，byte数字（单字节），全角数字（双字节）</li>
<li>False: 汉字数字，罗马数字，小数</li>
<li>Error: 无</li>
</ul>
</li>
<li><p>isdecimal()</p>
<ul>
<li>True: Unicode数字，，全角数字（双字节）</li>
<li>False: 罗马数字，汉字数字，小数</li>
<li>Error: byte数字（单字节）</li>
</ul>
</li>
<li><p>isnumeric()</p>
<ul>
<li>True: Unicode 数字，全角数字（双字节），汉字数字</li>
<li>False: 小数，罗马数字</li>
<li>Error: byte数字（单字节）</li>
</ul>
</li>
</ul>
<h4 id="type-，isinstance"><a href="#type-，isinstance" class="headerlink" title="type()，isinstance()"></a>type()，isinstance()</h4><p><code>type()</code> 用于获取指定变量的数据类型，<code>isinstance()</code> 用于判断变量是否是指定类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num, <span class="built_in">type</span>(num))  <span class="comment"># 10 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(s, <span class="built_in">str</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>isinstance 和 type 的区别在于：</p>
<ul>
<li><code>type()</code> 不会认为子类是一种父类类型。</li>
<li><code>isinstance()</code> 会认为子类是一种父类类型。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(A(), A))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(A()) == A)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(B(), A))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(B()) == A)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List (列表)"></a>List (列表)</h3><ul>
<li>列表是写在方括号 <code>[]</code> 之间、用逗号分隔开的元素列表</li>
<li>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌嵌套）</li>
<li>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表</li>
<li>列表索引正向从 0 开始，反向从 -1 开始</li>
</ul>
<h4 id="一维列表"><a href="#一维列表" class="headerlink" title="一维列表"></a>一维列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">varlist = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;pai&#x27;</span>, <span class="number">3.1415</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(varlist[<span class="number">0</span>])  <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(varlist[<span class="number">2</span>])  <span class="comment"># 123</span></span><br><span class="line"><span class="built_in">print</span>(varlist[-<span class="number">1</span>])  <span class="comment"># 3.1415</span></span><br></pre></td></tr></table></figure>
<h4 id="多维列表"><a href="#多维列表" class="headerlink" title="多维列表"></a>多维列表</h4><p>列表元素可以为列表，构成二维或多维列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">varlist = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">123</span>, [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>], <span class="string">&#x27;pai&#x27;</span>, <span class="number">3.1415</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">索引</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, 123, [11, 22, 33], &#x27;pai&#x27;, 3.1415]</span></span><br><span class="line"><span class="string">  0    1    2     3             4       5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[11, 22, 33]</span></span><br><span class="line"><span class="string">  0   1   2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(varlist[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [11, 22, 33]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(varlist[<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 22</span></span><br></pre></td></tr></table></figure>
<h4 id="添加或删除列表元素"><a href="#添加或删除列表元素" class="headerlink" title="添加或删除列表元素"></a>添加或删除列表元素</h4><ul>
<li>可以使用 <code>append()</code> 方法在列表后面添加元素</li>
<li>使用 <code>del</code> 命令删除列表中指定的元素</li>
<li><code>remove()</code> 函数用于移除列表中某个值的第一个匹配项</li>
<li><code>pop(i)</code> 删除列表中第 i 个元素，默认为最后一个</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append()</span></span><br><span class="line">l.append(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="keyword">del</span> l[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 3, 4, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()</span></span><br><span class="line">l.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 4, 3, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()</span></span><br><span class="line">l.pop()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 4, 3]</span></span><br><span class="line"></span><br><span class="line">l.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [4, 3]</span></span><br></pre></td></tr></table></figure>
<h3 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple (元组)"></a>Tuple (元组)</h3><ul>
<li>在定义多个数据内容时，可以选择使用 List 类型，还可以使用元组类型来定义</li>
<li>列表使用 <code>[]</code> 来定义，元组使用 <code>()</code></li>
<li>如果元组中只有一个元素，需要在该元素后面添加逗号构成元组</li>
<li>可以通过定义一个变量，多个赋值来定义一个元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var_tuple, <span class="built_in">type</span>(var_tuple))</span><br><span class="line"><span class="comment"># (1, 2, 3, &#x27;a&#x27;) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(var_tuple[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果元组中只有一个元素，则需要加逗号</span></span><br><span class="line">var_tuple2 = (<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(var_tuple2, <span class="built_in">type</span>(var_tuple2))</span><br><span class="line"><span class="comment"># abc &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">var_tuple3 = (<span class="string">&#x27;abc&#x27;</span>,)</span><br><span class="line"><span class="built_in">print</span>(var_tuple3, <span class="built_in">type</span>(var_tuple3))</span><br><span class="line"><span class="comment"># (&#x27;abc&#x27;,) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的其他定义方式，如果定义的变量数量与赋值数量不匹配，则变为元组</span></span><br><span class="line">var_tuple4 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(var_tuple4, <span class="built_in">type</span>(var_tuple4))</span><br><span class="line"><span class="comment"># (1, 2, 3) &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>列表与元组的区别<ul>
<li>列表 <code>[]</code>，元组 <code>()</code></li>
<li>列表中的值可以被改变，元组中的值不可以被改变</li>
<li>虽然元组的元素不可改变，但它可以包含可变的对象，如 list</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_tuple5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(var_tuple5)</span><br><span class="line"><span class="comment"># (1, 2, 3, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5, 6)</span></span><br><span class="line"></span><br><span class="line">var_tuple5[<span class="number">3</span>][<span class="number">0</span>] = <span class="string">&#x27;change&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(var_tuple5)</span><br><span class="line"><span class="comment"># (1, 2, 3, [&#x27;change&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5, 6)</span></span><br></pre></td></tr></table></figure>
<h3 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary (字典)"></a>Dictionary (字典)</h3><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取</p>
<ul>
<li>字典也是用于存储一组或多组数据时使用，使用 <code>&#123;&#125;</code> 来定义</li>
<li>字典采用键值对方式存储，键值之间使用 <code>:</code> 分割，键必须为字符串或数字类型，值可以是任意类型</li>
<li>多组键值对之间用逗号分隔</li>
<li>键名不可重复，值可以重复</li>
<li>在 python3.7 之前的版本，字典存储是无序的，之后的版本是有序的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录一本书的信息</span></span><br><span class="line">var_dict1 = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;《鬼谷子》&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;鬼谷子&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">29.99</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(var_dict1, <span class="built_in">type</span>(var_dict1))</span><br><span class="line"><span class="comment"># &#123;&#x27;title&#x27;: &#x27;《鬼谷子》&#x27;, &#x27;author&#x27;: &#x27;鬼谷子&#x27;, &#x27;price&#x27;: 29.99&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典中的值</span></span><br><span class="line"><span class="built_in">print</span>(var_dict1[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line"><span class="comment"># 《鬼谷子》</span></span><br></pre></td></tr></table></figure>
<h4 id="添加或删除字典元素"><a href="#添加或删除字典元素" class="headerlink" title="添加或删除字典元素"></a>添加或删除字典元素</h4><ul>
<li>直接对新的键赋值即可添加新元素</li>
<li><code>del</code> 命令可删除字典元素或整个字典</li>
<li><code>clear()</code> 方法可清空字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiao ming&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">dict_1[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;boy&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;xiao ming&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;boy&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">del</span> dict_1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br><span class="line"><span class="comment"># &#123;&#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;boy&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">dict_1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict_1)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set (集合)"></a>Set (集合)</h3><p>Set 是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试和删除重复元素。</p>
<ul>
<li>set 集合是一个无序且元素不重复的数据类型</li>
<li>set 使用 <code>&#123;&#125;</code> 或 <code>set()</code> 方法来定义</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(var_s, <span class="built_in">type</span>(var_s))</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, &#x27;b&#x27;, &#x27;a&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">var_s2 = <span class="built_in">set</span>(<span class="string">&#x27;23456&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(var_s2, <span class="built_in">type</span>(var_s2))</span><br><span class="line"><span class="comment"># &#123;&#x27;3&#x27;, &#x27;4&#x27;, &#x27;2&#x27;, &#x27;6&#x27;, &#x27;5&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果需要定义一个空集合，只能使用 <code>set()</code> 方法，因为 <code>&#123; &#125;</code>定义的是一个空字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义空集合</span></span><br><span class="line">var_s3 = <span class="built_in">set</span>()</span><br><span class="line">var_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var_s3, <span class="built_in">type</span>(var_s3))</span><br><span class="line"><span class="comment"># set() &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var_dict, <span class="built_in">type</span>(var_dict))</span><br><span class="line"><span class="comment"># &#123;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="添加或删除集合元素"><a href="#添加或删除集合元素" class="headerlink" title="添加或删除集合元素"></a>添加或删除集合元素</h4><ul>
<li>可以使用 <code>add()</code>, <code>update()</code> 方法添加元素<ul>
<li><code>add(x)</code> 将元素 x 添加到集合中，如果元素已存在，则不进行任何操作</li>
<li><code>update(x)</code> 将 x 添加到集合中，x 可以是 list, tuple, dict 等数据类型，如果是 dict 则添加对应的键的值</li>
</ul>
</li>
<li>可以使用 <code>discard()</code>, <code>remove()</code>, <code>pop()</code> 方法删除元素<ul>
<li><code>discard()</code> 方法删除元素时如果元素不存在，不会发生错误</li>
<li><code>remove()</code> 方法删除元素时如果元素不存在，则会发生错误</li>
<li><code>pop()</code> 方法会随机删除一个元素。set 集合的 <code>pop()</code> 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">var_s4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">var_s4.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;, 1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4.update([<span class="number">5</span>])  <span class="comment"># update() 方法也可以添加 list, tuple, dict等数据类型的值</span></span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4.update((<span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4.update(&#123;<span class="string">&#x27;up&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">456</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, &#x27;id&#x27;, &#x27;up&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加重复元素是无效的</span></span><br><span class="line">var_s4.add(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法获取集合内的单个元素，但是可以添加或删除</span></span><br><span class="line">var_s4.discard(<span class="string">&#x27;a&#x27;</span>)  <span class="comment"># discard() 方法删除元素时如果元素不存在，不会发生错误</span></span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4.remove(<span class="number">1</span>)  <span class="comment"># remove() 方法删除元素时如果元素不存在，则会发生错误</span></span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">var_s4.pop()  <span class="comment"># pop() 方法会随机删除一个元素</span></span><br><span class="line"><span class="built_in">print</span>(var_s4)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li><code>len()</code> 方法返回集合元素个数</li>
<li><code>clear()</code> 方法清空集合</li>
<li><code>in()</code> 方法判断元素是否在集合内</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># len()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()</span></span><br><span class="line"><span class="built_in">print</span>(s.clear())</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure>
<h4 id="集合的常见用法"><a href="#集合的常见用法" class="headerlink" title="集合的常见用法"></a>集合的常见用法</h4><ul>
<li>集合主要用于运算交集，差集，并集，对称差集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运算交差并、对称集合</span></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="comment"># &#123;1, &#x27;a&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)</span><br><span class="line"><span class="comment"># &#123;2, 3, &#x27;b&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 33, &#x27;a&#x27;, 22, &#x27;b&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差集，将两个集合中重复的去掉，剩下的放到一起</span></span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)</span><br><span class="line"><span class="comment"># &#123;33, 2, 3, 22, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><ul>
<li>在和数字运算时，True 转换为 1，False 转换为 0</li>
<li>非零数在判断时转为真，零转为假</li>
<li>浮点数与整数做运算时，整数转换为浮点数</li>
<li>优先级：bool —&gt; 整型 —&gt; 浮点 —&gt; 复数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="literal">True</span>, <span class="number">123</span>, <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool，整数</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="comment"># 124</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool, 浮点</span></span><br><span class="line"><span class="built_in">print</span>(a + c)</span><br><span class="line"><span class="comment"># 4.140000000000001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数，浮点</span></span><br><span class="line"><span class="built_in">print</span>(b + c)</span><br><span class="line"><span class="comment"># 126.14</span></span><br></pre></td></tr></table></figure>
<h4 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h4><ul>
<li><code>str()</code>, <code>int()</code>, <code>float()</code>, <code>bool()</code>, <code>list()</code>, <code>tuple()</code>, <code>dict()</code>, <code>set()</code> 可强制转换成对应类型</li>
<li>容器类型转换 <code>list()</code>, <code>tuple()</code>, <code>dict()</code>, <code>set()</code><ul>
<li>字符串转换为列表时，会将字符串中的每一个字符当做列表的元素</li>
<li>数字类型是非容器类型，无法转换为列表</li>
</ul>
</li>
<li>List, Tuple, Set 在通过 <code>dict()</code> 转换为 Dict 时，需要满足列表（元组）为二维列表（元组），并且每一个二维列表（元组）只能有两个值，其中第一个是 Key，第二个为 Value。Set 则需要满足每个元素为包含两个元素的元组，其中第一个是 Key，第二个为 Value</li>
<li><code>repr()</code> 将对象转化为供解释器读取的形式</li>
<li><code>eval(str)</code> 执行一个字符串的表达式，并返回表达式的值</li>
<li><code>frozenset()</code>  返回一个冻结的集合，冻结后的集合不能再添加或删除任何元素<ul>
<li>在集合的关系中，有集合中的元素是另一个集合的情况，但是普通集合本身是可变的，那么它的实例就不能放在另一个集合中 (set中的元素必须是不可变类型)。所以，frozenset 提供了不可变的集合的功能，当集合不可变时，它就满足了作为集合中的元素的要求，就可以放在另一个集合中了</li>
</ul>
</li>
<li><code>chr()</code> 用一个范围在 range(256) 内的整数做参数，返回一个对应的字符(ASCII字符串)</li>
<li><code>ord()</code> 返回一个字符对应的 ASCII 值或 Unicode 值</li>
<li><code>oct()</code> 将一个整数转换为一个八进制字符串</li>
<li><code>hex()</code> 将一个整数转换为十六进制字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict()</span></span><br><span class="line">list_1 = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list-&gt;dict:&quot;</span>, <span class="built_in">dict</span>(list_1))  <span class="comment"># list-&gt;dict: &#123;1: 2, 3: 4&#125;</span></span><br><span class="line"></span><br><span class="line">tuple_1 = ((<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tuple-&gt;dict:&quot;</span>, <span class="built_in">dict</span>(tuple_1))  <span class="comment"># tuple-&gt;dict: &#123;1: 2, 3: 4&#125;</span></span><br><span class="line"></span><br><span class="line">set_1 = &#123;(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set-&gt;dict:&quot;</span>, <span class="built_in">dict</span>(set_1))  <span class="comment"># set-&gt;dict: &#123;1: 2, 3: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repr()</span></span><br><span class="line">str_1 = <span class="string">&quot;Test&quot;</span></span><br><span class="line">dict_1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Hua&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;repr:&quot;</span>, <span class="built_in">repr</span>(str_1))  <span class="comment"># repr: &#x27;Test&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;repr:&quot;</span>, <span class="built_in">repr</span>(dict_1))  <span class="comment"># repr: &#123;&#x27;name&#x27;: &#x27;Hua&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;repr:&quot;</span>, <span class="built_in">repr</span>(now))  <span class="comment"># repr: datetime.datetime(2022, 3, 1, 16, 36, 38, 917660)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval(str)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eval:&quot;</span>, <span class="built_in">eval</span>(<span class="string">&quot;3*8&quot;</span>))  <span class="comment"># eval: 24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eval:&quot;</span>, <span class="built_in">eval</span>(<span class="string">&quot;pow(2,4)&quot;</span>))  <span class="comment"># eval: 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frozenset()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;frozenset:&quot;</span>, <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">10</span>)))  <span class="comment"># frozenset: frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chr:&quot;</span>, <span class="built_in">chr</span>(<span class="number">48</span>))  <span class="comment"># chr: 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chr:&quot;</span>, <span class="built_in">chr</span>(<span class="number">67</span>))  <span class="comment"># chr: C</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ord()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord:&quot;</span>, <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>))  <span class="comment"># ord: 48</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord:&quot;</span>, <span class="built_in">ord</span>(<span class="string">&quot;C&quot;</span>))  <span class="comment"># ord: 67</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># oct(), hex()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;oct:&quot;</span>, <span class="built_in">oct</span>(<span class="number">18</span>))  <span class="comment"># oct: 0o22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hex:&quot;</span>, <span class="built_in">hex</span>(<span class="number">18</span>))  <span class="comment"># hex: 0x12</span></span><br></pre></td></tr></table></figure>
<h2 id="Python-推导式"><a href="#Python-推导式" class="headerlink" title="Python 推导式"></a>Python 推导式</h2><p>Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体</p>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>格式如下：</p>
<ul>
<li><code>[表达式 for 变量 in 列表]</code></li>
<li><code>[表达式 for 变量 in 列表 if 条件]</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l_1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(l_1)</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">l_2 = [y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>) <span class="keyword">if</span> y % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(l_2)</span><br><span class="line"><span class="comment"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure>
<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>格式如下：</p>
<ul>
<li><code>&#123;key_expr: value_expr for value in collection&#125;</code></li>
<li><code>&#123;key_expr: value_expr for value in collection if condition&#125;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;phone&quot;</span>]</span><br><span class="line">d = &#123;key: <span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: 4, &#x27;age&#x27;: 3, &#x27;phone&#x27;: 5&#125;</span></span><br><span class="line"></span><br><span class="line">d = &#123;key: key % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>) <span class="keyword">if</span> key % <span class="number">3</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># &#123;0: True, 3: False, 6: True, 9: False, 12: True, 15: False, 18: True&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><p>格式如下：</p>
<ul>
<li><code>&#123;expression for item in Sequence&#125;</code></li>
<li><code>&#123;expression for item in Sequence if conditional&#125;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s_1 = &#123;x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s_1)</span><br><span class="line"><span class="comment"># &#123;0, 1, 64, 4, 36, 9, 16, 49, 81, 25&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断不是 abc 的字母并输出</span></span><br><span class="line">s_2 = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s_2)</span><br><span class="line"><span class="comment"># &#123;&#x27;d&#x27;, &#x27;r&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h3><p>格式如下：</p>
<ul>
<li><code>(expression for item in Sequence)</code></li>
<li><code>(expression for item in Sequence if conditional)</code></li>
</ul>
<p>元组推导式与列表推导式的用法完全相同，但元组推导式返回的结果是一个生成器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_1 = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(t_1)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001A0375C6650&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(t_1))</span><br><span class="line"><span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置</title>
    <url>/2022/07/16/Linux%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="切换到-root-用户"><a href="#切换到-root-用户" class="headerlink" title="切换到 root 用户"></a>切换到 root 用户</h3><p>Ubuntu 默认为用户账户，可以执行以下命令换到 root 账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 root 密码</span></span><br><span class="line">sudo passwd root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 root</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="开启-root-远程-ssh-密码登录"><a href="#开启-root-远程-ssh-密码登录" class="headerlink" title="开启 root 远程 ssh 密码登录"></a>开启 root 远程 ssh 密码登录</h3><p>编辑文件 <em>/etc/ssh/sshd_config</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释掉 PermitRooLogin prohibit-password</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增一行</span></span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>重启 ssh 服务 <code>sudo service ssh restart</code></p>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>CentOS 8 默认的 shell 为 bash，可配置 bash 高亮或直接更改为 oh-my-zsh，步骤如下(均在 root 用户下操作)</p>
<h3 id="bash-高亮配置"><a href="#bash-高亮配置" class="headerlink" title="bash 高亮配置"></a>bash 高亮配置</h3><ol>
<li><code>vi ~/.bashrc</code></li>
<li><p>在文件最后增加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;31m\]\u\[\033[00m\]@\h: \[\033[01;36m\]\w\[\033[00m\] \[\t\]\n\$ &#x27;</span><br><span class="line"> </span><br><span class="line">export LS_COLORS=$LS_COLORS&quot;*.py=00;35:*.pl=00;32:*.sh=01;32:*.xls=04;36:*.png=04;35;43:*.fa=04;33:*.R=00;32:*.r=00;32:*.vcf=04;35:&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>source ~/.bashrc</code></p>
</li>
</ol>
<h3 id="更换默认终端为-oh-my-zsh"><a href="#更换默认终端为-oh-my-zsh" class="headerlink" title="更换默认终端为 oh-my-zsh"></a>更换默认终端为 oh-my-zsh</h3><ol>
<li>查看当前使用的 Shell 类型，一般为 <code>/bin/bash</code> 或 <code>/usr/bin/bash</code><br><code>echo $0</code></li>
<li><p>查看当前默认终端，一般为 <code>/bin/bash</code><br><code>echo $SHELL</code></p>

<p>（上图已修改 bash 为 zsh）</p>
</li>
<li><p>查看当前系统存在的 shell<br><code>cat /etc/shells</code></p>

</li>
<li><p>下载 zsh<br><code>yum -y install zsh</code><br>or<br><code>apt -y install zsh</code></p>
</li>
<li><p>更改默认终端，使用以下三种方法之一即可</p>
<ol>
<li>使用命令 <code>chsh -shell /bin/zsh username</code> 更改默认 Shell<ol>
<li><code>-shell</code> 参数可替换为 <code>-s</code></li>
<li><code>/bin/zsh</code> 也可以换成其他想要更改的 shell</li>
<li><code>username</code> 替换为用户名，如 <code>root</code></li>
</ol>
</li>
<li>如果 <code>chsh</code> 命令不存在或执行失败，可以使用 <code>usermod --shell /bin/zsh username</code>，使用规则同上</li>
<li><p>手动修改 <em>passwd</em> 文件 <code>vim /etc/passwd</code></p>
<ol>
<li>文件第一行即为 root 用户使用的 shell</li>
<li>username 一行即为 username 用户使用的 shell</li>
<li>更改 shell 路径为想要的路径即可</li>
</ol>

</li>
</ol>
</li>
<li><p>重启服务器，此时打开终端时应当为 oh-my-zsh</p>
</li>
</ol>
<h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><p>按照 oh-my-zsh 官方说明</p>
<ul>
<li>使用 curl 安装<br><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></li>
<li>使用 wget 安装<br><code>sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></li>
</ul>
<h3 id="oh-my-zhs-更换主题"><a href="#oh-my-zhs-更换主题" class="headerlink" title="oh-my-zhs 更换主题"></a>oh-my-zhs 更换主题</h3><p>选用 Powerlevel10k 这个主题</p>
<p>官方链接为 &lt;<a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k&gt;">https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k&gt;</a></p>
<h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>Powerlevel10k 主题支持多种字体，不过最好适配的是 Meslo Nerd Font 字体。可在主题链接中找到字体下载链接。下载安装字体后，可在使用的终端工具中启用该字体</p>
<p>Vscode配置：</p>
<blockquote>
<p>Open File → Preferences → Settings (PC) or Code → Preferences → Settings (Mac), enter terminal.integrated.fontFamily in the search box at the top of Settings tab and set the value below to MesloLGS NF. Consult this screenshot to see how it should look like or see this issue for extra information.</p>
</blockquote>
<h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>oh-my-zsh 安装该主题使用以下命令即可</p>
<p><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</code></p>
<p>下载安装完成后，在 <em>~/.zshrc</em> 文件中修改 <code>ZSH_THEME</code> 项为 <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code>。然后使用命令 <code>source ~/.zshrc</code> 使配置生效</p>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>在主题下载安装好后的第一次使用中，会让用户配置各种项目，按照个人观感进行选择。如果需要重新设置，使用命令 <code>p10k configure</code> 即可</p>
<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><h5 id="z"><a href="#z" class="headerlink" title="z"></a>z</h5><p>z 插件是 oh-my-zsh 默认安装的，可以使用 <code>z 部分路径名</code> + Tab 的方式直接进入之前进入过的目录</p>
<p>通过配置文件 <em>~/.zshrc</em> 的 <code>plugins</code> 项，增加插件名，插件名称之间用空格分隔</p>


<p>配置保存后使用命令 <code>source ~/.zshrc</code> 使配置生效</p>
<h5 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h5><p>zsh-autosuggestions 插件可以自动补全之前执行过的命令</p>
<p>使用命令 <code>git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</code> 执行安装</p>
<p>使用如上方式配置文件</p>
<h5 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h5><p>zsh-syntax-highlighting 插件可以高亮显示命令，命令输入正确时为绿色，输入错误时为红色</p>
<p>使用命令 <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</code> 执行安装</p>
<p>使用如上方式配置文件</p>
<h5 id="colored-man-pages"><a href="#colored-man-pages" class="headerlink" title="colored-man-pages"></a>colored-man-pages</h5><p>colored-man-pages 插件可以着色 man 手册内容</p>
<p>直接在 <code>plugins</code> 项添加即可</p>
<h5 id="colorize"><a href="#colorize" class="headerlink" title="colorize"></a>colorize</h5><p>使用 python3-pygments 引擎为 cat 文件着色</p>
<p><code>yum install python3-pygments</code></p>
<p>使用时需要使用 <code>ccat</code> 代替 <code>cat</code> 命令</p>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>Centos Stream 8 及 Ubuntu LTS 20.04 以上自带 Vim 8.0+</p>
<p>Vim 的配置文件可以被当前用户目录下的 <em>.vimrc</em> 文件覆盖，因此所有配置均写在 <em>/root/.vimrc</em> 下（以 root 用户为例）</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>使用 “onehalf” 主题，采用手动安装的方式（vim plug 安装方式无法正确安装）</p>
<p>&lt;<a href="https://github.com/sonph/onehalf&gt;">https://github.com/sonph/onehalf&gt;</a></p>
<ol>
<li>windows 环境下下载 github 库的代码文件 &lt;<a href="https://github.com/sonph/onehalf.git&gt;">https://github.com/sonph/onehalf.git&gt;</a></li>
<li>对应的 vim 配置文件在 <em>\vim_onehalf\onehalf-master\vim</em> 下</li>
<li>在 linux 终端新建 vim 配置文件夹<br><code>mkdir ~/.vim</code></li>
<li>将主题文件拷贝到 <em>.vim</em> 下<br>在下载的配置文件目录打开 cmd 或 powershell<br><code>scp ./colors root@&quot;your_ip&quot;:~/.vim</code><br><code>scp ./autoload root@&quot;your_ip&quot;:~/.vim</code></li>
<li>新建 vim 配置文件 <em>.vimrc</em> 或拷贝默认的配置文件<br><code>vim .vimrc</code><br>or<br><code>cp /etc/vimrc ~/.vimrc</code></li>
<li><p>在 <em>.vimrc</em> 最后新增以下代码</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> t_Co=<span class="number">256</span></span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">colorscheme</span> onehalfdark</span><br><span class="line"><span class="comment">&quot; 如果使用 airline，则打开该配置项</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_theme</span>=<span class="string">&#x27;onehalfdark&#x27;</span></span><br><span class="line"><span class="comment">&quot; 如果使用 lightline，则打开该配置项</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:lightline</span> = &#123; <span class="string">&#x27;colorscheme&#x27;</span>: <span class="string">&#x27;onehalflight&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想使用 true colors，首先使用 <em>truecolor.sh</em> 脚本测试系统是否支持 true colors</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">truecolor.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Use this script to test if you have true color support in your terminal.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Usage: ./truecolor.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If the color ramp is perfectly smooth, <span class="literal">true</span> color is supported.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Source: https://gist.github.com/XVilka/8346728</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">awk <span class="string">&#x27;BEGIN&#123;</span></span></span><br><span class="line">    s=&quot;/\\/\\/\\/\\/\\&quot;; s=s s s s s s s s;</span><br><span class="line">    for (colnum = 0; colnum&lt;77; colnum++) &#123;</span><br><span class="line">        r = 255-(colnum*255/76);</span><br><span class="line">        g = (colnum*510/76);</span><br><span class="line">        b = (colnum*255/76);</span><br><span class="line">        if (g&gt;255) g = 510-g;</span><br><span class="line">        printf &quot;\033[48;2;%d;%d;%dm&quot;, r,g,b;</span><br><span class="line">        printf &quot;\033[38;2;%d;%d;%dm&quot;, 255-r,255-g,255-b;</span><br><span class="line">        printf &quot;%s\033[0m&quot;, substr(s,colnum+1,1);</span><br><span class="line">    &#125;</span><br><span class="line">    printf &quot;\n&quot;;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

</li>
<li><p>如果系统支持，在 <em>.vimrc</em> 中添加如下设置启用 true colors</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&#x27;+termguicolors&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> &amp;t_8f = <span class="string">&quot;\&lt;Esc&gt;[38;2;%lu;%lu;%lum&quot;</span></span><br><span class="line">    <span class="keyword">let</span> &amp;t_8b = <span class="string">&quot;\&lt;Esc&gt;[48;2;%lu;%lu;%lum&quot;</span></span><br><span class="line">    <span class="keyword">set</span> termguicolors</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Vim-配置"><a href="#Vim-配置" class="headerlink" title="Vim 配置"></a>Vim 配置</h3><h4 id="VimPlug"><a href="#VimPlug" class="headerlink" title="VimPlug"></a>VimPlug</h4><p>github: &lt;<a href="https://github.com/junegunn/vim-plug&gt;">https://github.com/junegunn/vim-plug&gt;</a></p>
<p>VimPlug 是 vim 的一款插件管理器，安装方式见官网。Linux 可使用如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>
<p>安装完成后，需要在 <em>.vimrc</em> 中添加以下配置</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">  YOUR PLUG</span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure>
<p>替换 “YOUR PLUG” 为具体的插件信息即可</p>
<h4 id="Vim-Awesome"><a href="#Vim-Awesome" class="headerlink" title="Vim Awesome"></a>Vim Awesome</h4><p>URL: &lt;<a href="https://vimawesome.com/&gt;">https://vimawesome.com/&gt;</a></p>
<p>Vim Awesome 有一系列的 vim 插件可供选择</p>
<p>以安装 The NERD tree 插件为例</p>
<ol>
<li>进入 The NERD tree 页面 &lt;<a href="https://vimawesome.com/plugin/nerdtree-red&gt;">https://vimawesome.com/plugin/nerdtree-red&gt;</a></li>
<li>在安装方式处选择 VimPlug</li>
<li><p>如图所示，在 <em>.vimrc</em> 中添加如下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"><span class="comment">&quot; 新增下面这条命令，缩进是可选的</span></span><br><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加完成后 <code>:wq</code> 保存退出 <em>.vimrc</em>，然后再次打开 vim <code>vim ~/.vimrc</code>，执行以下命令即可下载插件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure>
<p><code>:source %</code> 命令可以不执行，执行后有可能造成插件下载失败</p>
</li>
</ol>
<h4 id="Vimrc"><a href="#Vimrc" class="headerlink" title="Vimrc"></a>Vimrc</h4><p>以下为我的 vim 配置具体内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; General</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; keep 500 lines of command line history</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable filetype plugins</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; With a map leader it&#x27;s possible to do extra key combinations</span></span><br><span class="line"><span class="comment">&quot; like &lt;leader&gt;w saves the current file</span></span><br><span class="line"><span class="comment">&quot; 使用 leader 键统一快捷键</span></span><br><span class="line"><span class="keyword">let</span> mapleader=<span class="string">&quot;,&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; User Interface</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Turn on the wild menu</span></span><br><span class="line"><span class="comment">&quot; 在命令栏补全时显示所有可补全项</span></span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set to auto read when a file is changed from the outside</span></span><br><span class="line"><span class="comment">&quot; 当有外部修改时自动保存</span></span><br><span class="line"><span class="keyword">set</span> autoread</span><br><span class="line"><span class="keyword">au</span> FocusGained,BufEnter * <span class="keyword">checktime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Configure backspace so it acts as it should act</span></span><br><span class="line"><span class="comment">&quot; 配置 backspace 键</span></span><br><span class="line"><span class="comment">&quot; indent: 允许删除自动缩进的内容</span></span><br><span class="line"><span class="comment">&quot; eol: 允许删除换行符</span></span><br><span class="line"><span class="comment">&quot; start: 允许删除进入插入模式前已有的内容</span></span><br><span class="line"><span class="keyword">set</span> backspace=eol,start,<span class="built_in">indent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 默认情况下，光标移动到一行最左边的时候，继续按左键，光标并不能回到上一行的最右边。whichwrap</span></span><br><span class="line"><span class="comment">&quot; 可以允许特定的几个按键开启自动跳转功能</span></span><br><span class="line"><span class="comment">&quot; &lt;: 在 Normal 或 Visual 模式下按左方向键</span></span><br><span class="line"><span class="comment">&quot; &gt;: 在 Normal 或 Visual 模式下按右方向键</span></span><br><span class="line"><span class="comment">&quot; h: 在 Normal 或 Visual 模式下按h键</span></span><br><span class="line"><span class="comment">&quot; l: 在 Normal 或 Visual 模式下按l键</span></span><br><span class="line"><span class="keyword">set</span> whichwrap=&lt;,&gt;,h,<span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; A buffer becomes hidden when it is abandoned</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">hid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Ignore case when searching</span></span><br><span class="line"><span class="comment">&quot; 搜索时忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; When searching try to be smart about cases</span></span><br><span class="line"><span class="comment">&quot; 配合 ignorecase 使用，当输入包含大写时自动区分大小写</span></span><br><span class="line"><span class="keyword">set</span> smartcase</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Highlight search results</span></span><br><span class="line"><span class="comment">&quot; 高亮搜索内容</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Makes search act like search in modern browsers</span></span><br><span class="line"><span class="comment">&quot; 增量搜索</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Don&#x27;t redraw while executing macros</span></span><br><span class="line"><span class="comment">&quot; 性能优化</span></span><br><span class="line"><span class="keyword">set</span> lazyredraw</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; For regular expression turn magic on</span></span><br><span class="line"><span class="comment">&quot; 正则匹配的模式</span></span><br><span class="line"><span class="keyword">set</span> magic</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示括号匹配</span></span><br><span class="line"><span class="keyword">set</span> showmatch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Add a  bit extra margin to the left</span></span><br><span class="line"><span class="comment">&quot; set foldcolumn=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开行数显示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 不兼容 vi 模式</span></span><br><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示光标位置和行列号，用 airline 代替</span></span><br><span class="line"><span class="comment">&quot; set ruler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示上一条命令</span></span><br><span class="line"><span class="keyword">set</span> showcmd</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Always show status line</span></span><br><span class="line"><span class="comment">&quot; set laststatus=2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Colors and Fonts</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Switch syntax highlighting on, when the terminal has colors</span></span><br><span class="line"><span class="comment">&quot; Also switch on highlighting the last used search pattern.</span></span><br><span class="line"><span class="keyword">if</span> &amp;t_Co &gt; <span class="number">2</span> || <span class="built_in">has</span>(<span class="string">&quot;gui_running&quot;</span>)</span><br><span class="line">  <span class="keyword">syntax</span> enable</span><br><span class="line">  <span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&quot; onehalf 主题配置</span></span><br><span class="line">  <span class="comment">&quot; syntax on</span></span><br><span class="line">  <span class="keyword">set</span> t_Co=<span class="number">256</span></span><br><span class="line">  <span class="keyword">set</span> cursorline          <span class="comment">&quot; 突出显示当前行</span></span><br><span class="line">  <span class="keyword">colorscheme</span> onehalfdark</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">g:airline_theme</span>=<span class="string">&#x27;onehalfdark&#x27;</span></span><br><span class="line">  <span class="comment">&quot; lightline</span></span><br><span class="line">  <span class="comment">&quot; let g:lightline = &#123; &#x27;colorscheme&#x27;: &#x27;onehalflight&#x27; &#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&#x27;+termguicolors&#x27;</span>)</span><br><span class="line">     <span class="keyword">let</span> &amp;t_8f = <span class="string">&quot;\&lt;Esc&gt;[38;2;%lu;%lu;%lum&quot;</span></span><br><span class="line">     <span class="keyword">let</span> &amp;t_8b = <span class="string">&quot;\&lt;Esc&gt;[48;2;%lu;%lu;%lum&quot;</span></span><br><span class="line">     <span class="keyword">set</span> termguicolors</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &amp;term==<span class="string">&quot;xterm&quot;</span></span><br><span class="line">     <span class="keyword">set</span> t_Co=<span class="number">8</span></span><br><span class="line">     <span class="keyword">set</span> t_Sb=^[[<span class="number">4</span>%dm</span><br><span class="line">     <span class="keyword">set</span> t_Sf=^[[<span class="number">3</span>%dm</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置当前字符集为 UTF-8</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 在编辑非 UTF-8 文件时，通过 fileencoding 转码</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">v:lang</span> =~ <span class="string">&quot;utf8$&quot;</span> || <span class="variable">v:lang</span> =~ <span class="string">&quot;UTF-8$&quot;</span></span><br><span class="line">   <span class="keyword">set</span> fileencodings=ucs-bom,utf-<span class="number">8</span>,latin1</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 存储格式</span></span><br><span class="line"><span class="keyword">set</span> fileformats=unix,dos,mac</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 使用中文菜单，并使用 UTF-8 编码</span></span><br><span class="line"><span class="comment">&quot; set langmenu=zh_CN.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 使用中文提示信息，并使用 UTF-8 编码</span></span><br><span class="line"><span class="comment">&quot; language message zh_CN.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 防止特殊符号无法显示</span></span><br><span class="line"><span class="comment">&quot; set ambiwidth=double</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; FIles, backups and undo</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Turn backup off</span></span><br><span class="line"><span class="keyword">set</span> nobackup</span><br><span class="line"><span class="keyword">set</span> nowb</span><br><span class="line"><span class="keyword">set</span> noswapfile</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 打开文件时自动跳转到上一次编辑的位置</span></span><br><span class="line"><span class="keyword">au</span> BufReadPost * <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) | <span class="keyword">exe</span> <span class="string">&quot;normal! g&#x27;\&quot;&quot;</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Text, tab and indent related</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 用空格代替 Tab</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 删除时可以一次性删除 tab 出来的空格</span></span><br><span class="line"><span class="keyword">set</span> smarttab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 1 个制表符等价于 4 个空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 按下 tab 键时插入的空格数</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自动缩进时的空白长度</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 不在单词中间断行</span></span><br><span class="line"><span class="keyword">set</span> lbr</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; buffer 一行最多 78 字符</span></span><br><span class="line"><span class="keyword">set</span> textwidth=<span class="number">78</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自动缩进</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自动折行</span></span><br><span class="line"><span class="keyword">set</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Visual mode related</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Visual mode pressing * or # searches for the current selection</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;silent&gt;</span> * :<span class="symbol">&lt;C-u&gt;</span><span class="keyword">call</span> VisualSelection(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)<span class="symbol">&lt;CR&gt;</span>/<span class="symbol">&lt;C-R&gt;</span>=@/<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">vnoremap</span> <span class="symbol">&lt;silent&gt;</span> # :<span class="symbol">&lt;C-u&gt;</span><span class="keyword">call</span> VisualSelection(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)<span class="symbol">&lt;CR&gt;</span>?<span class="symbol">&lt;C-R&gt;</span>=@/<span class="symbol">&lt;CR&gt;</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Moving around, tabs, windows and buffers</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Map &lt;space&gt; to / (search) and Ctrl-&lt;space&gt; to ? (backwards search)</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;space&gt;</span> /</span><br><span class="line"><span class="comment">&quot; map &lt;C-space&gt; ?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Disable highlight when &lt;leader&gt;&lt;cr&gt; is pressed</span></span><br><span class="line"><span class="comment">&quot; 按下 &lt;leader&gt; (,) 和 Enter 时取消搜索高亮</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;leader&gt;</span><span class="symbol">&lt;cr&gt;</span> :<span class="keyword">noh</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Smart way to move between windows</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">j</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">j</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">k</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">k</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span>h <span class="symbol">&lt;C-w&gt;</span>h</span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">l</span> <span class="symbol">&lt;C-w&gt;</span><span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Close the current buffer</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">bd</span> :Bclose<span class="symbol">&lt;cr&gt;</span>:<span class="keyword">tabclose</span><span class="symbol">&lt;cr&gt;</span>gT</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Close all buffers</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">ba</span> :<span class="keyword">bufdo</span> <span class="keyword">bd</span><span class="symbol">&lt;cr&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 当一行太长显示成多行时，设置上下移动以行为单位</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="keyword">j</span> gj</span><br><span class="line"><span class="keyword">nnoremap</span> <span class="keyword">k</span> gk</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>n :NERDTreeFocus<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-n&gt;</span> :NERDTree<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-t&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-f&gt;</span> :NERDTreeFind<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Others</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Don&#x27;t wake up system with blinking cursor:</span></span><br><span class="line"><span class="comment">&quot; http://www.linuxpowertop.org/known.php</span></span><br><span class="line"><span class="keyword">let</span> &amp;guicursor = &amp;guicursor . <span class="string">&quot;,a:blinkon0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; Pluggins</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">    Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; -&gt; NerdTree Settings</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Don&#x27;t Show hide file</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeHidden</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Show Node model</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeDirArrows=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowExpandable</span> = <span class="string">&#x27;▸&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:NERDTreeDirArrowCollapsible</span> = <span class="string">&#x27;▾&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 当剩余窗口都不是可编辑窗口时，自动退出 vim</span></span><br><span class="line"><span class="keyword">autocmd</span> BufEnter * <span class="keyword">if</span> <span class="number">0</span> == <span class="built_in">len</span>(<span class="built_in">filter</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">winnr</span>(<span class="string">&#x27;$&#x27;</span>)), <span class="string">&#x27;empty(getbufvar(winbufnr(v:val), &quot;&amp;bt&quot;))&#x27;</span>)) | qa! | <span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy, Pandas</title>
    <url>/2022/06/14/Numpy-Pandas/</url>
    <content><![CDATA[<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>NumPy（Numerical Python）是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list structure）结构要高效的多（该结构也可以用来表示矩阵（matrix）），支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库</p>
<span id="more"></span>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将一个列表转换为 np 的 array</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment"># shape 将数组的形状输出，一维数组的形状为 (n,)，表示为一个元组，n 表示元素个数</span></span><br><span class="line"><span class="built_in">print</span>(arr.shape)  <span class="comment"># (3,)</span></span><br><span class="line"><span class="built_in">print</span>(arr)  <span class="comment"># [1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接创建整数数列</span></span><br><span class="line">arr2 = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2.shape)  <span class="comment"># (10,)</span></span><br><span class="line"><span class="built_in">print</span>(arr2)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似 range() 一样使用步长等参数</span></span><br><span class="line">arr3 = np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr3.shape)  <span class="comment"># (7,)</span></span><br><span class="line"><span class="built_in">print</span>(arr3)  <span class="comment"># [ 0  3  6  9 12 15 18]</span></span><br></pre></td></tr></table></figure>
<h3 id="linspace-logspace"><a href="#linspace-logspace" class="headerlink" title="linspace, logspace"></a>linspace, logspace</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># np.linspace, np.logspace 常用于画图</span></span><br><span class="line"><span class="comment"># linspace 在一个区间内返回等间距数组</span></span><br><span class="line">arr1 = np.linspace(<span class="number">1</span>, <span class="number">101</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr1.shape)  <span class="comment"># (5,)</span></span><br><span class="line"><span class="built_in">print</span>(arr1)  <span class="comment"># [  1.  26.  51.  76. 101.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时不包括右区间的值</span></span><br><span class="line">arr2 = np.linspace(<span class="number">1</span>, <span class="number">101</span>, <span class="number">5</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(arr2.shape)  <span class="comment"># (5,)</span></span><br><span class="line"><span class="built_in">print</span>(arr2)  <span class="comment"># [ 1. 21. 41. 61. 81.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取对数后的等距插值</span></span><br><span class="line"><span class="comment"># 10^0=1 10^2=100</span></span><br><span class="line">arr3 = np.logspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, endpoint=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(arr3.shape)  <span class="comment"># (5,)</span></span><br><span class="line"><span class="built_in">print</span>(arr3)  <span class="comment"># [  1.           3.16227766  10.          31.6227766  100.        ]</span></span><br></pre></td></tr></table></figure>
<h3 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表转换为矩阵</span></span><br><span class="line">mat = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="built_in">print</span>(mat.shape)  <span class="comment"># (9,)</span></span><br><span class="line"><span class="built_in">print</span>(mat)  <span class="comment"># [1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，数轴越靠前，变化越快，即最后一个维度变化最快，第一个维度变化最慢</span></span><br><span class="line">mat = mat.reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(mat.shape)  <span class="comment"># (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(mat)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加第三个维度，最后一个维度 3 变化最快，1变化最慢</span></span><br><span class="line">mat = mat.reshape(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(mat.shape)  <span class="comment"># (1, 3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(mat)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[[1 2 3]</span></span><br><span class="line"><span class="string">  [4 5 6]</span></span><br><span class="line"><span class="string">  [7 8 9]]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="矩阵初始化"><a href="#矩阵初始化" class="headerlink" title="矩阵初始化"></a>矩阵初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矩阵初始化</span></span><br><span class="line"><span class="comment"># 初始化为 0，接收参数是一个元组</span></span><br><span class="line">arr1 = np.zeros((<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(arr1.shape)  <span class="comment"># (2, 2)</span></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化为 1</span></span><br><span class="line">arr2 = np.ones((<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(arr2.shape)  <span class="comment"># (3, 5)</span></span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1. 1. 1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1. 1. 1.]</span></span><br><span class="line"><span class="string"> [1. 1. 1. 1. 1.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充矩阵</span></span><br><span class="line">arr3 = np.full((<span class="number">2</span>, <span class="number">2</span>), np.inf)</span><br><span class="line"><span class="built_in">print</span>(arr3.shape)  <span class="comment"># (2, 2)</span></span><br><span class="line"><span class="built_in">print</span>(arr3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[inf inf]</span></span><br><span class="line"><span class="string"> [inf inf]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">arr4 = np.full((<span class="number">2</span>, <span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr4.shape)  <span class="comment"># (2, 2)</span></span><br><span class="line"><span class="built_in">print</span>(arr4)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [1 2]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 学习笔记-2</title>
    <url>/2022/02/24/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>算术运算符</li>
<li>字符串运算符</li>
<li>赋值运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>成员运算符</li>
<li>身份运算符</li>
</ul>
<span id="more"></span>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul>
<li><code>+, -, *, /</code> 四则运算</li>
<li><code>%</code> 取模运算符，返回除法的余数</li>
<li><code>**</code> 幂运算符</li>
<li><code>//</code> 取整除，向下取接近除数的整数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">10</span>, <span class="number">20</span>, <span class="number">5.0</span></span><br><span class="line"><span class="comment"># +</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># -10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="built_in">print</span>(a * b)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /</span></span><br><span class="line"><span class="built_in">print</span>(a / b)  <span class="comment"># 0.5</span></span><br><span class="line"><span class="built_in">print</span>(a / c)  <span class="comment"># 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> % <span class="number">2</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> // <span class="number">2</span>)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> ** <span class="number">2</span>)  <span class="comment"># 81</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><ul>
<li>字符串不能与数字直接运算</li>
<li>字符串使用 <code>+</code>，结果是字符串的拼接</li>
<li>字符串使用 <code>*</code>，结果是字符串重复输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;I&#x27;</span></span><br><span class="line">b = <span class="string">&quot;love&quot;</span></span><br><span class="line">c = <span class="string">&quot;you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +</span></span><br><span class="line"><span class="built_in">print</span>(a + b + c)  <span class="comment"># Iloveyou</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *</span></span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">5</span>)  <span class="comment"># IIIII</span></span><br></pre></td></tr></table></figure>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul>
<li><code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>**=</code>, <code>//=</code> 为常用赋值运算符</li>
<li><code>:=</code> 海象运算符，可在表达式内部为变量赋值。Python3.8 新增运算符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +=</span></span><br><span class="line">a += b</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -=</span></span><br><span class="line">a -= b</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *=</span></span><br><span class="line">a *= b</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /=</span></span><br><span class="line">a /= b</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %=</span></span><br><span class="line">a %= c</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **=</span></span><br><span class="line">a **= c</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 128.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># //=</span></span><br><span class="line">a //= c</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 18.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># := 海象运算符，可以用在表达式中优化代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if else 用法</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已经成年&quot;</span>)</span><br><span class="line"><span class="comment"># 优化后</span></span><br><span class="line"><span class="keyword">if</span> age := <span class="number">20</span> &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已经成年&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while 用法</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment"># 优化后</span></span><br><span class="line"><span class="keyword">while</span> line := file.readline():</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推导式用法</span></span><br><span class="line">f = <span class="keyword">lambda</span> x: x + <span class="number">2</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">f_data = [f(x) <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> f(x) != <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 优化后</span></span><br><span class="line">f_data = [y <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> (y := f(x)) != <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul>
<li><code>==</code> 等于</li>
<li><code>!=</code> 不等于</li>
<li><code>&gt;</code> 大于</li>
<li><code>&lt;</code> 小于</li>
<li><code>&gt;=</code> 大于等于</li>
<li><code>&lt;=</code> 小于等于</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># !=</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;=</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;=</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li><code>and</code> 与。<code>x and y</code> 如果 x 为 False，返回 x 的值，否则返回 y 的计算值</li>
<li><code>or</code> 或。<code>x or y</code> 如果 x 为 True，返回 x 的值，否则返回 y 的计算值</li>
<li><code>not</code> 非</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span>)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span>)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(&#123;&#125; <span class="keyword">and</span> <span class="number">0</span>)  <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">or</span> <span class="number">20</span>)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> <span class="number">30</span>)  <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(&#123;&#125; <span class="keyword">or</span> <span class="number">0</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># not</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> a)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul>
<li><code>&amp;</code> 按位与运算符</li>
<li><code>|</code> 按位或运算符</li>
<li><code>^</code> 按位异或运算符。当两个对应的二进位不同时，结果为 1</li>
<li><code>~</code> 按位取反运算符</li>
<li><code>&lt;&lt;</code> 左移运算符。高位丢弃，低位补 0</li>
<li><code>&gt;&gt;</code> 右移运算符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_1 = <span class="number">0b11110011</span></span><br><span class="line">num_2 = <span class="number">0b11001010</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num_1: 1111 0011</span></span><br><span class="line"><span class="string">num_2: 1100 1010</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  1111 0011</span></span><br><span class="line"><span class="string">&amp; 1100 1010</span></span><br><span class="line"><span class="string">  1100 0010</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(num_1 &amp; num_2))</span><br><span class="line"><span class="comment"># 0b11000010</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># |</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  1111 0011</span></span><br><span class="line"><span class="string">| 1100 1010</span></span><br><span class="line"><span class="string">  1111 1011</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(num_1 | num_2))</span><br><span class="line"><span class="comment"># 0b11111011</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  1111 0011</span></span><br><span class="line"><span class="string">^ 1100 1010</span></span><br><span class="line"><span class="string">  0011 1001</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(num_1 ^ num_2))</span><br><span class="line"><span class="comment"># 0b111001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  0 1111 0011</span></span><br><span class="line"><span class="string">~ 1 0000 1100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-&gt; 变为原码：1 1111 0100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(~num_1))</span><br><span class="line"><span class="comment"># -0b11110100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  1111 0011</span></span><br><span class="line"><span class="string">&lt;&lt;1110 0110  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(num_1 &lt;&lt; <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 0b111100110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  1111 0011</span></span><br><span class="line"><span class="string">&gt;&gt;0111 1001</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(num_1 &gt;&gt; <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 0b1111001</span></span><br></pre></td></tr></table></figure>
<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><ul>
<li><code>in</code> 如果在指定的序列中找到值返回 True，否则返回 False</li>
<li><code>not in</code> 如果在指定的序列中没有找到值返回 True，否则返回 False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_1 = <span class="string">&quot;love&quot;</span></span><br><span class="line">str_2 = <span class="string">&quot;I love you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in</span></span><br><span class="line"><span class="built_in">print</span>(str_1 <span class="keyword">in</span> str_2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line"><span class="built_in">print</span>(str_1 <span class="keyword">not</span> <span class="keyword">in</span> str_2)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><ul>
<li><code>is</code> 判断两个标识符是不是引用自一个对象</li>
<li><code>is not</code> 判断两个标识符是不是引用自不同对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">**</td>
<td style="text-align:center">指数运算</td>
</tr>
<tr>
<td style="text-align:center">~, +, -</td>
<td style="text-align:center">按位翻转，一元加号和减号（+@,-@）</td>
</tr>
<tr>
<td style="text-align:center">*, /, %, //</td>
<td style="text-align:center">乘，除，求余数，取整数</td>
</tr>
<tr>
<td style="text-align:center">+, -</td>
<td style="text-align:center">加法减法</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;, &lt;&lt;</td>
<td style="text-align:center">右移，左移运算符</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与</td>
</tr>
<tr>
<td style="text-align:center">^, &#124;</td>
<td style="text-align:center">按位异或，按位或</td>
</tr>
<tr>
<td style="text-align:center">&lt;=, &lt;, &gt;, &gt;=</td>
<td style="text-align:center">比较运算符</td>
</tr>
<tr>
<td style="text-align:center">==, !=</td>
<td style="text-align:center">等于，不等于</td>
</tr>
<tr>
<td style="text-align:center">=, %=, /=, //=, -=, +=, <em>=, *</em>=</td>
<td style="text-align:center">赋值运算符</td>
</tr>
<tr>
<td style="text-align:center">is, is not</td>
<td style="text-align:center">身份运算符</td>
</tr>
<tr>
<td style="text-align:center">in, not in</td>
<td style="text-align:center">成员运算符</td>
</tr>
<tr>
<td style="text-align:center">not, and, or</td>
<td style="text-align:center">逻辑运算符</td>
</tr>
</tbody>
</table>
</div>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程即计算机执行代码的顺序，分为顺序结构，分支结构，循环结构</p>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>通过一条或多条语句的执行结果来决定执行的代码块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">score_list = [<span class="number">57</span>, <span class="number">62</span>, <span class="number">78</span>, <span class="number">84</span>, <span class="number">96</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(score_list)):</span><br><span class="line">    score = random.choice(score_list)</span><br><span class="line">    score_list.remove(score)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Score is <span class="subst">&#123;score&#125;</span>, you get E level.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &lt;= <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Score is <span class="subst">&#123;score&#125;</span>, you get D level.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &lt;= <span class="number">80</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Score is <span class="subst">&#123;score&#125;</span>, you get C level.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Score is <span class="subst">&#123;score&#125;</span>, you get B level.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Score is <span class="subst">&#123;score&#125;</span>, you get A level.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR!&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Score is 57, you get E level.</span></span><br><span class="line"><span class="string">Score is 84, you get B level.</span></span><br><span class="line"><span class="string">Score is 96, you get A level.</span></span><br><span class="line"><span class="string">Score is 62, you get D level.</span></span><br><span class="line"><span class="string">Score is 78, you get C level.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul>
<li>循环可以使用 <code>while</code> 或 <code>for...in</code> 结构</li>
<li><code>while...else</code> 语句：如果 <code>while</code> 后面的条件语句为 false 时，则执行 <code>else</code> 的语句块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while</span></span><br><span class="line"><span class="keyword">while</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;while:&quot;</span>, num)</span><br><span class="line">    num -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">while: 10</span></span><br><span class="line"><span class="string">while: 9</span></span><br><span class="line"><span class="string">while: 8</span></span><br><span class="line"><span class="string">while: 7</span></span><br><span class="line"><span class="string">while: 6</span></span><br><span class="line"><span class="string">while: 5</span></span><br><span class="line"><span class="string">while: 4</span></span><br><span class="line"><span class="string">while: 3</span></span><br><span class="line"><span class="string">while: 2</span></span><br><span class="line"><span class="string">while: 1</span></span><br><span class="line"><span class="string">while: 0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="comment"># while...else</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;while...else:&quot;</span>, num)</span><br><span class="line">    num -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else:&quot;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">while...else: 10</span></span><br><span class="line"><span class="string">while...else: 9</span></span><br><span class="line"><span class="string">while...else: 8</span></span><br><span class="line"><span class="string">while...else: 7</span></span><br><span class="line"><span class="string">while...else: 6</span></span><br><span class="line"><span class="string">while...else: 5</span></span><br><span class="line"><span class="string">while...else: 4</span></span><br><span class="line"><span class="string">while...else: 3</span></span><br><span class="line"><span class="string">while...else: 2</span></span><br><span class="line"><span class="string">while...else: 1</span></span><br><span class="line"><span class="string">else: 0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for...in</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;for:&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">for: 0</span></span><br><span class="line"><span class="string">for: 1</span></span><br><span class="line"><span class="string">for: 2</span></span><br><span class="line"><span class="string">for: 3</span></span><br><span class="line"><span class="string">for: 4</span></span><br><span class="line"><span class="string">for: 5</span></span><br><span class="line"><span class="string">for: 6</span></span><br><span class="line"><span class="string">for: 7</span></span><br><span class="line"><span class="string">for: 8</span></span><br><span class="line"><span class="string">for: 9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="match-语句"><a href="#match-语句" class="headerlink" title="match 语句"></a>match 语句</h3><p>match 语句最简单的形式是将一个目标值与一个或多个字面值进行比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bad request&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a teapot&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span></span><br></pre></td></tr></table></figure>
<p>变量名 <code>_</code> 被作为通配符必定会匹配成功。如果没有 case 语句匹配成功，则不会执行任何分支。可以使用 <code>|</code> 在一个模式中组合多个字面值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br></pre></td></tr></table></figure>
<p>模式的形式类似于解包赋值，并可被用于绑定变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match_point</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">match</span> point:</span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Origin&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, y):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (x, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (x, y):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>,Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not a point&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_point((<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># Origin</span></span><br><span class="line">match_point((<span class="number">0</span>, <span class="number">5</span>))  <span class="comment"># Y=5</span></span><br><span class="line">match_point((<span class="number">9</span>, <span class="number">0</span>))  <span class="comment"># X=9</span></span><br><span class="line">match_point((<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># X=3,Y=5</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率</p>
<h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><ul>
<li>函数代码块以 <code>def</code> 关键词开始，后接函数标识符名称和圆括号<code>()</code></li>
<li>任何传入的参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数</li>
<li>函数的第一行语句可以选择性地使用文档字符串存放函数说明</li>
<li>函数内容以冒号 <code>:</code> 起始，并且缩进</li>
<li><code>return [表达式]</code> 结束函数，选择性地返回一个值给调用方，不带表达式的 <code>return</code> 相当于返回 <code>None</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>通过 <code>函数名()</code> 的方式调用定义好的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test()</span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure>
<h3 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h3><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><p>可传递参数类型有</p>
<ul>
<li>位置参数</li>
<li>限定位置参数</li>
<li>默认参数</li>
<li>可变参数</li>
<li>关键字参数</li>
<li>命名关键字参数</li>
</ul>
<p>函数定义时，必须按顺序编写不同的形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span>(<span class="params">[限定位置参数],[位置参数],[默认参数],[不定长参数],[命名关键字参数],[关键字参数]</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>位置参数直接传参时需以正确的顺序传入参数。调用时的数量必须和声明时的一样。也可以使用带形参名的方式传参，带形参名时可以打乱传参顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num, <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>&#125;</span>: <span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">520</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;I love you&quot;</span></span><br><span class="line">test(a, <span class="built_in">str</span>=<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># I love you: 520</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">str_1, str_2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str_1&#125;</span>,<span class="subst">&#123;str_2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str_a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">str_b = <span class="string">&quot;World&quot;</span></span><br><span class="line">test(str_2=str_b, str_1=str_a)</span><br><span class="line"><span class="comment"># Hello World</span></span><br></pre></td></tr></table></figure>
<h4 id="限定位置参数"><a href="#限定位置参数" class="headerlink" title="限定位置参数"></a>限定位置参数</h4><p>自 python3.8 开始，限定位置参数可以正式用于自定义函数中，它们必须放在形参表的最前面，并在后面使用 <code>/</code> （独占一个参数位）与普通形参分隔。限定位置参数不可使用带形参名的方式传参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a, b, c 为限定位置形参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b,c,/,d</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>调用函数时，如果没有参数传递，则会使用默认参数。默认参数必需在位置参数后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">age=<span class="number">18</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age:&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"><span class="comment"># age: 18</span></span><br></pre></td></tr></table></figure>
<p>默认值在定义作用域里的函数定义中求值，如以下情形</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">arg=a</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">7</span></span><br><span class="line">test()  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
<p>默认值只计算一次。默认值为列表、字典或类实例等可变对象时，会产生与该规则不同的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a, L=[]</span>):</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">1</span>))  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">2</span>))  <span class="comment"># [1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">3</span>))  <span class="comment"># [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_1</span>(<span class="params">a, L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun_1(<span class="number">1</span>))  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span>(fun_1(<span class="number">2</span>))  <span class="comment"># [2]</span></span><br><span class="line"><span class="built_in">print</span>(fun_1(<span class="number">3</span>))  <span class="comment"># [3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>如果需要传入任意个参数，可以使用加了 <code>*</code> 的参数将实参以元组的形式导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">arg1, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;参数1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;参数2:&quot;</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">参数1: Hello</span></span><br><span class="line"><span class="string">参数2: (&#x27;world&#x27;, &#x27;test1&#x27;, &#x27;test2&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">arg1, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;Test&quot;</span>, name=<span class="string">&quot;June&quot;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg1: Test</span></span><br><span class="line"><span class="string">args: &#123;&#x27;name&#x27;: &#x27;June&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数允许传入任意个含参数名的参数，使用带 <code>**</code> 的参数将实参以字典的形式导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, name=<span class="string">&quot;Jack&quot;</span>, age=<span class="number">18</span>, city=<span class="string">&quot;Beijing&quot;</span>)</span><br><span class="line"><span class="comment"># 1 2</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Jack&#x27;, &#x27;age&#x27;: 18, &#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>如果要限制关键字参数的名字，可以用命名关键字参数。即可在调用时只接受限定的关键字参数，同时在函数调用时必须带参数名传参。可以使用 <code>*</code> 单独占一个参数位作为分隔，其后的参数即为命名关键字参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name, age, *, city, job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&quot;Jack&quot;</span>, <span class="number">24</span>, city=<span class="string">&quot;Beijing&quot;</span>, job=<span class="string">&quot;Teacher&quot;</span>)</span><br><span class="line"><span class="comment"># Jack 24 Beijing Teacher</span></span><br></pre></td></tr></table></figure>
<p>如果函数定义汇总已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name, age, *args, city, job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;city:&quot;</span>, city, <span class="string">&quot;job:&quot;</span>, job)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&quot;Jack&quot;</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">78</span>, <span class="string">&quot;Hello&quot;</span>, city=<span class="string">&quot;Beijing&quot;</span>, job=<span class="string">&quot;Teacher&quot;</span>)</span><br><span class="line"><span class="comment"># Jack 23</span></span><br><span class="line"><span class="comment"># args: (11, 2, 78, &#x27;Hello&#x27;)</span></span><br><span class="line"><span class="comment"># city: Beijing job: Teacher</span></span><br></pre></td></tr></table></figure>
<p>命名关键字参数可以有默认值，在调用时可以不传入参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name, age, *args, city=<span class="string">&quot;China&quot;</span>, job</span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;city:&quot;</span>, city, <span class="string">&quot;job:&quot;</span>, job)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&quot;Jack&quot;</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">78</span>, <span class="string">&quot;Hello&quot;</span>, job=<span class="string">&quot;Teacher&quot;</span>)</span><br><span class="line"><span class="comment"># Jack 23</span></span><br><span class="line"><span class="comment"># args: (11, 2, 78, &#x27;Hello&#x27;)</span></span><br><span class="line"><span class="comment"># city: China job: Teacher</span></span><br></pre></td></tr></table></figure>
<h4 id="传递可变与不可变类型参数"><a href="#传递可变与不可变类型参数" class="headerlink" title="传递可变与不可变类型参数"></a>传递可变与不可变类型参数</h4><ul>
<li>不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象</li>
<li>可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line">change(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2575945892080</span></span><br><span class="line"><span class="string">2575945892080</span></span><br><span class="line"><span class="string">2575945892368</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_2</span>(<span class="params">a_list</span>):</span><br><span class="line">    a_list.append([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数内部：&quot;</span>, a_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">change_2(list_1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数外部：&quot;</span>, list_1)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数内部： [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, [1, 2, 3, 4]]</span></span><br><span class="line"><span class="string">函数外部： [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, [1, 2, 3, 4]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="序列解包"><a href="#序列解包" class="headerlink" title="序列解包"></a>序列解包</h4><p>如果需要传入一个 List 或 Tuple，可以在参数前加 <code>*</code> 将所有元素作为可变参数传进去，如果是字典，可以用 <code>**</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">arg1, arg2, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg2:&quot;</span>, arg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;Test1&quot;</span>, <span class="string">&quot;Test2&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg1: Test1</span></span><br><span class="line"><span class="string">arg2: Test2</span></span><br><span class="line"><span class="string">args: ([1, 2, 3, 4],)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;Test3&quot;</span>, <span class="string">&quot;Test4&quot;</span>, *[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg1: Test3</span></span><br><span class="line"><span class="string">arg2: Test4</span></span><br><span class="line"><span class="string">args: (5, 6, 7, 8)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dict_1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Test&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg1, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, name=<span class="string">&quot;Test&quot;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg1: 1</span></span><br><span class="line"><span class="string">args: &#123;&#x27;name&#x27;: &#x27;Test&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, **dict_1)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">arg1: 1</span></span><br><span class="line"><span class="string">args: &#123;&#x27;name&#x27;: &#x27;Test&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>序列解包是位置实参的一部分，可以出现多次，也不限定具体位置，只要最终等效的实参满足匹配规则即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list_2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, c, /, m, n, *args, kw1, kw2</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(m, n)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kw1, kw2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(*list_1, <span class="number">10</span>, *list_2, kw1=<span class="number">11</span>, kw2=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 0 1 2</span></span><br><span class="line"><span class="comment"># 10 4</span></span><br><span class="line"><span class="comment"># (5, 6)</span></span><br><span class="line"><span class="comment"># 11 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dict_1 = &#123;<span class="string">&quot;kw1&quot;</span>: <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;kw2&quot;</span>: <span class="number">19</span>&#125;</span><br><span class="line">dict_2 = &#123;<span class="string">&quot;n&quot;</span>: <span class="number">3</span>, <span class="string">&quot;kw3&quot;</span>: <span class="number">5</span>, <span class="string">&quot;k&quot;</span>: <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">a, b, c, /, m, n, *, kw1, kw2, kw3, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    <span class="built_in">print</span>(m, n)</span><br><span class="line">    <span class="built_in">print</span>(kw1, kw2, kw3)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, **dict_1, **dict_2)</span><br><span class="line"><span class="comment"># 1 2 3</span></span><br><span class="line"><span class="comment"># 4 3</span></span><br><span class="line"><span class="comment"># Jack 19 5</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k&#x27;: 7&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的</p>
<ul>
<li>命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响</li>
<li>一般有三种命名空间<ul>
<li>内置名称（built-in names），Python 语言内置的名称，比如函数名 <code>abs</code>，<code>char</code> 等</li>
<li>全局名称（global names），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li>
<li>局部名称（local names），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）</li>
</ul>
</li>
<li>命名空间查找顺序：局部的命名空间 -&gt; 全局命名空间 -&gt; 内置命名空间</li>
<li>命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。因此，无法从外部命名空间访问内部命名空间的对象</li>
</ul>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>作用域就是一个 Python 程序可以直接访问命名空间的正文区域</p>
<ul>
<li>在一个 Python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误</li>
<li>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪赋值的</li>
<li>作用域一共有4种<ul>
<li>L (Local): 最内层，包含局部变量，比如一个函数、方法内部</li>
<li>E (Enclosing): 包含了非局部 (non-local) 也非全局 (non-global) 的变量。比如两个嵌套函数，一个函数 A 里面又包含了一个函数 B，那么对于 B 中的名称来说 A 中的作用域就为 non-local</li>
<li>G (Global): 当前脚本的最外层，比如当前模块的全局变量</li>
<li>B (Built-in): 包含了内建的变量、关键字等，最后被搜索</li>
</ul>
</li>
<li>Python 中只有模块（module），类（class）以及函数（def,lambda）才会引入新的作用域，其他的代码块（如 if/elif/else, try/except, for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问</li>
</ul>
<h4 id="global，nonlocal"><a href="#global，nonlocal" class="headerlink" title="global，nonlocal"></a>global，nonlocal</h4><ul>
<li>当内部作用域想修改外部作用域的变量时，可以用 <code>global</code> 关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次调用:&quot;</span>, a)</span><br><span class="line">    a = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次调用:&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第三次调用:&quot;</span>, a)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一次调用: 10</span></span><br><span class="line"><span class="string">第二次调用: 20</span></span><br><span class="line"><span class="string">第三次调用: 20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> num</span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第一次调用:&quot;</span>, num)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二次调用:&quot;</span>, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># 第一次调用: 100</span></span><br><span class="line"><span class="comment"># 第二次调用: 100</span></span><br></pre></td></tr></table></figure>
<h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><h4 id="脚本文档字符串"><a href="#脚本文档字符串" class="headerlink" title="脚本文档字符串"></a>脚本文档字符串</h4><p>放在脚本的开头（除字符编码外），以 <code>&quot;&quot;&quot;</code> 包含的字符串可以用作脚本的说明文档。可以用 <code>__doc__</code>的方式调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个脚本的说明文档</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(__doc__)  <span class="comment"># 这是一个脚本的说明文档</span></span><br></pre></td></tr></table></figure>
<h4 id="函数文档字符串"><a href="#函数文档字符串" class="headerlink" title="函数文档字符串"></a>函数文档字符串</h4><blockquote>
<p>以下是文档字符串内容和格式的约定。</p>
<p>第一行应为对象用途的简短摘要。为保持简洁，不要在这里显式说明对象名或类型，因为可通过其他方式获取这些信息（除非该名称碰巧是描述函数操作的动词）。这一行应以大写字母开头，以句点结尾。</p>
<p>文档字符串为多行时，第二行应为空白行，在视觉上将摘要与其余描述分开。后面的行可包含若干段落，描述对象的调用约定、副作用等。</p>
<p>Python 解析器不会删除 Python 中多行字符串字面值的缩进，因此，文档处理工具应在必要时删除缩进。这项操作遵循以下约定：文档字符串第一行 之后 的第一个非空行决定了整个文档字符串的缩进量（第一行通常与字符串开头的引号相邻，其缩进在字符串中并不明显，因此，不能用第一行的缩进），然后，删除字符串中所有行开头处与此缩进“等价”的空白符。不能有比此缩进更少的行，但如果出现了缩进更少的行，应删除这些行的所有前导空白符。转化制表符后（通常为 8 个空格），应测试空白符的等效性。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, c, /, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是这个函数的文档字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param a: 参数a</span></span><br><span class="line"><span class="string">    :param b: 参数b</span></span><br><span class="line"><span class="string">    :param c: 参数c</span></span><br><span class="line"><span class="string">    :param d: 参数c</span></span><br><span class="line"><span class="string">    :return: 返回四个数的和</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a + b + c + d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是这个函数的文档字符串</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#     :param a: 参数a</span></span><br><span class="line"><span class="comment">#     :param b: 参数b</span></span><br><span class="line"><span class="comment">#     :param c: 参数c</span></span><br><span class="line"><span class="comment">#     :param d: 参数c</span></span><br><span class="line"><span class="comment">#     :return: 返回四个数的和</span></span><br></pre></td></tr></table></figure>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数就是一个被作为参数传递的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">func_1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原函数&quot;</span>)</span><br><span class="line">    func_1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;回调函数&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(func_1)</span><br><span class="line"><span class="comment"># 原函数</span></span><br><span class="line"><span class="comment"># 回调函数</span></span><br></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>Python 使用 <code>lambda</code> 来创建匿名函数</p>
<ul>
<li><code>lambda</code> 的主体是一个表达式，而不是一个代码块。仅仅能在 <code>lambda</code> 表达式中封装有限的逻辑</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li>
</ul>
<p>语法格式</p>
<p><code>lambda [arg1 [,arg2,...argn]]:expression</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>))  <span class="comment"># 30</span></span><br></pre></td></tr></table></figure>
<p>可以将匿名函数封装在一个函数内，这样可以使用相同的代码来创建多个匿名函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> a: a * n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mydoubler = myfunc(<span class="number">2</span>)</span><br><span class="line">mytripler = myfunc(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mydoubler(<span class="number">11</span>))  <span class="comment"># 22</span></span><br><span class="line"><span class="built_in">print</span>(mytripler(<span class="number">11</span>))  <span class="comment"># 33</span></span><br></pre></td></tr></table></figure>
<h3 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h3><p>在一个外函数中定义了一个内函数，内函数中运用了外函数的临时变量，并且外函数的返回值是内函数的引用，这样就构成了一个闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># 外函数</span></span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># 内函数</span></span><br><span class="line">        <span class="built_in">print</span>(a + b)  <span class="comment"># 使用了外函数的临时变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = outer(<span class="number">5</span>)</span><br><span class="line">res()  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>
<p>如果想在内函数中修改闭包变量（外函数绑定给内函数的局部变量），可以使用两种方法</p>
<ul>
<li>使用 <code>nonlocal</code> 关键字声明</li>
<li>将闭包变量改变为可变类型数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># 外函数</span></span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line">    c = [a]  <span class="comment"># 将闭包变量变为可变类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># 内函数</span></span><br><span class="line">        <span class="keyword">nonlocal</span> b  <span class="comment"># 使用 nonlocal 关键字</span></span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line">        c[<span class="number">0</span>] += <span class="number">1</span>  <span class="comment"># 使用可变类型</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        <span class="built_in">print</span>(c[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = outer(<span class="number">5</span>)</span><br><span class="line">res()</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure>
<p>在使用闭包的过程中，闭包变量实际上只有一份，每次开启内函数都是在使用同一份闭包变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>():</span><br><span class="line">    money = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> money</span><br><span class="line">        money += <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> work</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = person()</span><br><span class="line">res()  <span class="comment"># 200</span></span><br><span class="line">res()  <span class="comment"># 300</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。迭代器有两个基本的方法 <code>iter()</code> 和 <code>next()</code>。迭代器对象可以使用 <code>next()</code> 函数依次输出，也可以使用 <code>for</code> 语句遍历输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">l_2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">it_2 = <span class="built_in">iter</span>(l_2)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it_2:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>
<p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 和 <code>__next__()</code>。<code>__iter__()</code> 方法返回一个特殊的迭代器对象，这个对象实现了 <code>__next__()</code> 方法并通过 <code>StopIteration</code> 异常标识迭代的完成，<code>__next__()</code> 会返回下一个迭代器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        x = self.a</span><br><span class="line">        self.a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_class = MyNumbers()</span><br><span class="line">my_iter = <span class="built_in">iter</span>(my_class)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iter))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iter))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iter))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iter))  <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iter))  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
<p><code>StopIteration</code> 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next()</strong>方法中我们可以设置在完成指定循环次数后触发 <code>StopIteration</code> 异常来结束迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.a &lt;= <span class="number">20</span>:</span><br><span class="line">            x = self.a</span><br><span class="line">            self.a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_class = MyNumbers()</span><br><span class="line">my_iter = <span class="built_in">iter</span>(my_class)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> my_iter:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</span></span><br></pre></td></tr></table></figure>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>使用了 <code>yield</code> 的函数被称为生成器。与普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作。在调用生成器运行的过程中，每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code> 的值，并在下一次执行 <code>next()</code> 方法时从当前位置继续执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试1&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试2&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接调用时返回一个迭代器对象，并不会执行</span></span><br><span class="line">res = test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># &lt;generator object test at 0x000002A2D82A6650&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次调用时执行，直到遇到 yield 会暂停执行并保存当前所有运行信息，并返回 yield 的值</span></span><br><span class="line">res_2 = <span class="built_in">next</span>(res)</span><br><span class="line"><span class="comment"># 测试1</span></span><br><span class="line"><span class="built_in">print</span>(res_2)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">res_3 = <span class="built_in">next</span>(res)</span><br><span class="line"><span class="comment"># 测试2</span></span><br><span class="line"><span class="built_in">print</span>(res_3)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>
<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h4><p><code>range()</code> 函数返回的是一个可迭代对象，而不是列表类型，所以打印的时候不会打印列表</p>
<p>语法格式</p>
<p><code>range(stop)</code> or <code>range(start, stop[, step])</code></p>
<ul>
<li>start：计数从 start 开始。默认是从0 开始</li>
<li>stop：计数到 stop 结束，但不包括 stop</li>
<li>step：步长，默认为1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># range(0, 5)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>)))  <span class="comment"># [0, 5, 10, 15, 20, 25]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)))  <span class="comment"># [0, 2, 4, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, -<span class="number">10</span>, -<span class="number">1</span>)))  <span class="comment"># [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span></span><br></pre></td></tr></table></figure>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h4><p><code>zip()</code> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样可以节省内存。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表</p>
<p>语法格式</p>
<p><code>zip([iterable,...])</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, b)</span><br><span class="line"><span class="built_in">print</span>(zipped)  <span class="comment"># &lt;zip object at 0x000001C2D1F8F8C0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))  <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(a, c)))  <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br><span class="line"></span><br><span class="line">a1, a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a1))  <span class="comment"># [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a2))  <span class="comment"># [4, 5, 6]</span></span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">zip</span>(a, b))  <span class="comment"># (1, 4) (2, 5) (3, 6)</span></span><br></pre></td></tr></table></figure>
<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p><code>sorted()</code> 函数对所有可迭代的对象进行排序操作</p>
<blockquote>
<p>sort 与 sorted 区别：<br>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。<br>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作</p>
</blockquote>
<p>语法格式</p>
<p><code>sorted(iterable, key=None, reverse=False)</code></p>
<ul>
<li>iterable：可迭代对象</li>
<li>key：主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序</li>
<li>reverse：排序规则，<code>reverse = True</code> 降序，<code>reverse = False</code> 升序（默认）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l_1 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">231</span>, <span class="number">453</span>, <span class="number">643</span>, <span class="number">90</span>, -<span class="number">1</span>, <span class="number">98</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 list 排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l_1))  <span class="comment"># [-1, 1, 3, 5, 6, 7, 90, 98, 231, 453, 643]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序后不改变原 list</span></span><br><span class="line"><span class="built_in">print</span>(l_1)  <span class="comment"># [5, 6, 3, 7, 1, 231, 453, 643, 90, -1, 98]</span></span><br><span class="line"></span><br><span class="line">dict_1 = &#123;<span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照字典的 key 排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(dict_1))  <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(dict_1.keys()))  <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照字典的 value 值排序，本质上是将 dict 转换为可迭代对象，其元素为 (1,&#x27;a&#x27;), (2,&#x27;b&#x27;) 等</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(dict_1.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># [(1, &#x27;A&#x27;), (2, &#x27;B&#x27;), (3, &#x27;C&#x27;), (5, &#x27;D&#x27;), (4, &#x27;E&#x27;)]</span></span><br></pre></td></tr></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p><code>map()</code> 函数对传入的可迭代数据中的每个元素进行处理，返回一个新的迭代器</p>
<p>语法格式</p>
<p><code>map(function, iterable, ...)</code></p>
<ul>
<li>function：函数</li>
<li>iterable：一个或多个序列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 map 返回的是一个迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="comment"># &lt;map object at 0x000001E6D3253250&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有多个迭代器，迭代器数量将为 min(len(iterator1), len(iterator2), ...)</span></span><br><span class="line">map_object = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x &gt; y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(map_object))</span><br><span class="line"><span class="comment"># [True, False, True]</span></span><br></pre></td></tr></table></figure>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p><code>reduce()</code> 函数会对参数序列中元素进行累积。函数将一个数据集合中的所有数据进行下列操作：用传给 reduce 中的函数 function （两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果</p>
<blockquote>
<p>Python3 中 reduce() 函数已经被转移到 functools 模块里，如果需要使用，需要引入 functools 模块<br><code>from functools import reduce</code></p>
</blockquote>
<p>语法格式</p>
<p><code>reduce(function, iterable[, initializer])</code></p>
<ul>
<li>function：函数，有两个参数</li>
<li>iterable：可迭代对象</li>
<li>initializer：可选，初始参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum1 = reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">sum2 = reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum1)  <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(sum2)  <span class="comment"># 15</span></span><br></pre></td></tr></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p><code>filter()</code> 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以用 <code>list()</code> 来转换。该函数接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中</p>
<p>语法格式</p>
<p><code>filter(function, iterable)</code></p>
<ul>
<li>function：判断函数</li>
<li>iterable：可迭代对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tmp_list = <span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">new_list = <span class="built_in">list</span>(tmp_list)</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>
<h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><p><code>eval()</code> 函数用来执行一个字符串表达式，并返回表达式的值</p>
<p>语法格式</p>
<p><code>eval(expression[, globals[, locals]])</code></p>
<ul>
<li>expression：表达式</li>
<li>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象</li>
<li>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;a+8&#x27;</span>))</span><br><span class="line"><span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;pow(a,3)&#x27;</span>))</span><br><span class="line"><span class="comment"># 1000</span></span><br></pre></td></tr></table></figure>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p><code>exec()</code> 执行存储在字符串或文件中的 Python 语句，相比于 eval，exec 可以执行更复杂的 Python 代码。其返回值永远是 None</p>
<p>语法格式</p>
<p><code>exec(object[, globals[, locals]])</code></p>
<ul>
<li>object：必选参数，表示需要被指定的 Python 代码。它必须是字符串或 code 对象。如果 object 是一个字符串，该字符串会先被解析为一组 Python 语句，然后再执行（除非发生语法错误）。如果 object 是一个 code 对象，那么它只是被简单的执行</li>
<li>globals：可选参数，表示全局命名空间（存放全局变量），如果被提供，则必须是一个字典对象</li>
<li>locals：可选参数，表示当前局部命名空间（存放局部变量），如果被提供，可以是任何映射对象。如果该参数被忽略，那么它将会取与 globals 相同的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;Hello World&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment"># Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;&quot;&quot;for i in range(5):</span></span><br><span class="line"><span class="string">    print(i,end=&#x27; &#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 0 1 2 3 4 </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3 学习笔记-3</title>
    <url>/2022/03/16/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</url>
    <content><![CDATA[<h2 id="内置类型补充说明"><a href="#内置类型补充说明" class="headerlink" title="内置类型补充说明"></a>内置类型补充说明</h2><p>主要的内置类型有数字、序列、映射、类、实例和异常  </p>
<p>有些多项集类是可变的。 它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回 None  </p>
<span id="more"></span>
<h3 id="逻辑值检测"><a href="#逻辑值检测" class="headerlink" title="逻辑值检测"></a>逻辑值检测</h3><p>任何对象都可以进行逻辑值的检测，以便在 <code>if</code> 或 <code>while</code> 作为条件或是作为下文所述布尔运算的操作数来使用。以下是常见的被认为是假的值</p>
<ul>
<li>被定义为假值的常量：<code>None</code> 和 <code>False</code></li>
<li>任何数值类型的零：<code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0,1)</code></li>
<li>空的序列和多项集：<code>&#39;&#39;</code>, <code>()</code>, <code>[]</code>, <code>set()</code>, <code>range(0)</code></li>
</ul>
<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul>
<li>有三种不同的数字类型：<strong>整数</strong>，<strong>浮点数</strong> 和 <strong>复数</strong>，布尔值属于整数的子类型</li>
<li>整数除法 <code>//</code> 的结果值是一个整数，但结果的类型不一定是 int。运算结果总是向负无穷的方向舍入：<code>1//2</code> 为 <code>0</code>，<code>(-1)//2</code> 为 <code>-1</code>，而 <code>(-1)//(-2)</code> 为 <code>0</code></li>
<li>Python 将 <code>pow(0,0)</code> 和 <code>0**0</code> 定义为 <code>1</code>，这是编程语言的普遍做法</li>
</ul>
<h3 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h3><p>序列类型包括：list, tuple, range</p>
<blockquote>
<p>通用序列操作</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x in s</td>
<td style="text-align:center">如果 s 中的某项等于 x 则结果为 True，否则为 False</td>
</tr>
<tr>
<td style="text-align:center">x not in s</td>
<td style="text-align:center">如果 s 中的某项等于 x 则结果为 False，否则为 True</td>
</tr>
<tr>
<td style="text-align:center">s + t</td>
<td style="text-align:center">s 与 t 相拼接</td>
</tr>
<tr>
<td style="text-align:center">s * n 或 n * s</td>
<td style="text-align:center">相当于 s 与自身进行 n 次拼接</td>
</tr>
<tr>
<td style="text-align:center">s[i]</td>
<td style="text-align:center">s 的第 i 项，起始为 0</td>
</tr>
<tr>
<td style="text-align:center">s[i:j]</td>
<td style="text-align:center">s 从 i 到 j 的切片</td>
</tr>
<tr>
<td style="text-align:center">s[i:j:k]</td>
<td style="text-align:center">s 从 i 到 j 步长为 k 的切片</td>
</tr>
<tr>
<td style="text-align:center">len(s)</td>
<td style="text-align:center">s 的长度</td>
</tr>
<tr>
<td style="text-align:center">min(s)</td>
<td style="text-align:center">s 的最小项</td>
</tr>
<tr>
<td style="text-align:center">max(s)</td>
<td style="text-align:center">s 的最大项</td>
</tr>
<tr>
<td style="text-align:center">s.index(x[,i[,j]])</td>
<td style="text-align:center">x 在 s 中首次出现项的索引号（索引号在 i 或其后且在 j 之前）</td>
</tr>
<tr>
<td style="text-align:center">s.count(x)</td>
<td style="text-align:center">x 在 s 中出现的总次数</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>在使用 <code>s*n</code> 的方式创建序列时，s 中的项并不会被拷贝，它们会被多次引用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[]] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line"><span class="comment"># [[], [], []]</span></span><br><span class="line"></span><br><span class="line">list_1[<span class="number">0</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line"><span class="comment"># [[3], [3], [3]]</span></span><br></pre></td></tr></table></figure>
<p>具体的原因在于 <code>[[]]</code> 是一个包含了空列表的单元素列表，所以 <code>[[]]*3</code> 结果中的三个元素都是对这一个空列表的引用。修改 <code>list_1</code> 中的任何一个元素实际上都是对这一个空列表的修改。可以用其他方法创建以不同列表为元素的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">list_1[<span class="number">0</span>].append(<span class="number">3</span>)</span><br><span class="line">list_1[<span class="number">1</span>].append(<span class="number">5</span>)</span><br><span class="line">list_1[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line"><span class="comment"># [[3], [5], [7]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>s+t</code> 方式拼接不可变序列时总是会生成新的对象。这意味着通过重复拼接来构建序列的运行时开销将会基于序列总长度的乘方。想要获得线性的运行时开销，可以用以下替代方案：<ul>
<li>如果拼接 str 对象，可以构建一个列表并在最后使用 <code>str.join()</code> 或是写入一个 <code>io.StringIO</code> 实例并在结束时获取它的值</li>
<li>如果拼接 bytes 对象，可以类似地使用 <code>bytes.join()</code> 或 <code>io.BytesIO</code>，或者也可以使用 <code>bytearray</code> 对象进行原地拼接。<code>bytearray</code> 对象是可变的，并且具有高效的重分配机制</li>
<li>如果拼接 tuple 对象，将其扩展为 list 类</li>
<li>对于其他类型，查看相应的文档</li>
</ul>
</li>
</ul>
<blockquote>
<p>可变序列常用操作</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">s[i] = x</td>
<td style="text-align:center">将 s 的第 i 项替换为 x</td>
</tr>
<tr>
<td style="text-align:center">s[i:j] = t</td>
<td style="text-align:center">将 s 从 i 到 j 的切片替换为可迭代对象 t 的内容</td>
</tr>
<tr>
<td style="text-align:center">del s[i:j]</td>
<td style="text-align:center">等同于 s[i:j] = []</td>
</tr>
<tr>
<td style="text-align:center">s[i:j:k] = t</td>
<td style="text-align:center">将 s[i:j:k] 的元素替换为 t 的元素</td>
</tr>
<tr>
<td style="text-align:center">del s[i:j:k]</td>
<td style="text-align:center">从列表中移除 s[i:j:k] 的元素</td>
</tr>
<tr>
<td style="text-align:center">s.append(x)</td>
<td style="text-align:center">将 x 添加到序列的末尾（等同于 s[len(s):len(s)] = [x]）</td>
</tr>
<tr>
<td style="text-align:center">s.clear()</td>
<td style="text-align:center">从 s 中移除所有项（等同于 del s[:]）</td>
</tr>
<tr>
<td style="text-align:center">s.copy()</td>
<td style="text-align:center">创建 s 的浅拷贝（等同于 s[:]）</td>
</tr>
<tr>
<td style="text-align:center">s.extend(t) 或 s += t</td>
<td style="text-align:center">用 t 的内容扩展 s（基本上等同于 s[len(s):len(s)] = t）</td>
</tr>
<tr>
<td style="text-align:center">s *= n</td>
<td style="text-align:center">使用 s 的内容重复 n 次来对其进行更新</td>
</tr>
<tr>
<td style="text-align:center">s.insert(i,x)</td>
<td style="text-align:center">在由 i 给出的索引位置将 x 插入 s（等同于 s[i:i] = [x]）</td>
</tr>
<tr>
<td style="text-align:center">s.pop() 或 s.pop(i)</td>
<td style="text-align:center">提取在 i 位置上的项，并将其从 s 中移除</td>
</tr>
<tr>
<td style="text-align:center">s.remove(x)</td>
<td style="text-align:center">删除 s 中第一个 s[i] 等于 x 的项目</td>
</tr>
<tr>
<td style="text-align:center">s.reverse()</td>
<td style="text-align:center">就地将列表中的元素逆序</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><code>s[i:j:k] = t</code> 中，t 必须与它所替换的切片具有相同的长度</li>
<li><code>s.pop(i)</code> 中，可选参数 i 默认为 -1，因此在默认情况下会移除并返回最后一项</li>
</ul>
<h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><p>Python <code>open()</code> 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程中都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError。使用 <code>open()</code> 方法一定要保证关闭文件对象，即调用 <code>close()</code> 方法</p>
<p>语法格式</p>
<p><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p>
<ul>
<li>file：必需，文件路径</li>
<li>mode：可选，文件打开模式</li>
<li>buffering：设置缓冲</li>
<li>encoding：一般使用 utf-8</li>
<li>errors：报错级别</li>
<li>newline：区分换行符</li>
<li>closefd：传入的 file 参数类型</li>
<li>opener：设置自定义开启器，开启器的返回值必须是一个打开的文件描述符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>
<h3 id="mode-参数详解"><a href="#mode-参数详解" class="headerlink" title="mode 参数详解"></a>mode 参数详解</h3><blockquote>
<p><code>open()</code> 方法的第一个实参是文件名字符串，第二个实参是包含描述文件使用方式的字符串。mode 的值包括 <code>&#39;r&#39;</code>，表示文件只能读取；<code>&#39;w&#39;</code> 表示只能写入（现有的同名文件会被覆盖）；<code>&#39;a&#39;</code> 表示打开文件并追加内容，任何写入的数据会自动添加到文件末尾。<code>&#39;r+&#39;</code> 表示打开文件进行读写。mode 实参是可选的，省略时默认值为 <code>&#39;r&#39;</code><br>通常，文件以 text mode 打开，即，从文件中读取或写入字符串时，都以指定编码方式进行编码。如未指定编码格式，默认值与平台相关。在 mode 中追加的 <code>&#39;b&#39;</code> 则以 binary mode 打开文件：此时，数据以字节对象的形式进行读写。该模式用于所有不包含文本的文件<br>在文本模式下读取文件时，默认把平台特定的行结束符（Unix 上为 <code>\n</code>, Windows 上为 <code>\r\n</code>）转换为 <code>\n</code>。在文本模式下写入数据时，默认把 <code>\n</code> 转换回平台特定结束符。这种操作方式在后台修改文件数据对文本文件来说没有问题，但会破坏 <code>JPEG</code> 或 <code>EXE</code> 等二进制文件中的数据。所以在读写此类文件时，一定要使用二进制模式</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">t</td>
<td style="text-align:center">文本读取模式（默认）。与之对应的是 ‘b’</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">二进制读取模式</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">写模式，新建一个文件，如果该文件已存在则会报错</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">打开一个文件进行更新（支持读写）</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式</td>
</tr>
<tr>
<td style="text-align:center">rb</td>
<td style="text-align:center">以二进制格式打开一个文件用于只读</td>
</tr>
<tr>
<td style="text-align:center">r+</td>
<td style="text-align:center">打开一个文件用于读写</td>
</tr>
<tr>
<td style="text-align:center">rb+</td>
<td style="text-align:center">以二进制格式打开一个文件用于读写</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件</td>
</tr>
<tr>
<td style="text-align:center">wb</td>
<td style="text-align:center">以二进制格式打开一个文件只用于写入</td>
</tr>
<tr>
<td style="text-align:center">w+</td>
<td style="text-align:center">打开一个文件用于读写</td>
</tr>
<tr>
<td style="text-align:center">wb+</td>
<td style="text-align:center">以二进制格式打开一个文件用于读写</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td>
</tr>
<tr>
<td style="text-align:center">ab</td>
<td style="text-align:center">以二进制格式打开一个文件用于追加</td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:center">打开一个文件用于追加</td>
</tr>
<tr>
<td style="text-align:center">ab+</td>
<td style="text-align:center">以二进制格式打开一个文件用于追加</td>
</tr>
</tbody>
</table>
</div>
<h3 id="with-关键字"><a href="#with-关键字" class="headerlink" title="with 关键字"></a>with 关键字</h3><p>在处理文件对象时，最好使用 <code>with</code> 关键字。优点是，子句体结束后，文件会正确关闭，即便触发异常也可以。而且，使用 <code>with</code> 相比等效的 <code>try-finally</code> 代码块要简短得多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment"># Hello World</span></span><br></pre></td></tr></table></figure>
<h3 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h3><p>假定已经创建一个 <code>f</code> 文件对象</p>
<h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p><code>f.read(size)</code> 可用于读取文件内容，它会读取一些数据，并返回字符串（文本模式），或字节串对象（二进制模式）。 size 是可选的数值参数。省略 size 或 size 为负数时，读取并返回整个文件的内容；文件大小是内存的两倍时，会出现问题（内存溢出）。size 取其他值时，读取并返回最多 size 个字符（文本模式）或 size 个字节（二进制模式）。如已到达文件末尾，<code>f.read()</code> 返回空字符串 <code>&#39;&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment"># 123</span></span><br><span class="line"><span class="comment"># 456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 123</span></span><br></pre></td></tr></table></figure>
<h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p><code>f.readline()</code> 从文件中读取单行数据；字符串末尾保留换行符 <code>\n</code>。只有在文件不以换行符结尾时，文件的最后一行才会省略换行符。只要 <code>f.readline()</code> 返回空字符串，就表示已经到达了文件末尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">repr</span>(line))</span><br><span class="line"><span class="comment"># &#x27;123\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">repr</span>(line))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># &#x27;123\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;456\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;789\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;Hello\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;World\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;I love you&#x27;</span></span><br></pre></td></tr></table></figure>
<p>从文件中读取多行时，可以用循环遍历整个文件对象。这种操作能高效利用内存，快速，且代码简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">repr</span>(line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;123\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;456\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;789\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;Hello\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;World\n&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;I love you&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><p><code>readlines()</code> 方法用于读取所有行（直到结束符 EOF）并返回列表，该列表可以由 Python 的 for…in… 结构进行处理。如果碰到结束符 EOF 则返回空字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="built_in">print</span>(file.readlines())</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;第一行：123\n&#x27;, &#x27;第二行：456\n&#x27;, &#x27;第三行：789\n&#x27;, &#x27;第四行：abc&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><p><code>f.write(string)</code> 把 string 的内容写入文件，并返回写入的字符数。在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时在文件中是看不到写入的内容的。该方法返回的是写入的字符长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>写入其他类型的对象前，要先把它们转化为字符串（文本模式）或字节对象（二进制模式）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(<span class="number">42</span>))</span><br></pre></td></tr></table></figure>
<h3 id="tell"><a href="#tell" class="headerlink" title="tell()"></a>tell()</h3><p><code>tell()</code> 方法返回文件的当前位置，即文件指针当前位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test2.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    pos = f.tell()</span><br><span class="line">    <span class="built_in">print</span>(pos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hello World42</span></span><br><span class="line"><span class="comment"># 13</span></span><br></pre></td></tr></table></figure>
<h3 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h3><p><code>seek()</code> 方法用于移动文件读取指针到指定位置，如果操作成功，返回新的文件位置，如果操作失败，则函数返回 -1</p>
<p>语法格式</p>
<p><code>seek(offset, whence)</code></p>
<ul>
<li>offset: 开始的偏移量，也就是代表需要移动偏移的字节数，如果是负数表示从倒数第几位开始</li>
<li>whence: 可选，默认值为0。给 offset 定义一个参数，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2代表从文件末尾算起</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;123456789abcdef&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.readline())</span><br><span class="line">    <span class="comment"># 打印值为空</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将指针移动回文件开始</span></span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.readline())</span><br><span class="line">    <span class="comment"># 123456789abcdef</span></span><br></pre></td></tr></table></figure>
<h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p><code>close()</code> 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，否则会触发 ValueError 错误，<code>close()</code> 方法允许调用多次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file.readline())</span><br><span class="line"><span class="comment"># 123456789abcdef</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>
<h3 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h3><p><code>flush()</code> 方法时用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要被动的等待输出缓冲区写入。一般情况下，文件关闭后会自动刷新缓冲区</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;Test&quot;</span>)</span><br><span class="line">    file.flush()</span><br></pre></td></tr></table></figure>
<h3 id="fileno"><a href="#fileno" class="headerlink" title="fileno()"></a>fileno()</h3><p><code>fileno()</code> 方法返回一个整型的文件描述符，可用于底层操作系统的 IO 操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    fid = file.fileno()</span><br><span class="line">    <span class="built_in">print</span>(fid)</span><br><span class="line">    <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
<h3 id="isatty"><a href="#isatty" class="headerlink" title="isatty()"></a>isatty()</h3><p><code>isatty()</code> 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ret = file.isatty()</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate()"></a>truncate()</h3><p><code>truncate(size)</code> 方法用于从文件的首行首字节开始截断，截断文件为 size 个字节，无 size 表示从当前位置截断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取10个字节</span></span><br><span class="line">fo.truncate(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = fo.read()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取数据: %s&quot;</span> % (<span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h3><p><code>writelines()</code> 方法用于向文件中写入一序列的字符串，这一序列字符串可以是由迭代对象产生的，如一个字符串列表，换行需要制定换行符 <code>\n</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    seq = [<span class="string">&quot;第一行\n&quot;</span>, <span class="string">&quot;第二行&quot;</span>]</span><br><span class="line">    file.writelines(seq)</span><br></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Python 把各种定义存入一个文件，在脚本或解释器的交互式实例中使用，这个文件就是模块。模块中的定义可以导入到其他模块或主模块（在顶层和计算器模式下，执行脚本中可访问的变量集）  </p>
<p>模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 <code>.py</code>。在模块内部，通过全局变量 <code>__name__</code> 可以获取模块名（即字符串）  </p>
<p>定义一个 fibo.py 模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个 fibo 模块计算斐波那契数列</span></span><br><span class="line"><span class="comment"># 文件名: fibo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        <span class="built_in">print</span>(a, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib2</span>(<span class="params">n</span>):</span><br><span class="line">    result = []</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        result.append(a)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>在另一个文件中调用 fibo 模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fibo</span><br><span class="line"></span><br><span class="line">fibo.fib(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span><br><span class="line"></span><br><span class="line">res = fibo.fib2(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibo.__name__)</span><br><span class="line"><span class="comment"># fibo</span></span><br></pre></td></tr></table></figure>
<h3 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h3><p>模块包含可执行语句及函数定义。这些语句用于初始化模块，且仅在 import 语句 第一次 遇到模块名时执行  </p>
<p>模块有自己的私有符号表，用作模块中所有函数的全局符号表。因此，在模块内使用全局变量时，不用担心与用户定义的全局变量发生冲突。另一方面，可以用与访问模块函数一样的标记法，访问模块的全局变量，<code>modname.itemname</code>  </p>
<p>可以把其他模块导入模块。按惯例，所有 import 语句都放在模块（或脚本）开头，但这不是必须的。导入的模块名存在导入模块的全局符号表里  </p>
<p><code>import</code> 有一个变体 <code>form ... import ...</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br><span class="line"></span><br><span class="line">fib(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span><br></pre></td></tr></table></figure>
<p>可以使用 <code>form ... import *</code> 的方式导入模块内定义的所有名称。这种方式会导入所有不以下划线 <code>_</code> 开头的名称。大多数情况下，不要使用这个功能，这种方式向解释器导入了一批未知的名称，可能会覆盖已定义的名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">fib(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span><br></pre></td></tr></table></figure>
<p>模块名后使用 <code>as</code> 时，直接把 <code>as</code> 后的名称与导入模块绑定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fibo <span class="keyword">import</span> fib <span class="keyword">as</span> fibonacci</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span><br></pre></td></tr></table></figure>
<h3 id="以脚本方式执行模块"><a href="#以脚本方式执行模块" class="headerlink" title="以脚本方式执行模块"></a>以脚本方式执行模块</h3><p>可以用以下方式运行 Python 模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python fibo.py &lt;arguments&gt;</span><br></pre></td></tr></table></figure>
<p>这项操作将执行模块里的代码，和导入模块一样，但会把 <code>__name__</code> 赋值为 <code>__main__</code>。也就是将下列代码添加到模块末尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    fib(<span class="built_in">int</span>(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a>dir()</h3><p>内置函数 <code>dir()</code> 用于查找模块定义的名称。返回结果是经过排序的字符串列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fibo, sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(fibo))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;fib&#x27;, &#x27;fib2&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(sys))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;__breakpointhook__&#x27;, &#x27;__displayhook__&#x27;, &#x27;__doc__&#x27;, &#x27;__excepthook__&#x27;, &#x27;__interactivehook__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;__stderr__&#x27;, &#x27;__stdin__&#x27;, &#x27;__stdout__&#x27;, &#x27;__unraisablehook__&#x27;, &#x27;_base_executable&#x27;, &#x27;_clear_type_cache&#x27;, &#x27;_current_exceptions&#x27;, &#x27;_current_frames&#x27;, &#x27;_deactivate_opcache&#x27;, &#x27;_debugmallocstats&#x27;, &#x27;_enablelegacywindowsfsencoding&#x27;, &#x27;_framework&#x27;, &#x27;_getframe&#x27;, &#x27;_git&#x27;, &#x27;_home&#x27;, &#x27;_xoptions&#x27;, &#x27;addaudithook&#x27;, &#x27;api_version&#x27;, &#x27;argv&#x27;, &#x27;audit&#x27;, &#x27;base_exec_prefix&#x27;, &#x27;base_prefix&#x27;, &#x27;breakpointhook&#x27;, &#x27;builtin_module_names&#x27;, &#x27;byteorder&#x27;, &#x27;call_tracing&#x27;, &#x27;copyright&#x27;, &#x27;displayhook&#x27;, &#x27;dllhandle&#x27;, &#x27;dont_write_bytecode&#x27;, &#x27;exc_info&#x27;, &#x27;excepthook&#x27;, &#x27;exec_prefix&#x27;, &#x27;executable&#x27;, &#x27;exit&#x27;, &#x27;flags&#x27;, &#x27;float_info&#x27;, &#x27;float_repr_style&#x27;, &#x27;get_asyncgen_hooks&#x27;, &#x27;get_coroutine_origin_tracking_depth&#x27;, &#x27;getallocatedblocks&#x27;, &#x27;getdefaultencoding&#x27;, &#x27;getfilesystemencodeerrors&#x27;, &#x27;getfilesystemencoding&#x27;, &#x27;getprofile&#x27;, &#x27;getrecursionlimit&#x27;, &#x27;getrefcount&#x27;, &#x27;getsizeof&#x27;, &#x27;getswitchinterval&#x27;, &#x27;gettrace&#x27;, &#x27;getwindowsversion&#x27;, &#x27;hash_info&#x27;, &#x27;hexversion&#x27;, &#x27;implementation&#x27;, &#x27;int_info&#x27;, &#x27;intern&#x27;, &#x27;is_finalizing&#x27;, &#x27;maxsize&#x27;, &#x27;maxunicode&#x27;, &#x27;meta_path&#x27;, &#x27;modules&#x27;, &#x27;orig_argv&#x27;, &#x27;path&#x27;, &#x27;path_hooks&#x27;, &#x27;path_importer_cache&#x27;, &#x27;platform&#x27;, &#x27;platlibdir&#x27;, &#x27;prefix&#x27;, &#x27;pycache_prefix&#x27;, &#x27;set_asyncgen_hooks&#x27;, &#x27;set_coroutine_origin_tracking_depth&#x27;, &#x27;setprofile&#x27;, &#x27;setrecursionlimit&#x27;, &#x27;setswitchinterval&#x27;, &#x27;settrace&#x27;, &#x27;stderr&#x27;, &#x27;stdin&#x27;, &#x27;stdlib_module_names&#x27;, &#x27;stdout&#x27;, &#x27;thread_info&#x27;, &#x27;unraisablehook&#x27;, &#x27;version&#x27;, &#x27;version_info&#x27;, &#x27;warnoptions&#x27;, &#x27;winver&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>没有参数时，<code>dir()</code> 列出当前定义的名称。该函数列出所有类型的名称：变量、模块、函数等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = [<span class="number">123</span>, <span class="number">345</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>dir()</code> 不会列出内置函数和变量的名称。这些内容定义在标准模块 builtins 里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(builtins))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;ArithmeticError&#x27;, &#x27;AssertionError&#x27;, &#x27;AttributeError&#x27;, &#x27;BaseException&#x27;, &#x27;BlockingIOError&#x27;, &#x27;BrokenPipeError&#x27;, &#x27;BufferError&#x27;, &#x27;BytesWarning&#x27;, &#x27;ChildProcessError&#x27;, &#x27;ConnectionAbortedError&#x27;, &#x27;ConnectionError&#x27;, &#x27;ConnectionRefusedError&#x27;, &#x27;ConnectionResetError&#x27;, &#x27;DeprecationWarning&#x27;, &#x27;EOFError&#x27;, &#x27;Ellipsis&#x27;, &#x27;EncodingWarning&#x27;, &#x27;EnvironmentError&#x27;, &#x27;Exception&#x27;, &#x27;False&#x27;, &#x27;FileExistsError&#x27;, &#x27;FileNotFoundError&#x27;, &#x27;FloatingPointError&#x27;, &#x27;FutureWarning&#x27;, &#x27;GeneratorExit&#x27;, &#x27;IOError&#x27;, &#x27;ImportError&#x27;, &#x27;ImportWarning&#x27;, &#x27;IndentationError&#x27;, &#x27;IndexError&#x27;, &#x27;InterruptedError&#x27;, &#x27;IsADirectoryError&#x27;, &#x27;KeyError&#x27;, &#x27;KeyboardInterrupt&#x27;, &#x27;LookupError&#x27;, &#x27;MemoryError&#x27;, &#x27;ModuleNotFoundError&#x27;, &#x27;NameError&#x27;, &#x27;None&#x27;, &#x27;NotADirectoryError&#x27;, &#x27;NotImplemented&#x27;, &#x27;NotImplementedError&#x27;, &#x27;OSError&#x27;, &#x27;OverflowError&#x27;, &#x27;PendingDeprecationWarning&#x27;, &#x27;PermissionError&#x27;, &#x27;ProcessLookupError&#x27;, &#x27;RecursionError&#x27;, &#x27;ReferenceError&#x27;, &#x27;ResourceWarning&#x27;, &#x27;RuntimeError&#x27;, &#x27;RuntimeWarning&#x27;, &#x27;StopAsyncIteration&#x27;, &#x27;StopIteration&#x27;, &#x27;SyntaxError&#x27;, &#x27;SyntaxWarning&#x27;, &#x27;SystemError&#x27;, &#x27;SystemExit&#x27;, &#x27;TabError&#x27;, &#x27;TimeoutError&#x27;, &#x27;True&#x27;, &#x27;TypeError&#x27;, &#x27;UnboundLocalError&#x27;, &#x27;UnicodeDecodeError&#x27;, &#x27;UnicodeEncodeError&#x27;, &#x27;UnicodeError&#x27;, &#x27;UnicodeTranslateError&#x27;, &#x27;UnicodeWarning&#x27;, &#x27;UserWarning&#x27;, &#x27;ValueError&#x27;, &#x27;Warning&#x27;, &#x27;WindowsError&#x27;, &#x27;ZeroDivisionError&#x27;, &#x27;__build_class__&#x27;, &#x27;__debug__&#x27;, &#x27;__doc__&#x27;, &#x27;__import__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;abs&#x27;, &#x27;aiter&#x27;, &#x27;all&#x27;, &#x27;anext&#x27;, &#x27;any&#x27;, &#x27;ascii&#x27;, &#x27;bin&#x27;, &#x27;bool&#x27;, &#x27;breakpoint&#x27;, &#x27;bytearray&#x27;, &#x27;bytes&#x27;, &#x27;callable&#x27;, &#x27;chr&#x27;, &#x27;classmethod&#x27;, &#x27;compile&#x27;, &#x27;complex&#x27;, &#x27;copyright&#x27;, &#x27;credits&#x27;, &#x27;delattr&#x27;, &#x27;dict&#x27;, &#x27;dir&#x27;, &#x27;divmod&#x27;, &#x27;enumerate&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;exit&#x27;, &#x27;filter&#x27;, &#x27;float&#x27;, &#x27;format&#x27;, &#x27;frozenset&#x27;, &#x27;getattr&#x27;, &#x27;globals&#x27;, &#x27;hasattr&#x27;, &#x27;hash&#x27;, &#x27;help&#x27;, &#x27;hex&#x27;, &#x27;id&#x27;, &#x27;input&#x27;, &#x27;int&#x27;, &#x27;isinstance&#x27;, &#x27;issubclass&#x27;, &#x27;iter&#x27;, &#x27;len&#x27;, &#x27;license&#x27;, &#x27;list&#x27;, &#x27;locals&#x27;, &#x27;map&#x27;, &#x27;max&#x27;, &#x27;memoryview&#x27;, &#x27;min&#x27;, &#x27;next&#x27;, &#x27;object&#x27;, &#x27;oct&#x27;, &#x27;open&#x27;, &#x27;ord&#x27;, &#x27;pow&#x27;, &#x27;print&#x27;, &#x27;property&#x27;, &#x27;quit&#x27;, &#x27;range&#x27;, &#x27;repr&#x27;, &#x27;reversed&#x27;, &#x27;round&#x27;, &#x27;set&#x27;, &#x27;setattr&#x27;, &#x27;slice&#x27;, &#x27;sorted&#x27;, &#x27;staticmethod&#x27;, &#x27;str&#x27;, &#x27;sum&#x27;, &#x27;super&#x27;, &#x27;tuple&#x27;, &#x27;type&#x27;, &#x27;vars&#x27;, &#x27;zip&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种用“点式模块名”构造 Python 模块命名空间的方法。例如，模块名 <code>A.B</code> 表示包 <code>A</code> 中名为 <code>B</code> 的子模块。正如模块可以区分不同模块之间的全局变量名称一样，点式模块名可以区分 <code>NumPy</code> 或 <code>Pillow</code> 等不同多模块包之间的模块名称</p>
<blockquote>
<p>假设要为统一处理声音文件与声音数据设计一个模块集（“包”）。声音文件的格式很多（通常以扩展名来识别，例如：.wav， .aiff， .au），因此，为了不同文件格式之间的转换，需要创建和维护一个不断增长的模块集合。为了实现对声音数据的不同处理（例如，混声、添加回声、均衡器功能、创造人工立体声效果），还要编写无穷无尽的模块流。下面这个分级文件树展示了这个包的架构</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage for file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage for sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage for filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure>
<p>导入包时，Python 搜索 <code>sys.path</code> 里的目录，查找包的子目录  </p>
<p>Python 只把含 <code>__init__.py</code>  文件的目录当成包。这样可以防止 string 等通用名称命名的目录，无意中屏蔽出现在后方模块搜索路径中的有效模块。最简情况下，<code>__init__.py</code> 只是一个空文件，但该文件也可以执行包的初始化代码，或设置 <code>__all__</code> 变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从包中导入单个模块</span></span><br><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种方式加载子模块 sound.effects.echo，引用时必须使用子模块的全名</span></span><br><span class="line">sound.effects.echo.echofilter(<span class="built_in">input</span>, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种导入子模块的方法</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种方式加载子模块 echo，不加包前缀也可以使用</span></span><br><span class="line">echo.echofilter(<span class="built_in">input</span>, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># import 语句的另一种变体是直接导入所需的函数或变量</span></span><br><span class="line"><span class="keyword">from</span> sound.effects.echo <span class="keyword">import</span> echofilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样也会加载子模块 echo，但可以直接使用函数 echofilter()</span></span><br><span class="line">echofilter(<span class="built_in">input</span>, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>使用 <code>from package import item</code> 时，item 可以是包的子模块（或子包），也可以是包中定义的函数、类或变量等其他名称。<code>import</code> 语句首先测试包中是否定义了 item；如果未在包中定义，则假定 item 是模块，并尝试加载。如果找不到 item，则触发 <code>ImportError</code> 异常  </p>
<p>相反，使用 <code>import item.subitem.subsubitem</code> 句法时，除最后一项外，每个 item 都必须是包；最后一项可以是模块或包，但不能是上一项中定义的类、函数或变量</p>
<h4 id="从包中导入"><a href="#从包中导入" class="headerlink" title="从包中导入 *"></a>从包中导入 *</h4><p>import 语句使用如下惯例：如果包的 <code>__init__.py</code> 代码定义了列表 <code>__all__</code>，运行 <code>from package import *</code> 时，它就是用于导入的模块名列表。发布包的新版本时，包的作者应更新此列表。如果包的作者认为没有必要在包中执行导入 * 操作，也可以不提供此列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;echo&#x27;</span>, <span class="string">&#x27;surround&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 将导入上述三项</span></span><br></pre></td></tr></table></figure>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，python 提供了 <code>pickle</code>，<code>json</code>  模块来实现序列化。<code>json</code> 是一个文本序列化格式，而 <code>pickle</code> 是一个二进制序列化格式</p>
<h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><p><code>pickle</code> 实现了对一个 Python 对象结构的二进制序列化和反序列化。要序列化某个包含层次结构的对象，只需要调用 <code>dumps()</code> 函数即可。同样，要反序列化数据流，可以调用 <code>loads()</code> 函数。但是，如果要对序列化和反序列化加以更多的控制，可以分别创建 <code>Pickler</code> 或 <code>Unpickler</code> 对象。pickling (和 unpickling) 也被称为“序列化”，“编组”，“平面化”。而为了避免混乱，此处采用术语“封存”和“解封”</p>
<h5 id="dump-dumps"><a href="#dump-dumps" class="headerlink" title="dump(), dumps()"></a>dump(), dumps()</h5><ul>
<li><code>dump()</code> 方法将对象封存后写入已打开的 file object 文件</li>
<li><code>dumps()</code> 方法将对象封存以后作为 bytes 类型直接返回，而不是将其写入到文件</li>
</ul>
<p>语法格式</p>
<ul>
<li><code>pickle.dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)</code></li>
<li><p><code>pickle.dumps(obj, protocol=None, * fix_imports=True, buffer_callback=None)</code></p>
</li>
<li><p>obj：需要封存的对象</p>
</li>
<li>file：参数 file 必须有一个 <code>write()</code> 方法，该 <code>write()</code> 方法要能接收字节作为其唯一参数。因此，它可以是一个打开的磁盘文件（用于写入二进制内容），也可以是一个 <code>io.BytesIO</code> 实例，也可以是满足这一接口的其他任何自定义对象</li>
<li>protocol：可选参数，是一个整数，告知 <code>Pickler</code> 使用指定的协议，可选择的协议范围从 0 到 <code>HIGHEST_PROTOCOL</code>。如果没有指定，这一参数默认值为 <code>DEFAULT_PROTOCOL</code>。指定一个负数就相当于指定 <code>HIGHEST_PROTOCOL</code></li>
<li>fix_imports：如果 fix_imports 为 True 且 protocol 小于 3，pickle 将尝试将 Python3 中的新名称映射到 Python2 中的旧模块名称，因此 Python2 也可以读取封存的数据流</li>
<li>buffer_callback<ul>
<li>如果 buffer_callback 为 None（默认情况），缓冲区视图（buffer view）将会作为 pickle 流的一部分被序列化到 file 中</li>
<li>如果 buffer_callback 不为 None，那它可以用缓冲区视图调用任意次。如果某次调用返回了 False 值（例如 None），则给定的缓冲区是带外的，否则缓冲区是带内的</li>
<li>如果 buffer_callback 不是 None 且 protocol 是 None 或小于5，就会出错</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;I love you&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># I love you</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化为二进制</span></span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(s))</span><br><span class="line"><span class="comment"># b&#x27;\x80\x04\x95\x0e\x00\x00\x00\x00\x00\x00\x00\x8c\nI love you\x94.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接存入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(s, f)</span><br></pre></td></tr></table></figure>
<h5 id="load-loads"><a href="#load-loads" class="headerlink" title="load(), loads()"></a>load(), loads()</h5><ul>
<li><code>load()</code> 方法从已打开的 file object 文件中读取封存后的对象，重建其中特定对象的层次结构并返回</li>
<li><code>loads()</code> 方法重建并返回一个对象的封存表示形式 data 的对象层级结构。data 必须为 bytes-like object</li>
</ul>
<p>语法格式</p>
<ul>
<li><code>pickle.load(file, *, fix_imports=True, encoding=&quot;ASCII&quot;, errors=&quot;strict&quot;, buffers=None)</code></li>
<li><p><code>pickle.loads(data, /, *, fix_imports=True, encoding=&quot;ASCII&quot;, errors=&quot;strict&quot;, buffers=None)</code></p>
</li>
<li><p>Pickle 协议版本是自动检测出来的，所以不需要参数来指定协议</p>
</li>
<li>fix_imports：如果 fix_imports 为 True，则 pickle 将尝试将旧的 Python2 名称映射到 Python3 中对应的新名称</li>
<li>encoding，errors：告知 pickle 如何解码 Python2 存储的 8 位字符串实例。这两个参数默认值为 “ASCII” 和 “strict”，encoding 参数可设置为 ‘bytes’ 来将这些 8 位字符串实例读取为字节对象</li>
<li>buffers 同上</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;What&#x27;s your name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化为二进制</span></span><br><span class="line">data = pickle.dumps(s)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># b&quot;\x80\x04\x95\x14\x00\x00\x00\x00\x00\x00\x00\x8c\x10What&#x27;s your name\x94.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接存入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(s, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解封</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(data))</span><br><span class="line"><span class="comment"># What&#x27;s your name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    s2 = pickle.load(f2)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment"># What&#x27;s your name</span></span><br></pre></td></tr></table></figure>
<h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如 XML，但更好的方法是序列化为 Json，因为 Json 表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。Json 不仅是标准格式，并且比 XML 更快，而且可以直接在 Web 页面中读取，非常方便<br>Json 表示的对象就是标准的 JavaScript 语言的对象， Json 和 Python 内置的数据类型对应如下</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Json 类型</th>
<th style="text-align:center">Python 类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">{}</td>
<td style="text-align:center">dict</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">list</td>
</tr>
<tr>
<td style="text-align:center">“string”</td>
<td style="text-align:center">str</td>
</tr>
<tr>
<td style="text-align:center">1234.56</td>
<td style="text-align:center">int 或 float</td>
</tr>
<tr>
<td style="text-align:center">true/ false</td>
<td style="text-align:center">True/ False</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">None</td>
</tr>
</tbody>
</table>
</div>
<h5 id="dump-dumps-1"><a href="#dump-dumps-1" class="headerlink" title="dump(), dumps()"></a>dump(), dumps()</h5><ul>
<li><code>dump()</code> 将对象序列化为 Json 格式化流形式的 fp（支持 <code>.write()</code> 的 file-like object）</li>
<li><code>dumps()</code> 将对象序列化为 Json 格式的 str</li>
</ul>
<p>语法格式</p>
<ul>
<li><code>json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></li>
<li><p><code>json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</code></p>
</li>
<li><p>obj：需要被序列化的对象</p>
</li>
<li>fp：支持 <code>.write()</code> 的 file-like object。json 模块始终产生 str 对象而非 bytes 对象。因此 <code>fp.write()</code> 必须支持 str 输入</li>
<li>skipkeys：默认为 False，为 True 时那些不是基本对象（包括 str, int, float, bool, None）的字典的键会被跳过，否则引发一个 <code>TypeError</code></li>
<li>ensure_ascii：默认为 True，输出保证将所有输入的非 ASCII 字符转义。如果为 False，这些字符会原样输出</li>
<li>check_circular：默认为 False，为 True时容器类型的循环引用检查将被跳过，循环引用将导致 <code>RecursionError</code></li>
<li>allow_nan：默认为 True，为 False 时在对严格 Json 规格范围外的 float 类型值（nan, inf, -inf）进行序列化时会引发一个 <code>ValueError</code>。为 True 时使用它们的 JavaScript 等价形式（<code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>）</li>
<li>cls：为了使用一个自定义的 <code>JSONEncoder</code> 子类，通过 cls 关键字参数来指定</li>
<li>indent：如果 indent 是一个非负整数或者字符串，那么 JSON 数组元素和对象成员会被美化输出为该值指定的缩进等级。如果缩进等级为零、负数或者 “”，则只会添加换行符。 None（默认值）选择最紧凑的表达。使用一个正整数会让每一层缩进同样数量的空格。如果 indent 是一个字符串（比如 <code>\t</code>）那个字符串会被用于缩进每一层</li>
<li>separators：当被指定时，separators 应当是一个 <code>(item_separator, key_separator)</code> 元组。当 indent 为 None 时，默认值取 <code>(&#39;, &#39;, &#39;: &#39;)</code>，否则取 <code>(&#39;,&#39;, &#39;: &#39;)</code>。为了得到最紧凑的 JSON 表达式，你应该指定其为 <code>(&#39;,&#39;, &#39;:&#39;)</code> 以消除空白字符</li>
<li>default：当 default 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 <code>TypeError</code>。如果没有被指定，则会直接引发 <code>TypeError</code></li>
<li>sort_keys：如果 sort_keys 是 True（默认为 False），那么字典的输出会以键的顺序排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;Score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;list&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line">data = json.dumps(dict1)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># &#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 20, &quot;Score&quot;: 90, &quot;list&quot;: [1, 2, 3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&#123;\&quot;name\&quot;: \&quot;Bob\&quot;, \&quot;age\&quot;: 20, \&quot;Score\&quot;: 90, \&quot;list\&quot;: [1, 2, 3, 4]&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="load-loads-1"><a href="#load-loads-1" class="headerlink" title="load(), loads()"></a>load(), loads()</h5><ul>
<li><code>load()</code> 方法将 fp 反序列化为一个 Python 对象</li>
<li><code>loads()</code> 方法将 s （一个包含 Json 文档的 str, bytes 或 bytearray 实例）反序列化为 Python 对象</li>
</ul>
<p>语法格式</p>
<ul>
<li><code>json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, Parse_constant=None, object_pairs_hook=None,**kw)</code></li>
<li><p><code>json.loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</code></p>
</li>
<li><p>fp：一个支持 <code>.read()</code> 并包含一个 Json 文档的 text file 或者 binary file</p>
</li>
<li>cls：要使用自定义的 <code>JSONDecoder</code> 子类，用 cls 指定他；否则使用 <code>JSONDecoder</code></li>
<li>object_hook：是一个可选的函数，它会被调用于每一个解码出的对象字面量（即一个dict）。其返回值会取代原本的 dict，这一特性能够被用于实现自定义解码器</li>
<li>object_pairs_hook：是一个可选的函数，它会被调用于每一个有序列表对解码出的对象字面量。 object_pairs_hook 的返回值将会取代原本的 dict。这一特性能够被用于实现自定义解码器。如果 object_hook 也被定义， object_pairs_hook 优先</li>
<li>parse_float：如果指定，将于每个要解码 Json 浮点数的字符串一同调用。默认状态下，相当于 float(num_str)。可以用于对 Json 浮点数使用其他数据类型的语法分析程序</li>
<li>parse_int：如果指定，将与每个要解码 Json 整数的字符串一同调用。默认状态下，相当于 int(num_str)。可以用于对 Json 整数使用其他数据类型的语法分析程序</li>
<li>parse_constant：如果指定，将要与以下字符串中的一个一同调用：<code>-Infinity</code>, <code>Infinity</code>, <code>NaN</code>。如果遇到无效的 Json 数字则可以使用它引发异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;Score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;list&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line">data = json.dumps(dict1)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># &#123;&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 20, &quot;Score&quot;: 90, &quot;list&quot;: [1, 2, 3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&#123;\&quot;name\&quot;: \&quot;Bob\&quot;, \&quot;age\&quot;: 20, \&quot;Score\&quot;: 90, \&quot;list\&quot;: [1, 2, 3, 4]&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">s2 = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 20, &#x27;Score&#x27;: 90, &#x27;list&#x27;: [1, 2, 3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    s3 = json.load(f2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 20, &#x27;Score&#x27;: 90, &#x27;list&#x27;: [1, 2, 3, 4]&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>该模块提供了对 C 标准定义的数学函数的访问。这些函数不适用于复数；如果需要计算复数，可以使用 cmath 模块中的同名函数。该模块的返回值如无特殊说明，均为浮点数</p>
<h4 id="math-ceil-x"><a href="#math-ceil-x" class="headerlink" title="math.ceil(x)"></a>math.ceil(x)</h4><p>返回 x 的上限，即大于或者等于 x 的最小整数。如果 x 不是一个浮点数，则委托 <code>x.__ceil__()</code> 返回一个 Integral 类的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">num = <span class="number">7.5</span></span><br><span class="line">res = math.ceil(num)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure>
<h4 id="math-floor-x"><a href="#math-floor-x" class="headerlink" title="math.floor(x)"></a>math.floor(x)</h4><p>返回 x 的向下取整，小于或等于 x 的最大整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">num = <span class="number">10.6875</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.floor(num))</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<h4 id="math-comb-n-k"><a href="#math-comb-n-k" class="headerlink" title="math.comb(n, k)"></a>math.comb(n, k)</h4><p>返回不重复且无顺序地从 n 项中选择 k 项的方式总数。当 <code>k &lt;= n</code> 时取值为 <code>n! / (k! * (n-k)!)</code>；当 <code>k&gt;n</code> 时取值为零。也称为二项式系数，因为它等价于表达式 <code>(1+x)**n</code> 的多项式展开中第 k 项的系数。如果任一参数不为整数则会引发 TypeError。如果任一参数为复数则会引发 ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要选择的项目数量</span></span><br><span class="line">n = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要选择的可能性数目</span></span><br><span class="line">k = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能的组合总数</span></span><br><span class="line"><span class="built_in">print</span>(math.comb(<span class="number">7</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 21</span></span><br></pre></td></tr></table></figure>
<h4 id="math-pow-x-y"><a href="#math-pow-x-y" class="headerlink" title="math.pow(x, y)"></a>math.pow(x, y)</h4><p>将返回 x 的 y 次幂。<code>pow(1.0, x)</code> 和 <code>pow(x, 0.0)</code> 总是返回 1.0，即使 x 是零或 NaN。如果 x 和 y 都是有限的，x 是负数，y 不是整数那么 <code>pow(x, y)</code> 是未定义的，并且引发 ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 81.0</span></span><br></pre></td></tr></table></figure>
<h4 id="math-exp-x"><a href="#math-exp-x" class="headerlink" title="math.exp(x)"></a>math.exp(x)</h4><ul>
<li>返回 e 次 x 幂，其中 e = 2.718281…是自然对数的基数。这通常比 <code>math.e ** x</code> 或 <code>pow(math.e, x)</code> 更精确</li>
<li><code>math.expm1(x)</code> 返回 e 的 x 次幂，减 1</li>
</ul>
<h4 id="math-sqrt-x"><a href="#math-sqrt-x" class="headerlink" title="math.sqrt(x)"></a>math.sqrt(x)</h4><p>返回 x 的平方根</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 1.4142135623730951</span></span><br></pre></td></tr></table></figure>
<h4 id="math-fabs-x"><a href="#math-fabs-x" class="headerlink" title="math.fabs(x)"></a>math.fabs(x)</h4><p>返回 x 的绝对值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.fabs(-<span class="number">3.14</span>))</span><br><span class="line"><span class="comment"># 3.14</span></span><br></pre></td></tr></table></figure>
<h4 id="math-modf"><a href="#math-modf" class="headerlink" title="math.modf"></a>math.modf</h4><p>返回 x 的小数和整数部分。两个结果都带有 x 的符号并且是浮点数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.modf(<span class="number">75.1423</span>))</span><br><span class="line"><span class="comment"># (0.14230000000000587, 75.0)</span></span><br></pre></td></tr></table></figure>
<h4 id="math-copysign-x-y"><a href="#math-copysign-x-y" class="headerlink" title="math.copysign(x, y)"></a>math.copysign(x, y)</h4><p>返回一个基于 x 的绝对值和 y 的符号的浮点数。在支持带符号零的平台上，<code>copysign(1.0, -0.0)</code> 返回 -1.0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.copysign(<span class="number">21</span>, -<span class="number">8</span>))</span><br><span class="line"><span class="comment"># -21.0</span></span><br></pre></td></tr></table></figure>
<h4 id="math-fsum-iterable"><a href="#math-fsum-iterable" class="headerlink" title="math.fsum(iterable)"></a>math.fsum(iterable)</h4><p>返回迭代中的精确浮点值。通过跟踪多个中间部分和来避免精度损失</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>]))</span><br><span class="line"><span class="comment"># 0.9999999999999999</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.fsum([<span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>, <span class="number">.1</span>]))</span><br><span class="line"><span class="comment"># 1.0</span></span><br></pre></td></tr></table></figure>
<h4 id="math-factorial-x"><a href="#math-factorial-x" class="headerlink" title="math.factorial(x)"></a>math.factorial(x)</h4><p>以一个整数返回 x 的阶乘。如果 x 不是整数或为负数时则引发 ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.factorial(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 120</span></span><br></pre></td></tr></table></figure>
<h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>该模块实现了各种分布的伪随机数生成器</p>
<h4 id="random-randbytes-n"><a href="#random-randbytes-n" class="headerlink" title="random.randbytes(n)"></a>random.randbytes(n)</h4><p>生成 n 个随机字节。此方法不可用于生成安全凭据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randbytes(i))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xb5&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xf0\x8a&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xf7&#123;\xb9&#x27;</span></span><br><span class="line"><span class="string">b&#x27;u\x0e\x8b\xce&#x27;</span></span><br><span class="line"><span class="string">b&#x27;=k/\x93\x18&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xbf\x86\xc2\xb1\xbd\xd8&#x27;</span></span><br><span class="line"><span class="string">b&#x27;n\xc2|$\xd2Z\x81&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x0c\x14\xe1O\x05\x97l\x80&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xc7\xde\xbf!\xbf\xab,u0&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-randrange-start-stop-step"><a href="#random-randrange-start-stop-step" class="headerlink" title="random.randrange(start, stop[, step])"></a>random.randrange(start, stop[, step])</h4><p>返回指定递增基数集合中的一个随机整数，基数默认值为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># randrange(stop)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">10</span>), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 7 2 5 3 2 7 7 9 1 8 5</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># randrange(start, stop[, step])</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">5</span>, <span class="number">10</span>), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 7 5 5 9 8 5 7 9 6 8 </span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 5 5 7 7 5 5 9 5 7 9 </span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 8 8 5 8 8 8 5 5 8 5</span></span><br></pre></td></tr></table></figure>
<h4 id="random-randint-a-b"><a href="#random-randint-a-b" class="headerlink" title="random.randint(a, b)"></a>random.randint(a, b)</h4><p>返回随机整数 N 满足 <code>a &lt;= N &lt;= b</code>。相当于 <code>randrange(a, b+1)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">0</span>, <span class="number">10</span>), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 5 6 9 3 0 0 1 5 10 10</span></span><br></pre></td></tr></table></figure>
<h4 id="random-random"><a href="#random-random" class="headerlink" title="random.random()"></a>random.random()</h4><p>返回一个 [0.0, 1.0) 范围内的一个随机浮点数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.2449052297866442</span></span><br><span class="line"><span class="string">0.05254469870580114</span></span><br><span class="line"><span class="string">0.444038560774782</span></span><br><span class="line"><span class="string">0.6984477491825681</span></span><br><span class="line"><span class="string">0.9284087374645925</span></span><br><span class="line"><span class="string">0.2196960126973483</span></span><br><span class="line"><span class="string">0.9818508657463422</span></span><br><span class="line"><span class="string">0.6026416384408736</span></span><br><span class="line"><span class="string">0.950494170394666</span></span><br><span class="line"><span class="string">0.054093248937237326</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-uniform-a-b"><a href="#random-uniform-a-b" class="headerlink" title="random.uniform(a, b)"></a>random.uniform(a, b)</h4><p>返回一个随机浮点数 N，当 <code>a &lt;= b</code> 时 <code>a &lt;= N &lt;= b</code>，当 <code>b &lt; a</code> 时 <code>b &lt;= N &lt;= a</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.uniform(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">6.960083845819047</span></span><br><span class="line"><span class="string">8.0499197740427</span></span><br><span class="line"><span class="string">7.632114065282217</span></span><br><span class="line"><span class="string">9.831034345255565</span></span><br><span class="line"><span class="string">6.7964573951456035</span></span><br><span class="line"><span class="string">8.339868953243567</span></span><br><span class="line"><span class="string">6.988441556510773</span></span><br><span class="line"><span class="string">9.116358356408721</span></span><br><span class="line"><span class="string">9.940489801763544</span></span><br><span class="line"><span class="string">8.310169708257082</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.uniform(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">9.250325166219142</span></span><br><span class="line"><span class="string">7.962167891506429</span></span><br><span class="line"><span class="string">8.7520739401349</span></span><br><span class="line"><span class="string">5.44676306855829</span></span><br><span class="line"><span class="string">8.351795145578466</span></span><br><span class="line"><span class="string">7.698014727562319</span></span><br><span class="line"><span class="string">8.78132686819255</span></span><br><span class="line"><span class="string">7.041707186177215</span></span><br><span class="line"><span class="string">8.579927268534604</span></span><br><span class="line"><span class="string">6.431546663529902</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-choice-seq"><a href="#random-choice-seq" class="headerlink" title="random.choice(seq)"></a>random.choice(seq)</h4><p>从非空序列 seq 返回一个随机元素。如果 seq 为空，则引发 IndexError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(random.choice(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">17</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">16</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">14</span></span><br><span class="line"><span class="string">13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-shuffle-x-random"><a href="#random-shuffle-x-random" class="headerlink" title="random.shuffle(x[, random])"></a>random.shuffle(x[, random])</h4><p>将序列 x 随机打乱位置。可选参数 random 是一个 0 参数函数，在 [0.0, 1.0) 中随机返回浮点数，默认情况下，这是函数 <code>random()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    random.shuffle(l)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2, 3, 5, 1, 4]</span></span><br><span class="line"><span class="string">[4, 3, 2, 5, 1]</span></span><br><span class="line"><span class="string">[5, 1, 2, 4, 3]</span></span><br><span class="line"><span class="string">[4, 1, 3, 2, 5]</span></span><br><span class="line"><span class="string">[2, 3, 4, 1, 5]</span></span><br><span class="line"><span class="string">[4, 1, 3, 2, 5]</span></span><br><span class="line"><span class="string">[4, 5, 3, 1, 2]</span></span><br><span class="line"><span class="string">[1, 4, 3, 5, 2]</span></span><br><span class="line"><span class="string">[2, 4, 5, 3, 1]</span></span><br><span class="line"><span class="string">[5, 4, 1, 2, 3]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-sample-population-k-counts-None"><a href="#random-sample-population-k-counts-None" class="headerlink" title="random.sample(population, k, *, counts=None)"></a>random.sample(population, k, *, counts=None)</h4><p>返回从总体序列或集合中选择的唯一元素的 k 长度列表。用于无重复的随机抽样</p>
<p>语法格式</p>
<p><code>random.sample(population, k, *, counts=None)</code></p>
<ul>
<li>重复的元素可以一个个地直接列出，或使用可选的仅限关键字形参 counts 来指定。例如 <code>sample([&#39;red&#39;, &#39;blue&#39;], counts=[4,2], k=5)</code> 等价于 <code>sample([&#39;red&#39;,&#39;red&#39;,&#39;red&#39;,&#39;red&#39;,&#39;blue&#39;,&#39;blue&#39;], k=5)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">l = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">&quot;print(random.sample(l, &#123;0&#125;))&quot;</span>.<span class="built_in">format</span>(i <span class="keyword">if</span> i &lt; <span class="number">5</span> <span class="keyword">else</span> <span class="number">5</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">[&#x27;orange&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;green&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;white&#x27;, &#x27;red&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;blue&#x27;, &#x27;orange&#x27;, &#x27;white&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;white&#x27;, &#x27;red&#x27;, &#x27;green&#x27;, &#x27;orange&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;green&#x27;, &#x27;white&#x27;, &#x27;orange&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;orange&#x27;, &#x27;blue&#x27;, &#x27;white&#x27;, &#x27;green&#x27;, &#x27;red&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;, &#x27;orange&#x27;, &#x27;white&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;orange&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;white&#x27;, &#x27;red&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="random-seed-a-None-version-2"><a href="#random-seed-a-None-version-2" class="headerlink" title="random.seed(a=None, version=2)"></a>random.seed(a=None, version=2)</h4><p>初始化随机数生成器。如果 a 被省略或为 None，则使用当前系统时间。如果操作系统提供随机源，则使用它们而不是系统时间。如果 a 是 int 类型，则直接使用  </p>
<p>对于版本 2（默认），str、 bytes 或 bytearray 对象转换为 int 并使用它的所有位<br>对于版本 1，用于 str 和 bytes 的算法生成更窄的种子范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用默认种子生成随机数： 0.1307650987426362</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用默认种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用默认种子生成随机数： 0.12566655822572803</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用整数 10 种子生成随机数： 0.5714025946899135</span></span><br><span class="line">random.seed(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用整数 10 种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用整数 10 种子生成随机数： 0.5714025946899135</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用字符串种子生成随机数： 0.3537754404730722</span></span><br><span class="line">random.seed(<span class="string">&quot;hello&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用字符串种子生成随机数：&quot;</span>, random.random())</span><br><span class="line"><span class="comment"># 使用字符串种子生成随机数： 0.3537754404730722</span></span><br></pre></td></tr></table></figure>
<h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>os 模块提供了一种使用与操作系统相关的功能的便捷式途径</p>
<h4 id="os-access"><a href="#os-access" class="headerlink" title="os.access()"></a>os.access()</h4><p>该方法使用当前的 uid/gid 尝试访问路径。大部分操作使用有效的 uid/gid，因此运行环境可以在 suid/sgid 环境尝试</p>
<p>语法格式</p>
<p><code>os.access(path, mode)</code></p>
<ul>
<li>path：要用来检测是否有访问权限的路径</li>
<li>mode：mode 为 <code>F_OK</code>，测试存在的路径，或者它可以是包含 <code>R_OK</code>, <code>W_OK</code> 和 <code>X_OK</code> 或者 <code>R_OK</code>, <code>W_OK</code> 和 <code>X_OK</code> 其中之一或者更多<ul>
<li><code>os.F_OK</code>：测试 path 是否存在</li>
<li><code>os.R_OK</code>：测试 path 是否可读</li>
<li><code>os.W_OK</code>：测试 path 是否可写</li>
<li><code>os.X_OK</code>：测试 path 是否可执行</li>
</ul>
</li>
<li>返回值：如果允许访问返回 True，否则返回 False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定 /tmp/foo.txt 文件存在，并有读写权限</span></span><br><span class="line"></span><br><span class="line">ret = os.access(<span class="string">&quot;/tmp/foo.txt&quot;</span>, os.F_OK)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F_OK - 返回值 %s&quot;</span> % ret)</span><br><span class="line"><span class="comment"># F_OK - 返回值 True</span></span><br><span class="line"></span><br><span class="line">ret = os.access(<span class="string">&quot;/tmp/foo.txt&quot;</span>, os.R_OK)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;R_OK - 返回值 %s&quot;</span> % ret)</span><br><span class="line"><span class="comment"># R_OK - 返回值 True</span></span><br><span class="line"></span><br><span class="line">ret = os.access(<span class="string">&quot;/tmp/foo.txt&quot;</span>, os.W_OK)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;W_OK - 返回值 %s&quot;</span> % ret)</span><br><span class="line"><span class="comment"># W_OK - 返回值 True</span></span><br><span class="line"></span><br><span class="line">ret = os.access(<span class="string">&quot;/tmp/foo.txt&quot;</span>, os.X_OK)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;X_OK - 返回值 %s&quot;</span> % ret)</span><br><span class="line"><span class="comment"># X_OK - 返回值 False</span></span><br></pre></td></tr></table></figure>
<h4 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a>os.getcwd()</h4><p>该方法返回当前工作目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br></pre></td></tr></table></figure>
<h4 id="os-chdir"><a href="#os-chdir" class="headerlink" title="os.chdir()"></a>os.chdir()</h4><p>该方法用于改变当前工作目录到指定的路径</p>
<p>语法格式</p>
<p><code>os.chdir(path)</code></p>
<ul>
<li>path：要切换到的新路径</li>
<li>返回值：如果允许访问返回 True，否则返回 False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;H:\tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前工作目录</span></span><br><span class="line">retval = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前工作目录为 %s&quot;</span> % retval)</span><br><span class="line"><span class="comment"># 当前工作目录为 C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前工作目录</span></span><br><span class="line">os.chdir(path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改后的工作目录</span></span><br><span class="line">retval = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;目录修改成功 %s&quot;</span> % retval)</span><br><span class="line"><span class="comment"># 目录修改成功 H:\tmp</span></span><br></pre></td></tr></table></figure>
<h4 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a>os.listdir()</h4><p>该方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母排序。它不包括 <code>.</code> 和 <code>..</code> 即使它在文件夹中。只支持在 Unix, Windows 下使用</p>
<p>语法格式</p>
<p><code>os.listdir(path)</code></p>
<ul>
<li>path：需要列出的目录路径</li>
<li>返回值：返回指定路径下的文件和文件夹列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件及文件夹</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir())</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;password.txt&#x27;, &#x27;test.json&#x27;, &#x27;test.txt&#x27;, &#x27;test2.txt&#x27;, &#x27;user.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="os-mkdir"><a href="#os-mkdir" class="headerlink" title="os.mkdir()"></a>os.mkdir()</h4><p>该方法用于以数字权限模式创建目录。默认的模式为 0777。如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个 OSError</p>
<p>语法格式</p>
<p><code>os.mkdir(path[, mode])</code></p>
<ul>
<li>path：要创建的目录，可以是相对或者绝对路劲</li>
<li>mode：要为目录设置的权限数字模式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\newfile&#x27;</span></span><br><span class="line"></span><br><span class="line">os.mkdir(path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;目录已创建&quot;</span>) <span class="comment"># 目录已创建</span></span><br></pre></td></tr></table></figure>
<h4 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs()"></a>os.makedirs()</h4><p>该方法用于递归创建多层目录。如果子目录创建失败或者已经存在，会抛出一个 OSError 异常</p>
<p>语法格式</p>
<p><code>os.makedirs(name, mode=511, exist_ok=False)</code></p>
<ul>
<li>path：需要递归创建的目录，可以是相对或者绝对路径</li>
<li>mode：权限模式，默认的模式为 511（八进制）</li>
<li>exist_ok：是否在目录存在时触发异常。如果 exist_ok 为 False（默认值），则在目标目录已存在的情况下触发 <code>FileExistsError</code>；如果 exist_ok 为 True，则在目标目录已存在的情况下不会触发 <code>FileExistsError</code> 异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\newfile2&#x27;</span></span><br><span class="line"></span><br><span class="line">os.makedirs(path, <span class="number">0o777</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;路径被创建&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="os-rmdir"><a href="#os-rmdir" class="headerlink" title="os.rmdir()"></a>os.rmdir()</h4><p>该方法用于删除指定路径的目录。仅当这文件夹是空的才可以，否则，抛出 OSError</p>
<p>语法格式</p>
<p><code>os.rmdir(path)</code></p>
<ul>
<li>path：要删除的路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\newfile&#x27;</span></span><br><span class="line"></span><br><span class="line">os.rmdir(path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;路径被删除&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="os-removedirs"><a href="#os-removedirs" class="headerlink" title="os.removedirs()"></a>os.removedirs()</h4><p>该方法用于递归删除目录。如果子文件夹成功删除，<code>removedirs()</code> 才尝试它们的父文件夹，直到抛出一个 error</p>
<p>语法格式</p>
<p><code>os.removedirs(path)</code></p>
<ul>
<li>path：要移除的目录路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;目录为：&#x27;</span>, os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目录为： [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;password.txt&#x27;, &#x27;test&#x27;, &#x27;test.json&#x27;, &#x27;test.txt&#x27;, &#x27;test2.txt&#x27;, &#x27;user.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">os.removedirs(<span class="string">&quot;./test/test1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;路径被删除&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="os-remove"><a href="#os-remove" class="headerlink" title="os.remove()"></a>os.remove()</h4><p>该方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出 OSError</p>
<p>语法格式</p>
<p><code>os.remove(path)</code></p>
<ul>
<li>path：要移除的文件路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;目录为：&#x27;</span>, os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目录为： [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;password.txt&#x27;, &#x27;test.json&#x27;, &#x27;test.txt&#x27;, &#x27;test2.txt&#x27;, &#x27;user.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;user.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件被删除&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="os-rename"><a href="#os-rename" class="headerlink" title="os.rename()"></a>os.rename()</h4><p>该方法用于命名文件或目录，从 src 到 dst，如果 dst 是一个存在的目录，将抛出 OSError</p>
<p>语法格式</p>
<p><code>os.rename(src, dst)</code></p>
<ul>
<li>src：要修改的文件、目录名</li>
<li>dst：修改后的文件、目录名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;目录为：&#x27;</span>, os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目录为： [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;password.txt&#x27;, &#x27;test.json&#x27;, &#x27;test.txt&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;new_name.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;该名后：&#x27;</span>, os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">该名后： [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="os-system"><a href="#os-system" class="headerlink" title="os.system()"></a>os.system()</h4><p>该方法在子外壳程序中执行一个命令。在 Unix 上，返回值为进程的退出状态，以针对 <code>wait()</code> 而指定的格式进行编码。在 Windows 上，返回值是运行 command 后系统 Shell 返回的值。该 Shell 由 Windows 环境变量 COMSPEC: 给出，通常是 cmd.exe，它会返回命令的退出状态</p>
<p>语法格式</p>
<p><code>os.system(command)</code></p>
<ul>
<li>command：需要执行的命令</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;cd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br></pre></td></tr></table></figure>
<h4 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk()"></a>os.walk()</h4><p>该方法可以创建一个生成器，用以生成所要查找的目录及其子目录下的所有文件。该方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下</p>
<p>语法格式</p>
<p><code>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</code></p>
<ul>
<li>top：根目录下的每一个文件夹（包含它自己），产生 3-元组（dirpath, dirnames, filenames）【文件夹路径， 文件夹名字， 文件名】</li>
<li>topdown：可选，为 True 或者没有指定，一个目录的 3-元组将比它的任何子文件夹的 3-元组先产生（目录自上而下）。如果 topdown 为 False，一个目录的 3-元组将比它的任何子文件夹的 3-元组后产生（目录自上而下）</li>
<li>onerror：可选，是一个函数；它调用时有一个参数，一个 <code>OSError</code> 实例。报告这错误后，继续 walk，或者抛出 exception 终止 walk</li>
<li>followlinks：设置为 True，则通过软链接访问目录</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tuple_3 <span class="keyword">in</span> os.walk(path_1):</span><br><span class="line">    <span class="built_in">print</span>(tuple_3)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(&#x27;C:\\Users\\HuaJi\\Documents\\MyFiles\\Pycharm\\LearnPython\\Test&#x27;, [], [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path_1, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, name))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\Test\File1.py</span></span><br><span class="line"><span class="string">C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\Test\File2.txt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3学习笔记-4</title>
    <url>/2022/04/10/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/</url>
    <content><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h3><p>系统模块中的路径模块</p>
<h4 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="os.path.abspath()"></a>os.path.abspath()</h4><p>该方法返回绝对路径，可以将相对路径转化为绝对路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">res = os.path.abspath(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="os-path-basename"><a href="#os-path-basename" class="headerlink" title="os.path.basename()"></a>os.path.basename()</h4><p>该方法返回路径中最后一个路径分隔符后的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">res = os.path.abspath(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">new_path = res + <span class="string">r&quot;\new.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\new.txt</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(res))</span><br><span class="line"><span class="comment"># LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(new_path))</span><br><span class="line"><span class="comment"># new.txt</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="os.path.dirname()"></a>os.path.dirname()</h4><p>返回文件路径，即路径最后一个分隔符前的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">res = os.path.abspath(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">new_path = res + <span class="string">r&quot;\new.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\new.txt</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(res))</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(new_path))</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h4><p>组合两个路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_2 = <span class="string">r&#x27;TestPathA\TestPathB&#x27;</span></span><br><span class="line">path_3 = <span class="string">r&#x27;test.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.join(path_1, path_3))</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\test.txt</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.join(path_2, path_3))</span><br><span class="line"><span class="comment"># TestPathA\TestPathB\test.txt</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.join(path_1, path_2))</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\TestPathA\TestPathB</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-split"><a href="#os-path-split" class="headerlink" title="os.path.split()"></a>os.path.split()</h4><p>将路径分割为 dirname 和 basename，返回一个元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.split(path))</span><br><span class="line"><span class="comment"># (&#x27;C:\\Users\\HuaJi\\Documents\\MyFiles\\Pycharm&#x27;, &#x27;LearnPython&#x27;)</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-splitdrive"><a href="#os-path-splitdrive" class="headerlink" title="os.path.splitdrive()"></a>os.path.splitdrive()</h4><p>一般用在 Windows 下，返回驱动器名和路径组成的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.splitdrive(path))</span><br><span class="line"><span class="comment"># (&#x27;C:&#x27;, &#x27;\\Users\\HuaJi\\Documents\\MyFiles\\Pycharm\\LearnPython&#x27;)</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-splitext"><a href="#os-path-splitext" class="headerlink" title="os.path.splitext()"></a>os.path.splitext()</h4><p>分割路径中的文件与扩展名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line">new_path = os.path.join(path, <span class="string">&#x27;new.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.splitext(new_path))</span><br><span class="line"><span class="comment"># (&#x27;C:\\Users\\HuaJi\\Documents\\MyFiles\\Pycharm\\LearnPython\\new&#x27;, &#x27;.txt&#x27;)</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-getsize"><a href="#os-path-getsize" class="headerlink" title="os.path.getsize()"></a>os.path.getsize()</h4><p>返回文件大小，单位为 B，如果文件不存在就返回错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython</span></span><br><span class="line"></span><br><span class="line">new_path = os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.getsize(new_path))</span><br><span class="line"><span class="comment"># 73</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-isabs-os-path-isfile-os-path-isdir"><a href="#os-path-isabs-os-path-isfile-os-path-isdir" class="headerlink" title="os.path.isabs(), os.path.isfile(), os.path.isdir()"></a>os.path.isabs(), os.path.isfile(), os.path.isdir()</h4><p><code>os.path.isabs()</code> 判断是否为绝对路径，<code>os.path.isfile()</code> 判断是否为一个存在的文件，<code>os.path.isdir()</code> 判断是否为一个存在的目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython&#x27;</span></span><br><span class="line">path_2 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython/test.json&#x27;</span></span><br><span class="line">path_3 = <span class="string">r&#x27;./Test/test2/test3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.isabs(path_1))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isabs(path_3))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(path_2))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">&#x27;test.json&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(path_1))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(path_2))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(path_3))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists()"></a>os.path.exists()</h4><p>路径存在则返回 True，路径损坏返回 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython&#x27;</span></span><br><span class="line">path_2 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython/test.json&#x27;</span></span><br><span class="line">path_3 = <span class="string">r&#x27;./Test/test2/test3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(path_1))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(path_3))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-samefile"><a href="#os-path-samefile" class="headerlink" title="os.path.samefile()"></a>os.path.samefile()</h4><p>判断目录或文件是否相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython&#x27;</span></span><br><span class="line">path_2 = <span class="string">r&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.samefile(path_1, path_2))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<h4 id="os-path-getatime-os-path-getmtime-os-path-getctime"><a href="#os-path-getatime-os-path-getmtime-os-path-getctime" class="headerlink" title="os.path.getatime(), os.path.getmtime(), os.path.getctime()"></a>os.path.getatime(), os.path.getmtime(), os.path.getctime()</h4><p><code>os.path.getatime()</code> 返回文件最近访问时间，<code>os.path.getmtime()</code> 返回文件最近的修改时间，<code>os.path.getctime()</code> 返回文件的创建时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path_1 = <span class="string">r&#x27;C:/Users/HuaJi/Documents/MyFiles/Pycharm/LearnPython/test.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.getatime(path_1))  <span class="comment"># 1647853264.0295675</span></span><br><span class="line"><span class="built_in">print</span>(os.path.getmtime(path_1))  <span class="comment"># 1647853263.7062736</span></span><br><span class="line"><span class="built_in">print</span>(os.path.getctime(path_1))  <span class="comment"># 1647850368.4079947</span></span><br></pre></td></tr></table></figure>
<h3 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h3><p>shutil 模块提供了一系列对文件和文件集合的高阶操作</p>
<h4 id="shutil-copy"><a href="#shutil-copy" class="headerlink" title="shutil.copy()"></a>shutil.copy()</h4><p>将文件拷贝到其他文件或目录。<code>copy()</code> 会拷贝文件数据和文件的权限模式，其他元数据，例如文件的创建和修改时间不会被保留。要保留所有原有的元数据，请改用 <code>copy2()</code></p>
<p>语法格式</p>
<p><code>shutil.copy(src, dst, *, follow_symlinks=True)</code></p>
<ul>
<li>src：路径类对象字符串</li>
<li>dst：路径类对象字符串。如果 dst 指定了一个目录，文件将使用 src 中的基准文件名拷贝到 dst 中</li>
<li>follow_symlinks：如果 follow_symlinks 为假值且 src 为符号链接，则 dst 也将被创建为符号链接。如果 follow_symlinks 为真值且 src 为符号链接，则 dst 将成为 src 所指向的文件的一个副本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line">shutil.copy(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果路径下已有文件将自动进行覆盖</span></span><br><span class="line">shutil.copy(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可改名拷贝</span></span><br><span class="line">shutil.copy(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test_2.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-copy2"><a href="#shutil-copy2" class="headerlink" title="shutil.copy2()"></a>shutil.copy2()</h4><p>类似于 <code>copy()</code>，区别在于 <code>copy2()</code> 还会尝试保留文件的元数据</p>
<p>语法格式</p>
<p><code>shutil.copy2(src, dst, *, follow_symlinks=True)</code></p>
<ul>
<li>参数说明同上</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line">shutil.copy2(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果路径下已有文件将自动进行覆盖</span></span><br><span class="line">shutil.copy2(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可改名拷贝</span></span><br><span class="line">shutil.copy2(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test_2.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-copyfile"><a href="#shutil-copyfile" class="headerlink" title="shutil.copyfile()"></a>shutil.copyfile()</h4><p>将文件内容（不包括元数据）拷贝到新的文件。源和目标必须代表一个文件，并且目标必须是可写的。如果目标已经存在，则将其替换为源文件，否则将创建一个新文件。如果源和目标表示相同的文件，则将引发 SameFileError 异常</p>
<p>语法格式</p>
<p><code>shutil.copyfile(src, dst, *, follow_symlinks=True)</code></p>
<ul>
<li>参数说明同上</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line">shutil.copyfile(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果路径下已有文件将自动进行覆盖</span></span><br><span class="line">shutil.copyfile(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可改名拷贝</span></span><br><span class="line">shutil.copyfile(os.path.join(path, <span class="string">&#x27;test.json&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test_2.json&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-copytree"><a href="#shutil-copytree" class="headerlink" title="shutil.copytree()"></a>shutil.copytree()</h4><p>拷贝所有文件到新的文件夹下，保持原有的文件结构</p>
<p>语法格式</p>
<p><code>shutil.copytree(src, dst)</code></p>
<ul>
<li>dst：指向的路径必须不存在</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动</span></span><br><span class="line">shutil.copytree(path_1, os.path.join(path, <span class="string">&#x27;New_Test&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;New_Test&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(os.path.join(path, <span class="string">&#x27;New_Test&#x27;</span>)))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-rmtree"><a href="#shutil-rmtree" class="headerlink" title="shutil.rmtree()"></a>shutil.rmtree()</h4><p>删除一个完整的目录树</p>
<p>语法格式</p>
<p><code>shutil.rmtree(path, ignore_errors=False, onerror=None)</code></p>
<ul>
<li>path：必须指向一个目录</li>
<li>ignore_errors：如果为真，删除失败导致的错误将被忽略；如果为假，此类错误将通过调用由 onerror 所指定的处理程序来处理，或者如果此参数被省略则将引发一个异常</li>
<li>onerror：如果提供了 onerror，它必须为接受三个形参的可调用对象: function, path 和 excinfo</li>
<li>第一个形参 function 是引发异常的函数；它依赖于具体的平台和实现。 第二个形参 path 将是传递给 function 的路径名。 第三个形参 excinfo 将是由 sys.exc_info() 所返回的异常信息。 由 onerror 所引发的异常将不会被捕获</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;New_Test&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">shutil.rmtree(os.path.join(path, <span class="string">&#x27;New_Test&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-move"><a href="#shutil-move" class="headerlink" title="shutil.move()"></a>shutil.move()</h4><p>递归地将一个文件或目录移至另一个位置。如果目标是已存在的目录，则 src 会被移至该目录下。如果目标已存在但不是目录，它可能会被覆盖，具体取决于 <code>os.rename()</code> 的语义</p>
<p>语法格式</p>
<p><code>shutil.move(src, dst, copy_function=copy2)</code></p>
<ul>
<li>src：源目录</li>
<li>dst：目标目录</li>
<li>copy_function：如果给出了 copy_function，则它必须为接受两个参数 src 和 dst 的可调用对象，并将在 <code>os.rename()</code> 无法使用时被用来将 src 拷贝到 dst。 如果源是一个目录，则会调用 <code>copytree()</code>，并向它传入 <code>copy_function()</code>。 默认的 copy_function 是 <code>copy2()</code>。 使用 <code>copy()</code> 作为 copy_function 允许在无法附带拷贝元数据时让移动操作成功执行，但其代价是不拷贝任何元数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython&#x27;</span></span><br><span class="line">path_1 = os.path.join(path, <span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动前路径下文件展示</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path))</span><br><span class="line"><span class="comment"># [&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test_2.json&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">shutil.move(os.path.join(path, <span class="string">&#x27;test2.txt&#x27;</span>), os.path.join(path_1, <span class="string">&#x27;test2.txt&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(path_1))</span><br><span class="line"><span class="comment"># [&#x27;File1.py&#x27;, &#x27;File2.txt&#x27;, &#x27;test.json&#x27;, &#x27;test2.txt&#x27;, &#x27;test_2.json&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h3><p>该模块提供了创建、读取、写入、添加及列出 ZIP 文件的工具</p>
<h4 id="class-zipfile-ZipInfo"><a href="#class-zipfile-ZipInfo" class="headerlink" title="class zipfile.ZipInfo"></a>class zipfile.ZipInfo</h4><p>用于标识档案内一个成员信息的类。此类的实例会由 <code>ZipFile</code> 对象的 <code>getinfo()</code> 和 <code>infolist()</code> 方法返回。大多数 <code>zipfile</code> 模块的用户都不必创建它们，只需使用此模块所创建的实例</p>
<p>语法格式</p>
<p><code>class zipfile.ZipInfo(filename=&#39;NoName&#39;, date_time=1980, 1, 1, 0, 0, 0)</code></p>
<ul>
<li>filename：档案成员的全名</li>
<li>date_time： 包含六个字段的描述最近修改时间的元组</li>
</ul>
<h4 id="class-zipfile-ZipFile"><a href="#class-zipfile-ZipFile" class="headerlink" title="class zipfile.ZipFile"></a>class zipfile.ZipFile</h4><p>用于读写 ZIP 文件的类</p>
<p>语法格式</p>
<p><code>class zipfile.ZipFile(file, mode=&#39;r&#39;, compression=ZIP_STORED, allowZip64=True, compresslevel=None, *, strict_timestamps=True)</code></p>
<ul>
<li>file：一个指向文件的路径（字符串），一个类文件对象或者一个 path-like object</li>
<li>mode：<code>r</code> 读取一个存在的文件，<code>w</code> 截断并写入新的文件， <code>a</code> 添加到一个存在的文件，<code>x</code> 仅新建并写入新的文件。</li>
<li>compression：在写入归档时要使用的 ZIP 压缩方法，应为 <code>ZIP_STORED</code>, <code>ZIP_DEFLATED</code>, <code>ZIP_BZIP2</code> 或 <code>ZIP_LZMA</code>；不可识别值将导致引发 <code>NotImplementedError</code></li>
<li>allowZip64：如果为 True，则当 zipfile 大于 4GiB 时将创建使用 ZIP64 扩展的 ZIP 文件。如果为 False， 则当 ZIP 文件需要 ZIP64 扩展时将引发异常</li>
<li>compresslevel：该形参用于控制在将文件写入归档时要使用的压缩等级。当使用 <code>ZIP_STORED</code> 或 <code>ZIP_LZMA</code> 时无压缩效果。当使用 <code>ZIPDEFLATED</code> 时接受整数 0 至 9。当使用 <code>ZIP_BZIP2</code> 时接受整数 1 至 9</li>
<li>strict_timestamps：为 False 时允许压缩早于 1980-01-01 的文件，代价是会将时间戳设为 1980-01-01。而 2107-12-31 为上限值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;example.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> my_zip:</span><br><span class="line">    my_zip.write(<span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;.idea&#x27;, &#x27;example.zip&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="ZipFile-close"><a href="#ZipFile-close" class="headerlink" title="ZipFile.close()"></a>ZipFile.close()</h4><p>关闭归档文件，必须在退出程序之前调用 <code>close()</code> 否则将不会写入关键记录数据。可用 <code>with</code> 语句替代</p>
<h4 id="ZipFile-getinfo-name"><a href="#ZipFile-getinfo-name" class="headerlink" title="ZipFile.getinfo(name)"></a>ZipFile.getinfo(name)</h4><p>返回一个 <code>ZipInfo</code> 对象，其中包含有关归档成员 name 的信息</p>
<h4 id="ZipFile-infolist"><a href="#ZipFile-infolist" class="headerlink" title="ZipFile.infolist()"></a>ZipFile.infolist()</h4><p>返回一个列表，其中包含每个归档成员的 <code>ZipInfo</code> 对象。如果是打开一个现有归档则这些对象的排列顺序与它们对应条目在磁盘上的实际 ZIP 文件中的顺序一致</p>
<h4 id="ZipFile-namelist"><a href="#ZipFile-namelist" class="headerlink" title="ZipFile.namelist()"></a>ZipFile.namelist()</h4><p>返回按名称排序的归档成员的列表</p>
<h4 id="ZipFile-open"><a href="#ZipFile-open" class="headerlink" title="ZipFile.open()"></a>ZipFile.open()</h4><p>以二进制文件类对象的形式访问一个归档成员</p>
<p>语法格式</p>
<p><code>ZipFile.open(name, mode=&#39;r&#39;, pwd=None, *, force_zip64=False)</code></p>
<ul>
<li>name：可以是归档内某个文件的名称也可以是某个 <code>ZipInfo</code> 对象</li>
<li>mode：必须为 <code>r</code> 或 <code>w</code></li>
<li>pwd：用于解密已加密 ZIP 文件的密码</li>
<li>force_zip64：当写入一个文件时，如果文件大小不能预先确定但是可能超过 2 GiB，可传入 <code>force_zip64=True</code> 以确保标头格式能够支持超大文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;example.zip&#x27;</span>) <span class="keyword">as</span> my_zip:</span><br><span class="line">    <span class="keyword">with</span> my_zip.<span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>) <span class="keyword">as</span> my_file:</span><br><span class="line">        <span class="built_in">print</span>(my_file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&quot;&#123;\\&quot;name\\&quot;: \\&quot;Bob\\&quot;, \\&quot;age\\&quot;: 20, \\&quot;Score\\&quot;: 90, \\&quot;list\\&quot;: [1, 2, 3, 4]&#125;&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="ZipFile-write"><a href="#ZipFile-write" class="headerlink" title="ZipFile.write()"></a>ZipFile.write()</h4><p>将文件写入归档，归档必须使用 <code>w</code>，<code>x</code> 或 <code>a</code> 模式打开</p>
<p>语法格式</p>
<p><code>ZipFile.write(filename, arcname=None, compress_type=None, compresslevel=None)</code></p>
<ul>
<li>filename：需要被写入归档的文件名</li>
<li>arcname：给予的归档名，默认情况下将与 filename 一致，但是不带驱动器盘符并会移除开头的路径分隔符</li>
<li>compress_type：如果给出，它将覆盖作为构造器 compression 形参对于新条目所给出的值</li>
<li>compresslevel：如果给出，也将覆盖构造器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;.idea&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;example.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> my_zip:</span><br><span class="line">    my_zip.write(<span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(os.getcwd()))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;.idea&#x27;, &#x27;example.zip&#x27;, &#x27;fibo.py&#x27;, &#x27;main.py&#x27;, &#x27;new_name.txt&#x27;, &#x27;password.txt&#x27;, &#x27;Test&#x27;, &#x27;test.json&#x27;, &#x27;__pycache__&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="ZipFile-extract"><a href="#ZipFile-extract" class="headerlink" title="ZipFile.extract()"></a>ZipFile.extract()</h4><p>从归档中提取出一个成员放入当前工作目录</p>
<p>语法格式</p>
<p><code>ZipFile.extract(member, path=None, pwd=None)</code></p>
<ul>
<li>member：必须为成员的完整名或 <code>ZipInfo</code> 对象</li>
<li>path：指定一个要提取到的不同目录</li>
<li>pwd：用于解密文件的密码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;example.zip&#x27;</span>) <span class="keyword">as</span> my_zip:</span><br><span class="line">    my_zip.extract(<span class="string">&#x27;test.json&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="ZipFile-extractall"><a href="#ZipFile-extractall" class="headerlink" title="ZipFile.extractall()"></a>ZipFile.extractall()</h4><p>从归档中提取出所有成员放入当前工作目录</p>
<p>语法格式</p>
<p><code>ZipFile.extractall(path=None, members=None, pwd=None)</code></p>
<ul>
<li>path：指定一个要提取到的不同目录</li>
<li>members：可选项，必须为 <code>namelist()</code> 所返回列表的一个子集</li>
<li>pwd：用于解密文件的密码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(<span class="string">&#x27;example.zip&#x27;</span>) <span class="keyword">as</span> my_zip:</span><br><span class="line">    my_zip.extractall()</span><br></pre></td></tr></table></figure>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>时间模块，Python 函数常用一个元组装起来的 9 组数字来处理时间</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">字段</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">4位数年</td>
<td style="text-align:center">tm_year</td>
<td style="text-align:center">2008</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">月</td>
<td style="text-align:center">tm_mon</td>
<td style="text-align:center">1 到 12</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">日</td>
<td style="text-align:center">tm_mday</td>
<td style="text-align:center">1 到 31</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">小时</td>
<td style="text-align:center">tm_hour</td>
<td style="text-align:center">0 到 23</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">分钟</td>
<td style="text-align:center">tm_min</td>
<td style="text-align:center">0 到 59</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">秒</td>
<td style="text-align:center">tm_sec</td>
<td style="text-align:center">0 到 61（60 或 61 是闰秒）</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">一周的第几日</td>
<td style="text-align:center">tm_wday</td>
<td style="text-align:center">0 到 6（0 是周一）</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">一年的第几日</td>
<td style="text-align:center">tm_yday</td>
<td style="text-align:center">1 到 366 （儒略历）</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">夏令时</td>
<td style="text-align:center">tm_isdst</td>
<td style="text-align:center">-1, 0, 1, -1 是决定是否为夏令时的旗帜</td>
</tr>
</tbody>
</table>
</div>
<h4 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h4><p>用于获取当前时间戳，时间戳单位最适于做日期运算。但 1970 年之前的日期就无法以此表示了。太遥远的日期也不行，UNIX 和 Windows 只支持到 2038 年</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ticks = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前时间戳为：&quot;</span>, ticks)</span><br><span class="line"><span class="comment"># 当前时间戳为： 1650200187.725722</span></span><br></pre></td></tr></table></figure>
<h4 id="time-localtime"><a href="#time-localtime" class="headerlink" title="time.localtime()"></a>time.localtime()</h4><p>从返回浮点数的时间戳方式向时间元组转换，只需将浮点数传递给 <code>localtime()</code> 之类的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">localtime = time.localtime(time.time())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;本地时间为：&#x27;</span>, localtime)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">本地时间为： time.struct_time(tm_year=2022, tm_mon=4, tm_mday=17, tm_hour=21, tm_min=7, tm_sec=9, tm_wday=6, tm_yday=107, tm_isdst=0)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="time-asctime"><a href="#time-asctime" class="headerlink" title="time.asctime()"></a>time.asctime()</h4><p>转换由 <code>gmtime()</code> 或 <code>localtime()</code> 所返回的表示时间的元组或 <code>struct_time</code> 为以下形式的字符串 <code>Sun Jun 20 23:21:05 1993</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">localtime = time.asctime(time.localtime(time.time()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;本地时间为：&#x27;</span>, localtime)</span><br><span class="line"><span class="comment"># 本地时间为： Sun Apr 17 21:16:06 2022</span></span><br></pre></td></tr></table></figure>
<h4 id="time-strftime"><a href="#time-strftime" class="headerlink" title="time.strftime()"></a>time.strftime()</h4><p>转换一个元组或 <code>struct_time</code> 表示的由 <code>gmtime()</code> 或 <code>localtime()</code> 返回的时间到由 format 参数指定的字符串</p>
<p>Python3 中时间日期格式化符号</p>
<ul>
<li><code>%y</code> 两位数的年份表示（00-99）</li>
<li><code>%Y</code> 四位数的年份表示（000-9999）</li>
<li><code>%m</code> 月份（01-12）</li>
<li><code>%d</code> 月内中的一天（0-31）</li>
<li><code>%H</code> 24小时制小时数（0-23）</li>
<li><code>%I</code> 12小时制小时数（01-12）</li>
<li><code>%M</code> 分钟数（00=59）</li>
<li><code>%S</code> 秒（00-59）</li>
<li><code>%a</code> 本地简化星期名称</li>
<li><code>%A</code> 本地完整星期名称</li>
<li><code>%b</code> 本地简化的月份名称</li>
<li><code>%B</code> 本地完整的月份名称</li>
<li><code>%c</code> 本地相应的日期表示和时间表示</li>
<li><code>%j</code> 年内的一天（001-366）</li>
<li><code>%p</code> 本地A.M.或P.M.的等价符</li>
<li><code>%U</code> 一年中的星期数（00-53）星期天为星期的开始</li>
<li><code>%w</code> 星期（0-6），星期天为星期的开始</li>
<li><code>%W</code> 一年中的星期数（00-53）星期一为星期的开始</li>
<li><code>%x</code> 本地相应的日期表示</li>
<li><code>%X</code> 本地相应的时间表示</li>
<li><code>%Z</code> 当前时区的名称</li>
<li><code>%%</code> %号本身</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class="line"><span class="comment"># 2022-04-17 21:21:22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line"><span class="comment"># Sun Apr 17 21:21:22 2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.strptime(a, <span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br><span class="line"><span class="comment"># 1459175064.0</span></span><br></pre></td></tr></table></figure>
<h4 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h4><p>调用该方法的线程将被暂停执行，单位是秒。参数可以是浮点数，以表示更精确的睡眠时长</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="comment"># 1650217747.3387601</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="comment"># 1650217752.344309</span></span><br></pre></td></tr></table></figure>
<h3 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h3><p>该模块可以用来输出日历，并提供日历相关的实用函数。默认情况下，这些日历把星期一当作一周的第一天，星期天为一周的最后一天，更改设置需要调用 <code>calendar.setfirstweekday()</code> 函数</p>
<h4 id="class-calendar-TextCalendar"><a href="#class-calendar-TextCalendar" class="headerlink" title="class calendar.TextCalendar()"></a>class calendar.TextCalendar()</h4><p>可以使用这个类生成纯文本日历。<code>TextCalendar</code> 实例有以下方法</p>
<h5 id="formatmonth"><a href="#formatmonth" class="headerlink" title="formatmonth()"></a>formatmonth()</h5><p>返回一个多行字符串来表示指定年月的日历</p>
<p>语法格式</p>
<p><code>formatmonth(theyear, themonth, w=0, l=0)</code></p>
<ul>
<li>theyear：指定的年</li>
<li>themonth：指定的月份</li>
<li>w：日期的宽度，但始终保持日期居中</li>
<li>l：指定了每星期占用的行数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">my_calendar = calendar.TextCalendar()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_calendar.formatmonth(<span class="number">2022</span>, <span class="number">1</span>, w=<span class="number">0</span>, l=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    January 2022</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                1  2</span></span><br><span class="line"><span class="string"> 3  4  5  6  7  8  9</span></span><br><span class="line"><span class="string">10 11 12 13 14 15 16</span></span><br><span class="line"><span class="string">17 18 19 20 21 22 23</span></span><br><span class="line"><span class="string">24 25 26 27 28 29 30</span></span><br><span class="line"><span class="string">31</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="promonth"><a href="#promonth" class="headerlink" title="promonth()"></a>promonth()</h5><p>与 <code>formatmonth()</code> 方法一样，返回一个月的日历。但是该方法有返回值，且不需要 <code>print()</code> 即可输出</p>
<p>语法格式</p>
<p><code>prmonth(theyear, themonth, w=0, l=0)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">my_calendar = calendar.TextCalendar()</span><br><span class="line"></span><br><span class="line">my_calendar.prmonth(<span class="number">2022</span>, <span class="number">2</span>, w=<span class="number">0</span>, l=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   February 2022</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">    1  2  3  4  5  6</span></span><br><span class="line"><span class="string"> 7  8  9 10 11 12 13</span></span><br><span class="line"><span class="string">14 15 16 17 18 19 20</span></span><br><span class="line"><span class="string">21 22 23 24 25 26 27</span></span><br><span class="line"><span class="string">28</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="fromatyear"><a href="#fromatyear" class="headerlink" title="fromatyear()"></a>fromatyear()</h5><p>返回一个多行字符串，这个字符串为一个 m 列日历</p>
<p>语法格式</p>
<p><code>formatyear(theyear, w=2, l=1, c=6, m=3)</code></p>
<ul>
<li>theyear：需要指定的年份</li>
<li>w：日期列数</li>
<li>l：周的行数</li>
<li>c：月之间的间隔</li>
<li>m：一行的月份列数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">my_calendar = calendar.TextCalendar()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_calendar.formatyear(<span class="number">2022</span>, w=<span class="number">2</span>, l=<span class="number">1</span>, c=<span class="number">6</span>, m=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                  2022</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      January                   February                   March</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                1  2          1  2  3  4  5  6          1  2  3  4  5  6</span></span><br><span class="line"><span class="string"> 3  4  5  6  7  8  9       7  8  9 10 11 12 13       7  8  9 10 11 12 13</span></span><br><span class="line"><span class="string">10 11 12 13 14 15 16      14 15 16 17 18 19 20      14 15 16 17 18 19 20</span></span><br><span class="line"><span class="string">17 18 19 20 21 22 23      21 22 23 24 25 26 27      21 22 23 24 25 26 27</span></span><br><span class="line"><span class="string">24 25 26 27 28 29 30      28                        28 29 30 31</span></span><br><span class="line"><span class="string">31</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       April                      May                       June</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">             1  2  3                         1             1  2  3  4  5</span></span><br><span class="line"><span class="string"> 4  5  6  7  8  9 10       2  3  4  5  6  7  8       6  7  8  9 10 11 12</span></span><br><span class="line"><span class="string">11 12 13 14 15 16 17       9 10 11 12 13 14 15      13 14 15 16 17 18 19</span></span><br><span class="line"><span class="string">18 19 20 21 22 23 24      16 17 18 19 20 21 22      20 21 22 23 24 25 26</span></span><br><span class="line"><span class="string">25 26 27 28 29 30         23 24 25 26 27 28 29      27 28 29 30</span></span><br><span class="line"><span class="string">                          30 31</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        July                     August                  September</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">             1  2  3       1  2  3  4  5  6  7                1  2  3  4</span></span><br><span class="line"><span class="string"> 4  5  6  7  8  9 10       8  9 10 11 12 13 14       5  6  7  8  9 10 11</span></span><br><span class="line"><span class="string">11 12 13 14 15 16 17      15 16 17 18 19 20 21      12 13 14 15 16 17 18</span></span><br><span class="line"><span class="string">18 19 20 21 22 23 24      22 23 24 25 26 27 28      19 20 21 22 23 24 25</span></span><br><span class="line"><span class="string">25 26 27 28 29 30 31      29 30 31                  26 27 28 29 30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      October                   November                  December</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                1  2          1  2  3  4  5  6                1  2  3  4</span></span><br><span class="line"><span class="string"> 3  4  5  6  7  8  9       7  8  9 10 11 12 13       5  6  7  8  9 10 11</span></span><br><span class="line"><span class="string">10 11 12 13 14 15 16      14 15 16 17 18 19 20      12 13 14 15 16 17 18</span></span><br><span class="line"><span class="string">17 18 19 20 21 22 23      21 22 23 24 25 26 27      19 20 21 22 23 24 25</span></span><br><span class="line"><span class="string">24 25 26 27 28 29 30      28 29 30                  26 27 28 29 30 31</span></span><br><span class="line"><span class="string">31</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="pryear"><a href="#pryear" class="headerlink" title="pryear()"></a>pryear()</h5><p>与 <code>formatyear()</code> 方法一样，返回一整年的日历。但是该方法有返回值且不需要 <code>print()</code> 即可输出</p>
<p>语法格式</p>
<p><code>pryear(theyear, w=2, l=1, c=6, m=3)</code></p>
<ul>
<li>theyear：需要指定的年份</li>
<li>w：日期列数</li>
<li>l：周的行数</li>
<li>c：月之间的间隔</li>
<li>m：一行的月份列数</li>
</ul>
<h4 id="calendar-calendar"><a href="#calendar-calendar" class="headerlink" title="calendar.calendar()"></a>calendar.calendar()</h4><p>使用 <code>TextCalendar</code> 类的 <code>formatmonth()</code> 以多行字符串形式返回月份日历</p>
<p>语法格式</p>
<p><code>calendar.calendar(year, w, l, c)</code></p>
<ul>
<li>year：指定的年份</li>
<li>w：日期列数</li>
<li>l：周的行数</li>
<li>c：月之间的间隔</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calendar.calendar(<span class="number">2022</span>, w=<span class="number">2</span>, l=<span class="number">1</span>, c=<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                                  2022</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      January                   February                   March</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                1  2          1  2  3  4  5  6          1  2  3  4  5  6</span></span><br><span class="line"><span class="string"> 3  4  5  6  7  8  9       7  8  9 10 11 12 13       7  8  9 10 11 12 13</span></span><br><span class="line"><span class="string">10 11 12 13 14 15 16      14 15 16 17 18 19 20      14 15 16 17 18 19 20</span></span><br><span class="line"><span class="string">17 18 19 20 21 22 23      21 22 23 24 25 26 27      21 22 23 24 25 26 27</span></span><br><span class="line"><span class="string">24 25 26 27 28 29 30      28                        28 29 30 31</span></span><br><span class="line"><span class="string">31</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       April                      May                       June</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">             1  2  3                         1             1  2  3  4  5</span></span><br><span class="line"><span class="string"> 4  5  6  7  8  9 10       2  3  4  5  6  7  8       6  7  8  9 10 11 12</span></span><br><span class="line"><span class="string">11 12 13 14 15 16 17       9 10 11 12 13 14 15      13 14 15 16 17 18 19</span></span><br><span class="line"><span class="string">18 19 20 21 22 23 24      16 17 18 19 20 21 22      20 21 22 23 24 25 26</span></span><br><span class="line"><span class="string">25 26 27 28 29 30         23 24 25 26 27 28 29      27 28 29 30</span></span><br><span class="line"><span class="string">                          30 31</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        July                     August                  September</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">             1  2  3       1  2  3  4  5  6  7                1  2  3  4</span></span><br><span class="line"><span class="string"> 4  5  6  7  8  9 10       8  9 10 11 12 13 14       5  6  7  8  9 10 11</span></span><br><span class="line"><span class="string">11 12 13 14 15 16 17      15 16 17 18 19 20 21      12 13 14 15 16 17 18</span></span><br><span class="line"><span class="string">18 19 20 21 22 23 24      22 23 24 25 26 27 28      19 20 21 22 23 24 25</span></span><br><span class="line"><span class="string">25 26 27 28 29 30 31      29 30 31                  26 27 28 29 30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      October                   November                  December</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                1  2          1  2  3  4  5  6                1  2  3  4</span></span><br><span class="line"><span class="string"> 3  4  5  6  7  8  9       7  8  9 10 11 12 13       5  6  7  8  9 10 11</span></span><br><span class="line"><span class="string">10 11 12 13 14 15 16      14 15 16 17 18 19 20      12 13 14 15 16 17 18</span></span><br><span class="line"><span class="string">17 18 19 20 21 22 23      21 22 23 24 25 26 27      19 20 21 22 23 24 25</span></span><br><span class="line"><span class="string">24 25 26 27 28 29 30      28 29 30                  26 27 28 29 30 31</span></span><br><span class="line"><span class="string">31</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="calendar-month"><a href="#calendar-month" class="headerlink" title="calendar.month()"></a>calendar.month()</h4><p>使用 <code>TextCalendar</code> 类的 <code>formatmonth()</code> 以多行字符串形式返回月份日历</p>
<p>语法格式</p>
<p><code>calendar.month(theyear, themonth, w=0, l=0)</code></p>
<ul>
<li>theyear：指定的年</li>
<li>themonth：指定的月份</li>
<li>w：日期的宽度，但始终保持日期居中</li>
<li>l：指定了每星期占用的行数</li>
</ul>
<h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h3><p><code>operator</code> 模块提供了一套与 Python 的内置运算符对应的高效率函数。例如，<code>operator.add(x,y)</code> 与 <code>x+y</code> 相同。</p>
<p>函数包含的种类有：对象的比较运算、逻辑运算、数学运算以及序列运算</p>
<h4 id="operator-lt-a-b"><a href="#operator-lt-a-b" class="headerlink" title="operator.lt(a, b)"></a>operator.lt(a, b)</h4><p>等价于 <code>a&lt;b</code></p>
<h4 id="operator-le-a-b"><a href="#operator-le-a-b" class="headerlink" title="operator.le(a, b)"></a>operator.le(a, b)</h4><p>等价于 <code>a&lt;=b</code></p>
<h4 id="operator-eq-a-b"><a href="#operator-eq-a-b" class="headerlink" title="operator.eq(a, b)"></a>operator.eq(a, b)</h4><p>等价于 <code>a==b</code></p>
<h4 id="operator-ne-a-b"><a href="#operator-ne-a-b" class="headerlink" title="operator.ne(a, b)"></a>operator.ne(a, b)</h4><p>等价于 <code>a!=b</code></p>
<h4 id="operator-gt-a-b"><a href="#operator-gt-a-b" class="headerlink" title="operator.gt(a, b)"></a>operator.gt(a, b)</h4><p>等价于 <code>a&gt;b</code></p>
<h4 id="operator-ge-a-b"><a href="#operator-ge-a-b" class="headerlink" title="operator.ge(a, b)"></a>operator.ge(a, b)</h4><p>等价于 <code>a&gt;=b</code></p>
<h4 id="operator-not-obj"><a href="#operator-not-obj" class="headerlink" title="operator.not(obj)"></a>operator.not(obj)</h4><p>返回 <code>not obj</code></p>
<h4 id="operator-truth-obj"><a href="#operator-truth-obj" class="headerlink" title="operator.truth(obj)"></a>operator.truth(obj)</h4><p><code>obj</code> 为真返回 True，否则返回 False</p>
<h4 id="operator-is-a-b"><a href="#operator-is-a-b" class="headerlink" title="operator.is_(a, b)"></a>operator.is_(a, b)</h4><p>返回 <code>a is b</code>，检测对象标识</p>
<h4 id="operator-is-not-a-b"><a href="#operator-is-not-a-b" class="headerlink" title="operator.is_not(a, b)"></a>operator.is_not(a, b)</h4><p>返回 <code>a is not b</code>，检测对象标识</p>
<h4 id="operator-abs-obj"><a href="#operator-abs-obj" class="headerlink" title="operator.abs(obj)"></a>operator.abs(obj)</h4><p>返回 <code>obj</code> 的绝对值</p>
<h4 id="operator-add-a-b"><a href="#operator-add-a-b" class="headerlink" title="operator.add(a, b)"></a>operator.add(a, b)</h4><p>返回 <code>a+b</code></p>
<h4 id="operator-and-a-b"><a href="#operator-and-a-b" class="headerlink" title="operator.and_(a, b)"></a>operator.and_(a, b)</h4><p>返回 a，b 按位与的结果</p>
<h4 id="operator-floordiv-a-b"><a href="#operator-floordiv-a-b" class="headerlink" title="operator.floordiv(a, b)"></a>operator.floordiv(a, b)</h4><p>返回 <code>a//b</code></p>
<h4 id="operator-index-a"><a href="#operator-index-a" class="headerlink" title="operator.index(a)"></a>operator.index(a)</h4><p>返回 a 转换为整数（int）的结果</p>
<h4 id="operator-inv-obj-operator-invert-obj"><a href="#operator-inv-obj-operator-invert-obj" class="headerlink" title="operator.inv(obj), operator.invert(obj)"></a>operator.inv(obj), operator.invert(obj)</h4><p>返回 obj 按位取反的结果</p>
<h4 id="operator-lshift-a-b"><a href="#operator-lshift-a-b" class="headerlink" title="operator.lshift(a, b)"></a>operator.lshift(a, b)</h4><p>返回 a 左移 b 位的结果</p>
<h4 id="operator-rshift-a-b"><a href="#operator-rshift-a-b" class="headerlink" title="operator.rshift(a, b)"></a>operator.rshift(a, b)</h4><p>返回 a 右移 b 位的结果</p>
<h4 id="operator-mod-a-b"><a href="#operator-mod-a-b" class="headerlink" title="operator.mod(a, b)"></a>operator.mod(a, b)</h4><p>返回 <code>a%b</code></p>
<h4 id="operator-mul-a-b"><a href="#operator-mul-a-b" class="headerlink" title="operator.mul(a, b)"></a>operator.mul(a, b)</h4><p>返回 <code>a*b</code></p>
<h4 id="operator-matmul-a-b"><a href="#operator-matmul-a-b" class="headerlink" title="operator.matmul(a, b)"></a>operator.matmul(a, b)</h4><p>返回 <code>a@b</code>，矩阵乘法</p>
<h4 id="operator-neg-obj"><a href="#operator-neg-obj" class="headerlink" title="operator.neg(obj)"></a>operator.neg(obj)</h4><p>返回 obj 取负的结果</p>
<h4 id="operator-or-a-b"><a href="#operator-or-a-b" class="headerlink" title="operator.or_(a, b)"></a>operator.or_(a, b)</h4><p>返回 a, b 按位或的结果</p>
<h4 id="operator-pos-obj"><a href="#operator-pos-obj" class="headerlink" title="operator.pos(obj)"></a>operator.pos(obj)</h4><p>返回 obj 取正的结果</p>
<h4 id="operator-pow-a-b"><a href="#operator-pow-a-b" class="headerlink" title="operator.pow(a, b)"></a>operator.pow(a, b)</h4><p>返回 <code>a**b</code></p>
<h4 id="operator-sub-a-b"><a href="#operator-sub-a-b" class="headerlink" title="operator.sub(a, b)"></a>operator.sub(a, b)</h4><p>返回 <code>a-b</code></p>
<h4 id="operator-truediv-a-b"><a href="#operator-truediv-a-b" class="headerlink" title="operator.truediv(a, b)"></a>operator.truediv(a, b)</h4><p>返回 <code>a/b</code></p>
<h4 id="operator-xor-a-b"><a href="#operator-xor-a-b" class="headerlink" title="operator.xor(a, b)"></a>operator.xor(a, b)</h4><p>返回 a，b按位异或的结果</p>
<h4 id="operator-concat-a-b"><a href="#operator-concat-a-b" class="headerlink" title="operator.concat(a, b)"></a>operator.concat(a, b)</h4><p>对于序列 a, b 返回 <code>a+b</code></p>
<h4 id="operator-contains-a-b"><a href="#operator-contains-a-b" class="headerlink" title="operator.contains(a, b)"></a>operator.contains(a, b)</h4><p>返回 <code>b in a</code> 检测的结果，需要注意操作数是反序的</p>
<h4 id="operator-countOf-a-b"><a href="#operator-countOf-a-b" class="headerlink" title="operator.countOf(a, b)"></a>operator.countOf(a, b)</h4><p>返回 b 在 a 中出现的次数</p>
<h4 id="operator-delitem-a-b"><a href="#operator-delitem-a-b" class="headerlink" title="operator.delitem(a, b)"></a>operator.delitem(a, b)</h4><p>移除 a 中索引号为 b 的值</p>
<h4 id="operator-getitem-a-b"><a href="#operator-getitem-a-b" class="headerlink" title="operator.getitem(a, b)"></a>operator.getitem(a, b)</h4><p>返回 a 中索引为 b 的值</p>
<h4 id="operator-indexOf-a-b"><a href="#operator-indexOf-a-b" class="headerlink" title="operator.indexOf(a, b)"></a>operator.indexOf(a, b)</h4><p>返回 b 在 a 中首次出现所在的索引号</p>
<h4 id="operator-setitem-a-b-c"><a href="#operator-setitem-a-b-c" class="headerlink" title="operator.setitem(a, b, c)"></a>operator.setitem(a, b, c)</h4><p>将 a 中索引号为 b 的值设为 c</p>
<h4 id="operator-length-hint-obj-default-0"><a href="#operator-length-hint-obj-default-0" class="headerlink" title="operator.length_hint(obj, default=0)"></a>operator.length_hint(obj, default=0)</h4><p>返回对象 obj 的估计长度。首先尝试返回其实际长度，再使用 <code>object.__length_hint__()</code> 得出估计值，最后返回默认值</p>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3学习笔记-5</title>
    <url>/2022/04/17/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/</url>
    <content><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象（Object Oriented）是软件开发方法，一种编程范式</p>
<ul>
<li>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例</li>
<li>方法：类中定义的函数</li>
<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用</li>
<li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据</li>
<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</li>
<li>局部变量：定义在方法中的变量，只作用于当前实例的类</li>
<li>实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量</li>
<li>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）</li>
<li>实例化：创建一个类的实例，类的具体对象</li>
<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法</li>
</ul>
<span id="more"></span>
<h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>语法格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>
<h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p>类对象支持两种操作：属性引用和实例化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    a = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个对象</span></span><br><span class="line">my_class = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问类属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MyClass 的属性：&#x27;</span>, my_class.a)</span><br><span class="line"><span class="comment"># MyClass 的属性： 12345</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MyClass 的方法：&#x27;</span>, my_class.f())</span><br><span class="line"><span class="comment"># MyClass 的方法： Hello World!</span></span><br></pre></td></tr></table></figure>
<p>实例化操作（“调用”类对象）会创建一个空对象。许多类喜欢创建带有特定初始状态的自定义实例。因此类定义可能包含一个名为 <code>__init__()</code> 的特殊方法</p>
<p>当一个类定义了 <code>__init__()</code> 方法时，类的实例化操作会自动为新创建的实例发起调用 <code>__init__()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, realpart, imagpart</span>):</span><br><span class="line">        self.r = realpart</span><br><span class="line">        self.i = imagpart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = Complex(<span class="number">3.0</span>, -<span class="number">4.5</span>)</span><br><span class="line"><span class="built_in">print</span>(n.r, n.i)</span><br><span class="line"><span class="comment"># 3.0 -4.5</span></span><br></pre></td></tr></table></figure>
<h4 id="self"><a href="#self" class="headerlink" title="self"></a>self</h4><p><code>self</code> 代表类的实例，而非类。类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，按照惯例它的名称是 <code>self</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__class__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Test object at 0x0000017F3E722650&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Test&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>从以上执行结果可知，<code>self</code> 代表的是类的实例，代表当前对象的地址，而 <code>self.__class__</code> 则指向类。<code>self</code> 并不是 Python 的关键字，换成其他值也是可以正常执行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prt</span>(<span class="params">other</span>):</span><br><span class="line">        <span class="built_in">print</span>(other)</span><br><span class="line">        <span class="built_in">print</span>(other.__class__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Test object at 0x000002506ED72650&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Test&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>当一个类中的方法不含 <code>self</code> 时（不接收任何参数），只能通过类去调用这个方法，因此这个方法也被称为绑定类方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;唱歌&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;跳舞&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;非绑定类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绑定类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person()</span><br><span class="line">zs.func()  <span class="comment"># 非绑定类方法</span></span><br><span class="line"><span class="comment"># zs.func2()  # 会报错</span></span><br><span class="line">Person.func2()  <span class="comment"># 绑定类方法</span></span><br></pre></td></tr></table></figure>
<h4 id="对象成员的操作"><a href="#对象成员的操作" class="headerlink" title="对象成员的操作"></a>对象成员的操作</h4><p>当实例化一个对象后，可对对象的属性进行操作，如新增一个对象属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.name, a.age)  <span class="comment"># Jack 10</span></span><br><span class="line"><span class="comment"># 新增属性</span></span><br><span class="line">a.sex = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.sex)  <span class="comment"># male</span></span><br></pre></td></tr></table></figure>
<p>也可以修改对象原有的属性，此时相当于对象新建了一个与原属性同名的属于自身的属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.name, a.age)  <span class="comment"># Jack 10</span></span><br><span class="line"><span class="comment"># 修改属性</span></span><br><span class="line">a.name = <span class="string">&quot;Jon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.name)  <span class="comment"># Jon</span></span><br><span class="line">aa = A()</span><br><span class="line"><span class="built_in">print</span>(aa.name)  <span class="comment"># Jack</span></span><br></pre></td></tr></table></figure>
<p>属于对象本身的属性可删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.name, a.age)  <span class="comment"># Jack 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增属性</span></span><br><span class="line">a.sex = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.sex)  <span class="comment"># male</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改属性</span></span><br><span class="line">a.name = <span class="string">&quot;Jon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.name)  <span class="comment"># Jon</span></span><br><span class="line">aa = A()</span><br><span class="line"><span class="built_in">print</span>(aa.name)  <span class="comment"># Jack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除属性</span></span><br><span class="line"><span class="keyword">del</span> a.name</span><br><span class="line"><span class="keyword">del</span> a.sex</span><br></pre></td></tr></table></figure>
<p>在上述例子中，如果继续进行删除 <code>del a.age</code> 等操作，将会报错，因为这些属性属于类而非对象本身</p>
<p>实际上，创建对象的时候，并不会把类中的属性和方法复制一份给对象，而是在对象中引用父类的方法。因此在访问对象的属性时，会先去找对象自己的属性，如果没有就去找对应的类的属性和方法</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在面向对象中，一个类去继承父类，那么这个类就拥有了父类中的所有成员（除了私有成员）</p>
<p>被其他类继承的类，称为 <em>父类</em>、 <em>基类</em> 或 <em>超类</em></p>
<p>继承其他类的类，称为 <em>子类</em> 或 <em>派生类</em></p>
<ul>
<li>在不指定继承的父类时，所有类都继承自 object 类（系统提供）</li>
<li>子类继承了父类后，就拥有了父类中的所有成员包括魔术方法（除了私有成员）</li>
<li>子类继承父类后，并不会把父类的成员复制给子类，而是去引用</li>
<li>子类继承父类后可以重写父类中的方法</li>
<li>子类重写父类的方法，依然可以使用 <code>super().父类方法名()</code> 的方式调用父类方法</li>
<li>子类中如果定义了父类中不存在的方法，称为对父类的扩展</li>
</ul>
<h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><p>派生类的定义如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(<span class="title class_ inherited__">BaseClassName</span>):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>
<p>BaseClassName 必须与派生类定义在一个作用域内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment"># 定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构函</span></span><br><span class="line">        people.__init__(self, n, a, w)</span><br><span class="line">        self.grade = g</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = student(<span class="string">&#x27;ken&#x27;</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">s.speak()</span><br><span class="line"><span class="comment"># ken 说: 我 10 岁了，我在读 3 年级</span></span><br></pre></td></tr></table></figure>
<h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><p>Python 同样有限的支持多继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(Base1, Base2,Base3):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br></pre></td></tr></table></figure>
<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment"># 定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> % (self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构函</span></span><br><span class="line">        people.__init__(self, n, a, w)</span><br><span class="line">        self.grade = g</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span> % (self.name, self.age, self.grade))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span> % (self.name, self.topic))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker, student):</span><br><span class="line">    a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, w, g, t</span>):</span><br><span class="line">        student.__init__(self, n, a, w, g)</span><br><span class="line">        speaker.__init__(self, n, t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>, <span class="number">25</span>, <span class="number">80</span>, <span class="number">4</span>, <span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()  <span class="comment"># 方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br><span class="line"><span class="comment"># 我叫 Tim，我是一个演说家，我演讲的主题是 Python</span></span><br></pre></td></tr></table></figure>
<h4 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h4><p><code>super()</code> 函数是用于调用父类（超类）的一个方法。<code>super()</code> 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等问题</p>
<p>语法格式</p>
<p><code>super(type[, object-or-type])</code></p>
<ul>
<li>type：类</li>
<li>object-or-type：类，一般是 self</li>
</ul>
<p><code>super()</code> 函数返回一个代理对象，它会将方法调用委托给 type 的父类或兄弟类。object-or-type 确定用于搜索的 MRO。搜索会从 type 之后的类开始。举例来说，如果 object-or-type 的 MRO 为 <code>D -&gt; B -&gt; C -&gt; A -&gt; object</code> 并且 type 的值为 <code>B</code>，则 <code>super()</code> 将会搜索 <code>C -&gt; A -&gt; object</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = x + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="built_in">super</span>().add(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.add(<span class="number">2</span>)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
<h4 id="MRO"><a href="#MRO" class="headerlink" title="MRO"></a>MRO</h4><p>方法解析顺序（Method Resolution Order），简称 MRO。自 Python 2.3 版本起，对新式类采用了 C3 算法</p>
<blockquote>
<p>C3 superclass linearization is called C3 because it “is consistent with three properties”:</p>
<ul>
<li>a consistent extended precedence graph,</li>
<li>preservation of local precedence order, and</li>
<li>fitting a monotonicity criterion.</li>
</ul>
<p>C3算法得名于它实现了一致性于三种重要特性：</p>
<ul>
<li>基于一致性扩展的优先图，</li>
<li>局部优先原则（比如A继承B和C，C继承B，那么A读取父类方法，应该优先使用C的方法而不是B的方法），</li>
<li>单调性原则（即子类不改变父类的方法搜索顺序）。</li>
</ul>
</blockquote>
<p>MRO 可以通过两种方式获取</p>
<ul>
<li><code>类名.__mro__</code></li>
<li><code>类名.mro()</code></li>
</ul>
<h5 id="基于一致性扩展的优先图"><a href="#基于一致性扩展的优先图" class="headerlink" title="基于一致性扩展的优先图"></a>基于一致性扩展的优先图</h5><p>将每一对 class 之间都画上箭头，画箭头的方式取决于在他们的最小公共子类上这两个类或他们的子类的优先级顺序</p>
<p>最小公共子类（假设 C）：这个类（C）是他们（假设 A，B）的子类，并且这个类（C）的所有父类都不是他们（A，B）共同的子类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pane</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">scrolling_mixin</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">editing_mixin</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">scrollable_pane</span>(pane, scrolling_mixin):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">editable_pane</span>(pane, editing_mixin):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">editable_scrollable_pane</span>(scrollable_pane, editable_pane):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(editable_scrollable_pane.mro())</span><br><span class="line"><span class="comment"># [&lt;class &#x27;__main__.editable_scrollable_pane&#x27;&gt;, &lt;class &#x27;__main__.scrollable_pane&#x27;&gt;,</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.editable_pane&#x27;&gt;, &lt;class &#x27;__main__.pane&#x27;&gt;, </span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.scrolling_mixin&#x27;&gt;, &lt;class &#x27;__main__.editing_mixin&#x27;&gt;, </span></span><br><span class="line"><span class="comment"># &lt;class &#x27;object&#x27;&gt;]</span></span><br></pre></td></tr></table></figure>
<p>如上例所述，这条规则规定了 <code>scrolling_mixin</code> 和 <code>editing_mixin</code> 的优先级顺序。因为他们两个的最小公共子类为 <code>editable_scrollable_pane</code>，因此在 <code>editable_scrollable_pane</code> 的 MRO 中，只要 <code>scrolling_mixin</code> 或其子类排在 <code>editing_mixin</code> 之前，那么 <code>scrolling_mixin</code> 就比 <code>scrolling_mixin</code> 靠前</p>
<h5 id="局部优先原则"><a href="#局部优先原则" class="headerlink" title="局部优先原则"></a>局部优先原则</h5><p>保证局部的优先顺序，当一个 class 继承了多个 class 时，优先选择写在前面的 class。同时需要保证该顺序被其子类继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>(A, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = M()</span><br><span class="line"><span class="built_in">print</span>(M.mro())</span><br><span class="line"><span class="comment"># [&lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line">m.say()</span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure>
<p>在上述例子中，M 优先选择 A 中的方法，同时，如果 M 有子类，那么也必须满足其 MRO 中 A 在 B 的前面</p>
<h5 id="单调性原则"><a href="#单调性原则" class="headerlink" title="单调性原则"></a>单调性原则</h5><p>保证单调性。即任何一个 class 使用的方法必须来自于他的直接父类，同时，子类不应当改变父类的 MRO</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(C, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(B, A):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 D 的 MRO 为 DCAB，那么 M 的 MRO 里，A 也必须在 B 前面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>(<span class="title class_ inherited__">D</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种情况下，因为 D 的 MRO 中 A 在 B 之前，而在 E 的 MRO 中 B 在 A 之前，就会报错</span></span><br><span class="line"><span class="comment"># class M(D, E):</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment"># TypeError: Cannot create a consistent method resolution</span></span><br><span class="line"><span class="comment"># order (MRO) for bases A, B</span></span><br><span class="line"></span><br><span class="line">m = M()</span><br><span class="line"><span class="built_in">print</span>(M.mro())</span><br><span class="line"><span class="comment"># [&lt;class &#x27;__main__.M&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;,</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line">m.say()</span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure>
<h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>如果父类方法的功能不能满足需求，可以在子类重写父类的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:  <span class="comment"># 定义父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):  <span class="comment"># 定义子类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Child()  <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()  <span class="comment"># 子类调用重写方法</span></span><br><span class="line"><span class="comment"># 调用子类方法</span></span><br><span class="line"><span class="built_in">super</span>(Child, c).myMethod()  <span class="comment"># 用子类对象调用父类已被覆盖的方法</span></span><br><span class="line"><span class="comment"># 调用父类方法</span></span><br></pre></td></tr></table></figure>
<h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>Python 同样支持运算符重载，我们可以对类的专有方法进行重载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = Vector(<span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>, -<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v1 + v2)</span><br><span class="line"><span class="comment"># Vector (7, 8)</span></span><br></pre></td></tr></table></figure>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装就是使用特殊的语法，对成员属性和成员方法进行包装，以达到保护和隐藏的目的</p>
<p>被封装的成员只是限制了访问的权限，并不是不让访问。通常情况下，被封装的成员主要供内部使用</p>
<h4 id="封装的级别"><a href="#封装的级别" class="headerlink" title="封装的级别"></a>封装的级别</h4><ul>
<li>public    公有的</li>
<li>protected 受保护的（实际上Python 中没有该类）</li>
<li>private   私有的</li>
</ul>
<h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><p>大多数 Python 代码都遵循这样一个约定：带有一个下划线的名称 (例如 <code>_spam</code>) 应该被当作是 API 的非公有部分 (无论它是函数、方法或是数据成员)。 这应当被视为一个实现细节，可能不经通知即加以改变</p>
<p>由于存在对于类私有成员的有效使用场景（例如避免名称与子类所定义的名称相冲突），因此存在对此种机制的有限支持，称为 <em>名称改写</em>。 任何形式为 <code>__spam</code> 的标识符（至少带有两个前缀下划线，至多一个后缀下划线）的文本将被替换为 <code>_classname__spam</code>，其中 <code>classname</code> 为去除了前缀下划线的当前类名称。 这种改写不考虑标识符的句法位置，只要它出现在类定义内部就会进行</p>
<p>名称改写有助于让子类重载方法而不破坏类内方法调用。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mapping</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        self.items_list = []</span><br><span class="line">        self.__update(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">            self.items_list.append(item)</span><br><span class="line"></span><br><span class="line">    __update = update  <span class="comment"># private copy of original update() method</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MappingSubclass</span>(<span class="title class_ inherited__">Mapping</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, keys, values</span>):</span><br><span class="line">        <span class="comment"># provides new signature for update()</span></span><br><span class="line">        <span class="comment"># but does not break __init__()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>(keys, values):</span><br><span class="line">            self.items_list.append(item)</span><br></pre></td></tr></table></figure>
<h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><p>以两个下划线开头声明的方法为私有方法，只能在类的内部调用，不能在类的外部调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">        self.name_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>, self.__name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add_name</span>(<span class="params">self</span>):</span><br><span class="line">        self.name_list.append(self.__name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;Test&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">a.print_name() <span class="comment"># name: Test</span></span><br><span class="line"><span class="comment"># 无法直接调用 add_name()</span></span><br><span class="line"><span class="comment"># a.add_name()</span></span><br><span class="line"><span class="comment"># 但可通过其他方式调用，即 Python 没有真正的私有变量，私有方法</span></span><br><span class="line">a._A__add_name()</span><br><span class="line"><span class="built_in">print</span>(a.name_list) <span class="comment"># [&#x27;Test&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>魔术方法即不需要手动调用就会自动执行的方法</p>
<ul>
<li><code>__new__()</code> 构造方法，实例化对象时触发</li>
<li><code>__init__()</code> 构造函数，在生成对象时调用</li>
<li><code>__del__()</code> 析构函数，释放对象时使用</li>
<li><code>__repr__()</code> 打印，转换</li>
<li><code>__setitem__()</code> 按照索引赋值</li>
<li><code>__getitem__()</code> 按照索引获取值</li>
<li><code>__len__()</code> 获得长度</li>
<li><code>__cmp__()</code> 比较运算</li>
<li><code>__call__()</code> 函数调用</li>
<li><code>__add__()</code> 加运算</li>
<li><code>__sub__()</code> 减运算</li>
<li><code>__mul__()</code> 乘运算</li>
<li><code>__truediv__()</code> 除运算</li>
<li><code>__mod__()</code> 求余运算</li>
<li><code>__pow__()</code> 乘方</li>
<li><code>__getattribute__()</code> 当访问类的属性时返回指定值</li>
<li><code>__getattr__()</code> 当用户访问不存在的属性时的行为</li>
<li><code>__setattr__()</code> 定义当一个属性被设置时的行为</li>
<li><code>__delattr__()</code> 定义当一个属性被删除时的行为</li>
</ul>
<h4 id="new"><a href="#new" class="headerlink" title="__new__()"></a>__new__()</h4><ol>
<li><code>__new__()</code> 是在一个对象实例化的时候所调用的第一个方法</li>
<li>它的第一个参数是这个类（cls），其他的参数是用来直接传递给 <code>__init__()</code> 方法</li>
<li><code>__new__()</code> 决定是否要使用该 <code>__init__()</code> 方法，因为 <code>__new__()</code> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <code>__new__</code> 没有返回实例对象，则 <code>__init__()</code> 不会被调用</li>
<li>如果要实例化当前类对象，需要返回 <code>object.__new__(cls)</code></li>
<li><code>__new__()</code> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 new 方法&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>, args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>, kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 init 方法&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 new 方法&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;args:&#x27;</span>, args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;kwargs:&#x27;</span>, kwargs)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 init 方法&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不返回 object.__new__(cls) 时，执行完 __new__() 方法之后并不执行 __init__() 方法，即对象创建失败</span></span><br><span class="line">d = Demo(<span class="string">&#x27;张三&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="comment"># 执行 new 方法</span></span><br><span class="line"><span class="comment"># args: (&#x27;张三&#x27;, 19)</span></span><br><span class="line"><span class="comment"># kwargs: &#123;&#x27;k&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 object.__new__(cls)</span></span><br><span class="line">d2 = Demo2(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 执行 new 方法</span></span><br><span class="line"><span class="comment"># args: (&#x27;李四&#x27;, 20)</span></span><br><span class="line"><span class="comment"># kwargs: &#123;&#125;</span></span><br><span class="line"><span class="comment"># 执行 init 方法</span></span><br></pre></td></tr></table></figure>
<h4 id="init"><a href="#init" class="headerlink" title="__init__()"></a>__init__()</h4><p>作为一个构造器，当一个实例被创建时调用的初始化方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;构造函数已执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, self.age, self.sex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)  <span class="comment"># 构造函数已执行</span></span><br><span class="line">zs.print_info()  <span class="comment"># 张三 18 male</span></span><br></pre></td></tr></table></figure>
<h4 id="del"><a href="#del" class="headerlink" title="__del__()"></a>__del__()</h4><p>析构方法，在对象被销毁时自动触发</p>
<ul>
<li>当程序执行完毕，内存中的所有资源都会被释放销毁，此时如果对象存在，则会执行析构函数</li>
<li>当使用 <code>del</code> 删除对象时，调用析构函数</li>
<li>当对象不再被引用时，会自动销毁，此时执行析构函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;构造函数已执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, self.age, self.sex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;执行析构函数，当前名称为：<span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 del</span></span><br><span class="line"><span class="keyword">del</span> zs</span><br><span class="line"><span class="comment"># 构造函数已执行</span></span><br><span class="line"><span class="comment"># 执行析构函数，当前名称为：张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不引用自动释放</span></span><br><span class="line">Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="comment"># 构造函数已执行</span></span><br><span class="line"><span class="comment"># 执行析构函数，当前名称为：李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序结束自动释放</span></span><br><span class="line">ww = Person(<span class="string">&#x27;王五&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="comment"># 构造函数已执行</span></span><br><span class="line"><span class="comment"># 执行析构函数，当前名称为：王五</span></span><br></pre></td></tr></table></figure>
<h4 id="call"><a href="#call" class="headerlink" title="__call__()"></a>__call__()</h4><p>允许一个类的实例像函数一样被调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 init 方法&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;**直接调用对象**&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">d()</span><br><span class="line"><span class="comment"># 执行 init 方法</span></span><br><span class="line"><span class="comment"># **直接调用对象**</span></span><br></pre></td></tr></table></figure>
<h4 id="len"><a href="#len" class="headerlink" title="__len__()"></a>__len__()</h4><p>该方法定义了被 <code>len()</code> 调用时的行为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    list_url = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.list_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure>
<h4 id="str"><a href="#str" class="headerlink" title="__str__()"></a>__str__()</h4><p>该方法定义了被 <code>str()</code> 调用时的行为。可以使对象直接被 <code>print()</code> 调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(d))</span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 字符串</span></span><br></pre></td></tr></table></figure>
<h4 id="repr"><a href="#repr" class="headerlink" title="__repr__()"></a>__repr__()</h4><p>该方法定义了被 <code>__repr__()</code> 调用时的行为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;repr&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(d))</span><br><span class="line"><span class="comment"># repr</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># repr</span></span><br></pre></td></tr></table></figure>
<h4 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__()"></a>__getattribute__()</h4><p>定义当该类的属性被访问时的行为</p>
<ul>
<li>当访问对象成员时，无论该象成员是否存在，该方法都会触发</li>
<li>参数 <code>self</code> 接收对象，<code>item</code> 接收要访问的成员名称</li>
<li>返回值即访问所得结果，即可以在该方法中返回非所需对象的值</li>
<li>在该方法中禁止使用 <code>self.成员</code> 的方式访问，这样会触发无限递归。因此需要使用 <code>object.__getattribute__(self, item)</code> 的方式来访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="comment"># return &#x27;attribute&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__getattribute__(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;ZS&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 __getattribute__ 返回值为 &#x27;attribute&#x27; 时，无论访问什么属性，都只能得到 &#x27;attribute&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(zs.name)</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># attribute</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当返回值为 objetc.__getattribute(item) 时，将返回正确结果</span></span><br><span class="line"><span class="built_in">print</span>(zs.name)</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># ZS</span></span><br></pre></td></tr></table></figure>
<h4 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__()"></a>__getattr__()</h4><p>定义当用户试图获取一个不存在的属性时的行为</p>
<p>如果 <code>__getattribute__()</code> 与 <code>__getattr()</code> 同时存在，并且访问一个不存在的成员时，将同时执行两个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 getattribute&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="comment"># return &#x27;attribute&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__getattribute__(self, item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 getattr&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;ZS&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(zs.d)</span><br><span class="line"><span class="comment"># 执行 getattribute</span></span><br><span class="line"><span class="comment"># d</span></span><br><span class="line"><span class="comment"># 执行 getattr</span></span><br><span class="line"><span class="comment"># d</span></span><br></pre></td></tr></table></figure>
<h4 id="setattr"><a href="#setattr" class="headerlink" title="__setattr__()"></a>__setattr__()</h4><p>该方法定义了当一个属性被设置时的行为</p>
<ul>
<li>当给对象的成员进行赋值操作时会自动触发</li>
<li>参数 <code>self</code> 接收当前对象，<code>key</code> 需要设置的成员名，<code>value</code> 设置的成员值</li>
<li>在当前的方法中禁止直接给对象的成员进行赋值操作，因为这会触发无限递归。如果想要给对象成员赋值，可以使用 <code>object.__setattr__(self, key, value)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 setattr&#x27;</span>)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;ZS&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line">zs.city = <span class="string">&#x27;NewYork&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(zs.city)</span><br><span class="line"><span class="comment"># 执行 setattr</span></span><br><span class="line"><span class="comment"># 执行 setattr</span></span><br><span class="line"><span class="comment"># 执行 setattr</span></span><br><span class="line"><span class="comment"># 执行 setattr</span></span><br><span class="line"><span class="comment"># NewYork</span></span><br></pre></td></tr></table></figure>
<h4 id="delattr"><a href="#delattr" class="headerlink" title="__delattr__()"></a>__delattr__()</h4><p>该方法定义当一个属性被删除时的行为</p>
<ul>
<li>在删除对象时自动触发，可以用于限制对象成员的删除操作</li>
<li>参数 <code>self</code> 接收当前对象，<code>item</code> 需要删除的成员名</li>
<li>如果想要删除对象，使用 <code>object.__delattr(self, item)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行 delattr&#x27;</span>)</span><br><span class="line">        <span class="built_in">object</span>.__delattr__(self, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;ZS&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line">zs.city = <span class="string">&#x27;NewYork&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(zs.city)</span><br><span class="line"><span class="comment"># NewYork</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> zs.city</span><br><span class="line"><span class="comment"># 执行 delattr</span></span><br></pre></td></tr></table></figure>
<h3 id="内置成员"><a href="#内置成员" class="headerlink" title="内置成员"></a>内置成员</h3><ul>
<li><code>__dict__</code></li>
<li><code>__doc__</code></li>
<li><code>__module__</code></li>
<li><code>__base__</code></li>
<li><code>__bases__</code></li>
</ul>
<h4 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a>__dict__</h4><p>用于获取类、对象的所属成员</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.c = [<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Test.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;a&#x27;: 1, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Test&#x27; objects&gt;, </span></span><br><span class="line"><span class="comment"># &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Test&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;c&#x27;: [3]&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="doc"><a href="#doc" class="headerlink" title="__doc__"></a>__doc__</h4><p>获取类、对象的文档说明信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个文档说明&quot;&quot;&quot;</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.c = [<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Test.__doc__)</span><br><span class="line"><span class="comment"># 这是一个文档说明</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t.__doc__)</span><br><span class="line"><span class="comment"># 这是一个文档说明</span></span><br></pre></td></tr></table></figure>
<h4 id="module"><a href="#module" class="headerlink" title="__module__"></a>__module__</h4><p>获取类所在模块的名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个文档说明&quot;&quot;&quot;</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.c = [<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Test.__module__)</span><br><span class="line"><span class="comment"># __main__</span></span><br></pre></td></tr></table></figure>
<h4 id="base-bases"><a href="#base-bases" class="headerlink" title="__base, __bases"></a>__base<strong>, __bases</strong></h4><p><code>__base__</code> 获取当前类的第一个父类</p>
<p><code>__bases__</code> 获取当前类的所有父类列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(A, B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.__base__)</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.__bases__)</span><br><span class="line"><span class="comment"># (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;)</span></span><br></pre></td></tr></table></figure>
<h3 id="类方法的分类"><a href="#类方法的分类" class="headerlink" title="类方法的分类"></a>类方法的分类</h3><ul>
<li>对象方法</li>
<li>类方法</li>
<li>绑定类方法</li>
<li>静态方法</li>
</ul>
<h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><ul>
<li>在类中定义的方法，含有 <code>self</code> 参数</li>
<li>一般由对象调用，由类调用时需要手动传入对象参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个对象方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.print_info()</span><br><span class="line"><span class="comment"># 这是一个对象方法</span></span><br></pre></td></tr></table></figure>
<h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><ul>
<li>在类中定义的方法，使用装饰器 <code>@classmethod</code> 装饰</li>
<li>含有 <code>cls</code> 参数</li>
<li>不需要实例化对象，直接使用类进行调用</li>
<li>该方法会接收调用的类</li>
<li>即便使用对象调用，传递进去的 <code>cls</code> 依然是类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个对象方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bound_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个绑定类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.print_info()</span><br><span class="line"><span class="comment"># 这是一个对象方法</span></span><br><span class="line"></span><br><span class="line">Demo.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br><span class="line">d.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br></pre></td></tr></table></figure>
<h4 id="绑定类方法"><a href="#绑定类方法" class="headerlink" title="绑定类方法"></a>绑定类方法</h4><ul>
<li>在类中定义的方法，通常不含参</li>
<li>只能由类进行调用</li>
<li>对象调用将会报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个对象方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bound_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个绑定类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.print_info()</span><br><span class="line"><span class="comment"># 这是一个对象方法</span></span><br><span class="line"></span><br><span class="line">Demo.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br><span class="line">d.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br><span class="line"></span><br><span class="line">Demo.bound_func()</span><br><span class="line"><span class="comment"># 这是一个绑定类方法</span></span><br></pre></td></tr></table></figure>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><ul>
<li>在类中定义的方法，如果含参，参数传递时不会传递类或对象</li>
<li>使用装饰器 <code>@staticmethod</code> 进行装饰</li>
<li>可以使用对象或者类进行调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个对象方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bound_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个绑定类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.print_info()</span><br><span class="line"><span class="comment"># 这是一个对象方法</span></span><br><span class="line"></span><br><span class="line">Demo.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br><span class="line">d.func()</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.Demo&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这是一个类方法</span></span><br><span class="line"></span><br><span class="line">Demo.bound_func()</span><br><span class="line"><span class="comment"># 这是一个绑定类方法</span></span><br><span class="line"></span><br><span class="line">Demo.static_func()</span><br><span class="line"><span class="comment"># 这是一个静态方法</span></span><br><span class="line">d.static_func()</span><br><span class="line"><span class="comment"># 这是一个静态方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3学习笔记-6</title>
    <url>/2022/04/30/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/</url>
    <content><![CDATA[<h2 id="描述器"><a href="#描述器" class="headerlink" title="描述器"></a>描述器</h2><p>描述器是一种创建托管属性的方法。其具有诸多优点：保护属性不受修改、属性类型检查和自动更新某个依赖属性的值等</p>
<p>通俗的讲，描述器指实现了下列任意一个方法的 Python 类，并且该类的实例对象通常是另一个类的类属性</p>
<ul>
<li><code>__get__(self, instance, owner)</code></li>
<li><code>__set__(self, instance, value)</code></li>
<li><code>__delete__(self, instance)</code></li>
</ul>
<p>这些方法的参数含义如下</p>
<ul>
<li><code>self</code> 是当前定义的描述器对象实例</li>
<li><code>instance</code> 是该描述器将作用的对象实例</li>
<li><code>owner</code> 是该描述器作用的对象的类型（即所属的类）</li>
<li><code>value</code> 是需要赋给对象的值</li>
</ul>
<span id="more"></span>
<h3 id="描述器的作用"><a href="#描述器的作用" class="headerlink" title="描述器的作用"></a>描述器的作用</h3><p>描述器可以用来控制对属性的访问行为，实现计算属性、懒加载属性、属性访问控制等功能。描述器仅在用作类变量时起作用。放入实例时，它们将失效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Descriptor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------get----------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self:&#x27;</span>, self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;instance:&#x27;</span>, instance)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;owner:&#x27;</span>, owner)</span><br><span class="line">        <span class="keyword">return</span> instance._age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------set----------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;self:&#x27;</span>, self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;instance:&#x27;</span>, instance)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;value:&#x27;</span>, value)</span><br><span class="line">        instance._age = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    age = Descriptor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;ZS&#x27;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># ----------set----------</span></span><br><span class="line"><span class="comment"># self: &lt;__main__.Descriptor object at 0x0000026EE38C7EB0&gt;</span></span><br><span class="line"><span class="comment"># instance: &lt;__main__.Person object at 0x0000026EE38C7E80&gt;</span></span><br><span class="line"><span class="comment"># value: 30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zs.age)</span><br><span class="line"><span class="comment"># ----------get----------</span></span><br><span class="line"><span class="comment"># self: &lt;__main__.Descriptor object at 0x0000026EE38C7EB0&gt;</span></span><br><span class="line"><span class="comment"># instance: &lt;__main__.Person object at 0x0000026EE38C7E80&gt;</span></span><br><span class="line"><span class="comment"># owner: &lt;class &#x27;__main__.Person&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 30</span></span><br></pre></td></tr></table></figure>
<h3 id="描述器的分类"><a href="#描述器的分类" class="headerlink" title="描述器的分类"></a>描述器的分类</h3><p>Python 有这样一种行为：访问属性时，它会先看看是不是描述器，若是，则调用 <code>__get__</code> 或 <code>__set__</code> 来读写属性；若不是，就调用 <code>__getattribute__</code> 或 <code>_setattr__</code> 来读写属性。也就是说描述器会覆盖托管类的属性的读写方式</p>
<p>有 <code>__set__</code>（和 <code>__delete</code>）的描述器是数据描述器，只有 <code>__get__</code> 的描述器是非数据描述器，意味着在初始化之后它们只能被读取。仅有 <code>__set__</code> 的数据描述器，除非托管实例有实例属性，否则就返回托管实例本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Normal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Normal.__get__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Normal.__set__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoGet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NoGet.__set__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoSet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;NoSet.__get__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    normal = Normal()</span><br><span class="line">    no_get = NoGet()</span><br><span class="line">    no_set = NoSet()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = Demo()</span><br><span class="line"><span class="built_in">print</span>(demo.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有无 __get__ 的区别</span></span><br><span class="line"><span class="built_in">print</span>(demo.normal)</span><br><span class="line"><span class="comment"># Normal.__get__</span></span><br><span class="line"><span class="built_in">print</span>(demo.no_get)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># &lt;__main__.NoGet object at 0x000001EEB25C7E20&gt;  此处直接返回实例本身</span></span><br><span class="line">demo.__dict__[<span class="string">&#x27;normal&#x27;</span>], demo.__dict__[<span class="string">&#x27;no_get&#x27;</span>] = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(demo.__dict__)</span><br><span class="line"><span class="comment"># &#123;&#x27;normal&#x27;: 1, &#x27;no_get&#x27;: 2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(demo.normal)</span><br><span class="line"><span class="comment"># Normal.__get__</span></span><br><span class="line"><span class="built_in">print</span>(demo.no_get)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有无 __set__ 的区别</span></span><br><span class="line">demo.normal = <span class="number">3</span></span><br><span class="line"><span class="comment"># Normal.__set__</span></span><br><span class="line"><span class="built_in">print</span>(demo.normal)</span><br><span class="line"><span class="comment"># Normal.__get__</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(demo.no_set)</span><br><span class="line"><span class="comment"># NoSet.__get__</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line">demo.no_set = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(demo.no_set)</span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
<p>当属性名和描述器名相同时，在访问这个同名属性时，如果是数据描述器就会先访问描述器，如果是非数据描述器就会先访问属性，举例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 既有__get__又有__set__，是一个数据描述器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get m here&#x27;</span>)  <span class="comment"># 打印一些信息，看这个方法何时被调用</span></span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set m here&#x27;</span>)  <span class="comment"># 打印一些信息，看这个方法何时被调用</span></span><br><span class="line">        self.x = value + <span class="number">1</span>  <span class="comment"># 这里设置一个+1来更清楚了解调用机制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有__get__是一个非数据描述器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get n here&#x27;</span>)  <span class="comment"># 打印一些信息，看这个方法何时被调用</span></span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用描述器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>:</span><br><span class="line">    m = M()  <span class="comment"># m就是一个描述器</span></span><br><span class="line">    n = N()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m, n</span>):</span><br><span class="line">        self.m = m  <span class="comment"># 属性m和描述器m名字相同，调用时发生一些冲突</span></span><br><span class="line">        self.n = n  <span class="comment"># 非数据描述器的情况，与m对比</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa = AA(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(aa.__dict__)  <span class="comment"># 只有n没有m, 因为数据描述器同名时，不会访问到属性，会直接访问描述器，所以属性里就查不到m这个属性了</span></span><br><span class="line"><span class="built_in">print</span>(AA.__dict__)  <span class="comment"># m和n都有</span></span><br><span class="line"><span class="built_in">print</span>(aa.n)  <span class="comment"># 5, 非数据描述器同名时调用的是属性，为传入的5</span></span><br><span class="line"><span class="built_in">print</span>(AA.n)  <span class="comment"># 1, 如果是类来访问，就调用的是描述器，返回self.x的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(aa.m)  <span class="comment"># 3, 其实在aa=AA(2,5)创建实例时，进行了属性赋值，其中相当于进行了aa.m=2</span></span><br><span class="line"><span class="comment"># 但是aa调用m时却不是常规地调用属性m，而是数据描述器m</span></span><br><span class="line"><span class="comment"># 所以定义实例aa时，其实触发了m的__set__方法，将2传给value，self.x变成3</span></span><br><span class="line"><span class="comment"># aa.m调用时也访问的是描述器，返回self.x即3的结果</span></span><br><span class="line"><span class="comment"># 其实看打印信息也能看出什么时候调用了__get__和__set__</span></span><br><span class="line"></span><br><span class="line">aa.m = <span class="number">6</span>  <span class="comment"># 另外对属性赋值也是调用了m的__set__方法</span></span><br><span class="line"><span class="built_in">print</span>(aa.m)  <span class="comment"># 7，调用__get__方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 在代码中显式调用__get__方法</span></span><br><span class="line"><span class="built_in">print</span>(AA.__dict__[<span class="string">&#x27;n&#x27;</span>].__get__(<span class="literal">None</span>, AA))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(AA.__dict__[<span class="string">&#x27;n&#x27;</span>].__get__(aa, AA))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
<h3 id="描述器的实现方式"><a href="#描述器的实现方式" class="headerlink" title="描述器的实现方式"></a>描述器的实现方式</h3><h4 id="通过定义描述器类来实现"><a href="#通过定义描述器类来实现" class="headerlink" title="通过定义描述器类来实现"></a>通过定义描述器类来实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Descriptor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    number = Descriptor()</span><br></pre></td></tr></table></figure>
<h4 id="使用-property-函数实现"><a href="#使用-property-函数实现" class="headerlink" title="使用 property() 函数实现"></a>使用 property() 函数实现</h4><p><code>property()</code> 函数的作用是在新式类中返回属性值</p>
<p>语法格式</p>
<p><code>class property([fget[, fset[, fdel[, doc]]]])</code></p>
<ul>
<li><code>fget</code> 获取属性值的函数</li>
<li><code>fset</code> 设置属性值的函数</li>
<li><code>fdel</code> 删除属性值的函数</li>
<li><code>doc</code> 属性描述信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call get&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setx</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call set&#x27;</span>)</span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delx</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call del&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"></span><br><span class="line">    x = <span class="built_in">property</span>(getx, setx, delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.x = <span class="number">10</span>  <span class="comment"># Call set</span></span><br><span class="line"><span class="built_in">print</span>(d.x)</span><br><span class="line"><span class="comment"># Call get</span></span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-property-实现"><a href="#使用-property-实现" class="headerlink" title="使用 @property 实现"></a>使用 @property 实现</h3><p>使用 <code>@property</code> 用作装饰器可以很方便的创建只读属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;This is the property of &#x27;x&#x27; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call get&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line"><span class="built_in">print</span>(d.x)</span><br><span class="line"><span class="comment"># Call get</span></span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<p>同样的，set 方法可以使用 <code>@属性.setter</code> 实现，del 方法可以使用 <code>@属性.deleter</code> 实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;This is the property of &#x27;x&#x27; &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call get&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Call set&#x27;</span>)</span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line">d.x = <span class="number">20</span>  <span class="comment"># Call set</span></span><br><span class="line"><span class="built_in">print</span>(d.x)</span><br><span class="line"><span class="comment"># Call get</span></span><br><span class="line"><span class="comment"># 20</span></span><br></pre></td></tr></table></figure>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案，是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>这种类型的设计模式属于创建型模式，它涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</p>
<blockquote>
<p>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>主要解决：一个全局使用的类频繁地创建于销毁<br>设计思路：</p>
<ol>
<li>需要有一个方法控制当前对象的创建<br> 修改构造方法 <strong>new</strong></li>
<li>需要有一个标识来存储和表示是否已经创建了对线<br> 创建一个私有属性进行存储</li>
<li>在创建方法中如何检测是否有对象<br> 如果没有对象，则创建并存储<br> 如果有对象，则直接返回对象</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="comment"># 用于存储是否有对象的私有属性</span></span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果没有对象则创建并存储</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__obj:</span><br><span class="line">            cls.__obj = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Demo()</span><br><span class="line">b = Demo()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># &lt;__main__.Demo object at 0x00000284F84925F0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># &lt;__main__.Demo object at 0x00000284F84925F0&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Mixin-混合设计模式"><a href="#Mixin-混合设计模式" class="headerlink" title="Mixin 混合设计模式"></a>Mixin 混合设计模式</h3><p>Mixin 即 Mix-in，可被译为“混入”，它指实现了某种功能单元的类，用于被其他子类继承，将功能组合到子类中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个 Mixin 类，实现让子类可以像 dict 一样调用属性的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MappingMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__dict__.__getitem__(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__dict__.__setitem__(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个 Mixin类，实现自动将属性与值拼接成字符串的功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReprMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        s = self.__class__.__name__ + <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                s += <span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;v&#125;</span>&#x27;</span></span><br><span class="line">        s = s.rstrip(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(MappingMixin, ReprMixin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zs = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">24</span>)</span><br><span class="line"><span class="built_in">print</span>(zs.name)  <span class="comment"># 张三</span></span><br><span class="line"><span class="built_in">print</span>(zs[<span class="string">&#x27;age&#x27;</span>])  <span class="comment"># 24</span></span><br><span class="line"><span class="built_in">print</span>(zs)  <span class="comment"># Person(name=张三gender=男age=24)</span></span><br></pre></td></tr></table></figure>
<p>Mixin 并非一种语法，而是为了代码的可读性和可维护性所约定的一种规范，通常有以下规定</p>
<ul>
<li>Mixin 必须表示一种功能而非一个对象</li>
<li>Mixin 的功能必须单一，如果想实现多个功能，那就定义多个 Mixin 类</li>
<li>在 Python 中 Mixin 通过多继承实现</li>
<li>Mixin 通常不单独使用，而是被其他类继承来增加功能</li>
</ul>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类可以不实现具体的方法，而是在后续开发中完善代码。可以使用 <code>abc</code> 模块来实现抽象类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ABCMeta 定义一个抽象基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractClass</span>(metaclass=abc.ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器装饰需要抽象的方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ab = AbstractClass()</span><br></pre></td></tr></table></figure>
<p>抽象类不能直接实例化对象，会报如下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    ab = AbstractClass()</span><br><span class="line">TypeError: Can&#x27;t instantiate abstract class AbstractClass with abstract method say</span><br></pre></td></tr></table></figure>
<p>只有当抽象方法被实现后，才可以实例化相应的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ABCMeta 定义一个抽象基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractClass</span>(metaclass=abc.ABCMeta):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器装饰需要抽象的方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在子类中实现具体功能后即可实例化对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">AbstractClass</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Say&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Sing&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">p.say()  <span class="comment"># Say</span></span><br><span class="line">p.sing()  <span class="comment"># Sing</span></span><br></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器是用来修改函数的功能的函数。可以让代码更简洁</p>
<h3 id="装饰器原型"><a href="#装饰器原型" class="headerlink" title="装饰器原型"></a>装饰器原型</h3><p>装饰器实际相当于将被装饰的函数作为参数传入一个闭包函数执行，可以使用 <code>@函数名</code> 的语法糖来调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先定义一个闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰开始&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要被装饰的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***我是被装饰的函数***&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用装饰器语法糖装饰函数</span></span><br><span class="line">demo = outer(demo)  <span class="comment"># 相当于将 inner 赋给了 demo，此时执行 demo 就相当于执行 inner</span></span><br><span class="line">demo()</span><br><span class="line"><span class="comment"># 装饰开始</span></span><br><span class="line"><span class="comment"># ***我是被装饰的函数***</span></span><br><span class="line"><span class="comment"># 装饰结束</span></span><br></pre></td></tr></table></figure>
<p>使用语法糖后如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先定义一个闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰开始&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要被装饰的函数，使用语法糖</span></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***我是被装饰的函数***&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接调用</span></span><br><span class="line">demo()</span><br><span class="line"><span class="comment"># 装饰开始</span></span><br><span class="line"><span class="comment"># ***我是被装饰的函数***</span></span><br><span class="line"><span class="comment"># 装饰结束</span></span><br></pre></td></tr></table></figure>
<h3 id="恢复函数名"><a href="#恢复函数名" class="headerlink" title="恢复函数名"></a>恢复函数名</h3><p>在上面的例子中，会有一个问题，即函数的实际调用名称被改变了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(demo.__name__)</span><br><span class="line"><span class="comment"># inner</span></span><br></pre></td></tr></table></figure>
<p>这很明显是发生了预期之外的错误，<code>demo</code> 的名称应当是 <code>demo</code> 而非 <code>inner</code>，因此需要在闭包函数中使用 <code>functools.wraps</code> 来装饰内函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先定义一个闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰开始&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要被装饰的函数，使用语法糖</span></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***我是被装饰的函数***&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo.__name__)</span><br><span class="line"><span class="comment"># demo</span></span><br></pre></td></tr></table></figure>
<h3 id="装饰器的嵌套"><a href="#装饰器的嵌套" class="headerlink" title="装饰器的嵌套"></a>装饰器的嵌套</h3><p>装饰器的装饰是由内到外的，先执行距离被装饰函数最近的装饰器，然后依次向外装饰</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰 1&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰 3&#x27;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;装饰 4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend</span></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***我是被装饰的函数***&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo()</span><br><span class="line"><span class="comment"># 装饰 3</span></span><br><span class="line"><span class="comment"># 装饰 1</span></span><br><span class="line"><span class="comment"># ***我是被装饰的函数***</span></span><br><span class="line"><span class="comment"># 装饰 2</span></span><br><span class="line"><span class="comment"># 装饰 4</span></span><br></pre></td></tr></table></figure>
<h3 id="装饰带有参数的函数"><a href="#装饰带有参数的函数" class="headerlink" title="装饰带有参数的函数"></a>装饰带有参数的函数</h3><p>在装饰带有参数的函数时，需要在装饰器的内函数中也添加相应的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">name, age, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始记录&#x27;</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        这里传参数时，需要解包传递进去，不然 args=(&#x27;爱吃火锅&#x27;,)，args=&#123;&#x27;city&#x27;: &#x27;北京&#x27;, &#x27;gender&#x27;: &#x27;Boy&#x27;&#125;，而这两个一个是元组，一个是字典，都会当做非关键字参数传入，</span></span><br><span class="line"><span class="string">        即传入 func 的 kwargs 为空</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        func(name, age, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;记录结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record</span>(<span class="params">name, age, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;The name is <span class="subst">&#123;name&#125;</span>, age is <span class="subst">&#123;age&#125;</span>, others:<span class="subst">&#123;args&#125;</span> and <span class="subst">&#123;kwargs&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">record(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;爱吃火锅&#x27;</span>, city=<span class="string">&#x27;北京&#x27;</span>, gender=<span class="string">&#x27;Boy&#x27;</span>)</span><br><span class="line"><span class="comment"># 开始记录</span></span><br><span class="line"><span class="comment"># The name is 张三, age is 18, others:(&#x27;爱吃火锅&#x27;,) and &#123;&#x27;city&#x27;: &#x27;北京&#x27;, &#x27;gender&#x27;: &#x27;Boy&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 记录结束</span></span><br></pre></td></tr></table></figure>
<h3 id="带有参数的函数装饰器"><a href="#带有参数的函数装饰器" class="headerlink" title="带有参数的函数装饰器"></a>带有参数的函数装饰器</h3><p>如果想要定义一个可以接受参数的装饰器，需要在原本的装饰器外再定义一个用于接收参数的壳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logged</span>(<span class="params">level, name=<span class="literal">None</span>, message=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">func</span>):</span><br><span class="line">        logname = name <span class="keyword">if</span> name <span class="keyword">else</span> func.__module__</span><br><span class="line">        log = logging.getLogger(logname)</span><br><span class="line">        logmsg = message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log.log(level, logmsg)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logged(<span class="params">logging.DEBUG</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logged(<span class="params">logging.CRITICAL, <span class="string">&#x27;example&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Spam!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo()</span><br><span class="line"><span class="comment"># demo</span></span><br><span class="line"><span class="comment"># Spam!</span></span><br></pre></td></tr></table></figure>
<p>带有参数的装饰器的执行过程与下面的调用是等效的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator(<span class="params">x, y, z</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fucn</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func = decorator(x, y, z)(func)</span><br></pre></td></tr></table></figure>
<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>通过改写类的 <code>__call__</code> 方法使得类的实例可以像函数一样被调用，即可用于装饰</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Logged</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, level, name=<span class="literal">None</span>, message=<span class="literal">None</span></span>):</span><br><span class="line">        self.level = level</span><br><span class="line">        self.name = name</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line">        logname = self.name <span class="keyword">if</span> self.name <span class="keyword">else</span> func.__module__</span><br><span class="line">        log = logging.getLogger(logname)</span><br><span class="line">        logmsg = self.message <span class="keyword">if</span> self.message <span class="keyword">else</span> func.__name__</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log.log(self.level, logmsg)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Logged(<span class="params">logging.CRITICAL</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spam</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Spam!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spam()</span><br></pre></td></tr></table></figure>
<h3 id="使用函数装饰器装饰类"><a href="#使用函数装饰器装饰类" class="headerlink" title="使用函数装饰器装饰类"></a>使用函数装饰器装饰类</h3><p>装饰器也可以用来装饰类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;装饰器方法&#x27;</span>)</span><br><span class="line">    cls.name = <span class="string">&#x27;新增属性 name&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;say&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = Demo()</span><br><span class="line"><span class="comment"># 装饰器方法</span></span><br></pre></td></tr></table></figure>
<h3 id="使用类装饰器装饰类"><a href="#使用类装饰器装饰类" class="headerlink" title="使用类装饰器装饰类"></a>使用类装饰器装饰类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, cls</span>):</span><br><span class="line">        self.cls = cls</span><br><span class="line">        <span class="comment"># 返回一个函数</span></span><br><span class="line">        <span class="keyword">return</span> self.func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        self.cls.name = <span class="string">&#x27;在装饰器中追加新属性 name&#x27;</span></span><br><span class="line">        self.cls.func2 = self.func2</span><br><span class="line">        <span class="keyword">return</span> self.cls()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在装饰器中追加的新方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Decorator()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Demo 中定义的方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意此时 Demo 改名为了 func，即 Demo 和 func 指向了同一个对象</span></span><br><span class="line"><span class="built_in">print</span>(Demo.__name__)  <span class="comment"># func</span></span><br><span class="line"><span class="comment"># 实例化时返回了 self.cls() 即生成了一个 Demo 的对象</span></span><br><span class="line">d = Demo()</span><br><span class="line"></span><br><span class="line">d.func3()  <span class="comment"># Demo 中定义的方法</span></span><br><span class="line">d.func2()  <span class="comment"># 在装饰器中追加的新方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以改写装饰器类来达到不修改 Demo 名称的效果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, cls</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">cls</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">            cls.name = <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">            cls.func2 = self.func2</span><br><span class="line">            <span class="keyword">return</span> cls()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;在装饰器中追加的新方法&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行</p>
<p>一般情况下，在Python无法正常处理程序时就会发生一个异常</p>
<p>异常是Python对象，表示一个错误</p>
<p>当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行</p>
<h3 id="Python-标准异常"><a href="#Python-标准异常" class="headerlink" title="Python 标准异常"></a>Python 标准异常</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:right">异常名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">BaseException</td>
<td style="text-align:left">所有异常的基类</td>
</tr>
<tr>
<td style="text-align:right">SystemExit</td>
<td style="text-align:left">解释器请求退出</td>
</tr>
<tr>
<td style="text-align:right">KeyboardInterrupt</td>
<td style="text-align:left">用户中断执行(通常是输入^C)</td>
</tr>
<tr>
<td style="text-align:right">Exception</td>
<td style="text-align:left">常规错误的基类</td>
</tr>
<tr>
<td style="text-align:right">StopIteration</td>
<td style="text-align:left">迭代器没有更多的值</td>
</tr>
<tr>
<td style="text-align:right">GeneratorExit</td>
<td style="text-align:left">生成器(generator)发生异常来通知退出</td>
</tr>
<tr>
<td style="text-align:right">StandardError</td>
<td style="text-align:left">所有的内建标准异常的基类</td>
</tr>
<tr>
<td style="text-align:right">ArithmeticError</td>
<td style="text-align:left">所有数值计算错误的基类</td>
</tr>
<tr>
<td style="text-align:right">FloatingPointError</td>
<td style="text-align:left">浮点计算错误</td>
</tr>
<tr>
<td style="text-align:right">OverflowError</td>
<td style="text-align:left">数值运算超出最大限制</td>
</tr>
<tr>
<td style="text-align:right">ZeroDivisionError</td>
<td style="text-align:left">除(或取模)零 (所有数据类型)</td>
</tr>
<tr>
<td style="text-align:right">AssertionError</td>
<td style="text-align:left">断言语句失败</td>
</tr>
<tr>
<td style="text-align:right">AttributeError</td>
<td style="text-align:left">对象没有这个属性</td>
</tr>
<tr>
<td style="text-align:right">EOFError</td>
<td style="text-align:left">没有内建输入,到达EOF 标记</td>
</tr>
<tr>
<td style="text-align:right">EnvironmentError</td>
<td style="text-align:left">操作系统错误的基类</td>
</tr>
<tr>
<td style="text-align:right">IOError</td>
<td style="text-align:left">输入/输出操作失败</td>
</tr>
<tr>
<td style="text-align:right">OSError</td>
<td style="text-align:left">操作系统错误</td>
</tr>
<tr>
<td style="text-align:right">WindowsError</td>
<td style="text-align:left">系统调用失败</td>
</tr>
<tr>
<td style="text-align:right">ImportError</td>
<td style="text-align:left">导入模块/对象失败</td>
</tr>
<tr>
<td style="text-align:right">LookupError</td>
<td style="text-align:left">无效数据查询的基类</td>
</tr>
<tr>
<td style="text-align:right">IndexError</td>
<td style="text-align:left">序列中没有此索引(index)</td>
</tr>
<tr>
<td style="text-align:right">KeyError</td>
<td style="text-align:left">映射中没有这个键</td>
</tr>
<tr>
<td style="text-align:right">MemoryError</td>
<td style="text-align:left">内存溢出错误(对于Python 解释器不是致命的)</td>
</tr>
<tr>
<td style="text-align:right">NameError</td>
<td style="text-align:left">未声明/初始化对象 (没有属性)</td>
</tr>
<tr>
<td style="text-align:right">UnboundLocalError</td>
<td style="text-align:left">访问未初始化的本地变量</td>
</tr>
<tr>
<td style="text-align:right">ReferenceError</td>
<td style="text-align:left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td>
</tr>
<tr>
<td style="text-align:right">RuntimeError</td>
<td style="text-align:left">一般的运行时错误</td>
</tr>
<tr>
<td style="text-align:right">NotImplementedError</td>
<td style="text-align:left">尚未实现的方法</td>
</tr>
<tr>
<td style="text-align:right">SyntaxError</td>
<td style="text-align:left">Python 语法错误</td>
</tr>
<tr>
<td style="text-align:right">IndentationError</td>
<td style="text-align:left">缩进错误</td>
</tr>
<tr>
<td style="text-align:right">TabError</td>
<td style="text-align:left">Tab 和空格混用</td>
</tr>
<tr>
<td style="text-align:right">SystemError</td>
<td style="text-align:left">一般的解释器系统错误</td>
</tr>
<tr>
<td style="text-align:right">TypeError</td>
<td style="text-align:left">对类型无效的操作</td>
</tr>
<tr>
<td style="text-align:right">ValueError</td>
<td style="text-align:left">传入无效的参数</td>
</tr>
<tr>
<td style="text-align:right">UnicodeError</td>
<td style="text-align:left">Unicode 相关的错误</td>
</tr>
<tr>
<td style="text-align:right">UnicodeDecodeError</td>
<td style="text-align:left">Unicode 解码时的错误</td>
</tr>
<tr>
<td style="text-align:right">UnicodeEncodeError</td>
<td style="text-align:left">Unicode 编码时错误</td>
</tr>
<tr>
<td style="text-align:right">UnicodeTranslateError</td>
<td style="text-align:left">Unicode 转换时错误</td>
</tr>
<tr>
<td style="text-align:right">Warning</td>
<td style="text-align:left">警告的基类</td>
</tr>
<tr>
<td style="text-align:right">DeprecationWarning</td>
<td style="text-align:left">关于被弃用的特征的警告</td>
</tr>
<tr>
<td style="text-align:right">FutureWarning</td>
<td style="text-align:left">关于构造将来语义会有改变的警告</td>
</tr>
<tr>
<td style="text-align:right">OverflowWarning</td>
<td style="text-align:left">旧的关于自动提升为长整型(long)的警告</td>
</tr>
<tr>
<td style="text-align:right">PendingDeprecationWarning</td>
<td style="text-align:left">关于特性将会被废弃的警告</td>
</tr>
<tr>
<td style="text-align:right">RuntimeWarning</td>
<td style="text-align:left">可疑的运行时行为(runtime behavior)的警告</td>
</tr>
<tr>
<td style="text-align:right">SyntaxWarning</td>
<td style="text-align:left">可疑的语法的警告</td>
</tr>
<tr>
<td style="text-align:right">UserWarning</td>
<td style="text-align:left">用户代码生成的警告</td>
</tr>
</tbody>
</table>
</div>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>捕捉异常可以使用 <code>try...except...</code> 语句</p>
<p>语法格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tyr:</span><br><span class="line">&lt;语句&gt;                      <span class="comment"># 运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;异常名&gt;:</span><br><span class="line">    &lt;语句&gt;                  <span class="comment"># 如果在 tyr 部分引发了 &#x27;异常名&#x27; 异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;异常名<span class="number">2</span>&gt;,&lt;数据&gt;:</span><br><span class="line">    &lt;语句&gt;                  <span class="comment"># 如果引发了 &#x27;异常名2&#x27; 异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;语句&gt;                  <span class="comment"># 如果没有异常发生</span></span><br></pre></td></tr></table></figure>
<p><code>try</code> 语句的工作原理</p>
<ul>
<li>首先执行 <code>try</code> 子句</li>
<li>如果没有触发异常，则跳过 <code>except</code> 子句，<code>try</code> 语句执行完毕</li>
<li>如果在执行 <code>try</code> 子句时发生了异常，则跳过该子句中剩下的部分。如果异常的类型与 <code>except</code> 关键字后指定的异常相匹配，则会执行 <code>except</code> 子句，然后跳到 <code>try...except</code> 代码块之后继续执行</li>
<li>如果发生的异常与 <code>except</code> 子句中指定的异常不匹配，则它会被传递到外部的 <code>try</code> 语句中；如果没有找到处理程序，则它是一个未处理异常且执行将终止并输出异常信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># except 后不加任何异常类，即接收所有类型的异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># except 后加异常类，即处理指定的异常信息</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># except 后加异常类并实例化为对象，可以执行其他操作</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># except 后可以跟多个异常类</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span> (TypeError, IndexError, KeyError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用多个 except 处理不同的异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IndexError&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;KeyError&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>可以使用 <code>Exception</code> 来接收所有的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(s))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><p><code>try</code> 语句具有可选的 <code>else</code> 子句，如果该子句存在，它必须放在所有 <code>except</code> 子句之后。它适用于 <code>try</code> 子句没有引发异常但又必须要执行的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    需要执行的代码</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    触发异常后需要执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常发生则执行的代码</span><br></pre></td></tr></table></figure>
<p>使用 <code>else</code> 子句比向 <code>try</code> 子句添加额外的代码要好，可以避免意外捕获非 <code>try...except</code> 语句保护的代码触发的异常</p>
<h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><p><code>finally</code> 语句中是无论是否发生异常都会执行的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    需要执行的代码</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    触发异常后需要执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常发生则执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    无论是否发生了异常，都会执行的代码</span><br></pre></td></tr></table></figure>
<h3 id="raise-触发异常"><a href="#raise-触发异常" class="headerlink" title="raise 触发异常"></a>raise 触发异常</h3><p><code>raise</code> 语句支持强制触发指定的异常</p>
<p><code>raise</code> 唯一的参数就是要触发的异常。这个参数必须是异常实例或异常类（派生自 Exception 类）。如果传递的是异常类，将通过调用没有参数的构造函数来隐式实例化</p>
<p><code>raise ValueError # 相当于 raise ValueError()</code></p>
<p>如果只想判断是否触发了异常，但并不打算处理该异常，则可以使用更简单的 <code>raise</code> 语句重新触发异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;触发了异常&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">触发了异常</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise NameError(&#x27;Hi&#x27;)</span></span><br><span class="line"><span class="string">NameError: Hi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h4><p><code>raise</code> 语句支持可选的 <code>from</code> 子句，该子句用于启用链式异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">raise</span> ConnectionError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    func()</span><br><span class="line"><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;无法打开文件&#x27;</span>) <span class="keyword">from</span> e</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 6, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    func()</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 2, in func</span></span><br><span class="line"><span class="string">    raise ConnectionError</span></span><br><span class="line"><span class="string">ConnectionError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The above exception was the direct cause of the following exception:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 8, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise RuntimeError(&#x27;无法打开文件&#x27;) from e</span></span><br><span class="line"><span class="string">RuntimeError: 无法打开文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">进程已结束,退出代码1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>异常链会在 <code>except</code> 或 <code>finally</code> 子句内部引发异常时自动生成。可以使用 <code>from None</code> 来禁用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">raise</span> ConnectionError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    func()</span><br><span class="line"><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;无法打开文件&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 8, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise RuntimeError(&#x27;无法打开文件&#x27;) from None</span></span><br><span class="line"><span class="string">RuntimeError: 无法打开文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h3><p>通过创建一个新的异常类，程序可以命名它们自己的异常。异常应当是典型的继承自 Exception 类，通过直接或间接的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arg</span>):</span><br><span class="line">        self.args = arg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NewError(<span class="string">&#x27;这是一个自定义的异常&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NewError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># (&#x27;这&#x27;, &#x27;是&#x27;, &#x27;一&#x27;, &#x27;个&#x27;, &#x27;自&#x27;, &#x27;定&#x27;, &#x27;义&#x27;, &#x27;的&#x27;, &#x27;异&#x27;, &#x27;常&#x27;)</span></span><br></pre></td></tr></table></figure>
<h3 id="断言-assert"><a href="#断言-assert" class="headerlink" title="断言 assert"></a>断言 assert</h3><p><code>assert</code> 用于判断一个表达式，在表达式条件为 false 时触发异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;C:\Users\HuaJi\Documents\MyFiles\Pycharm\LearnPython\main.py&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    assert 1 == 2</span></span><br><span class="line"><span class="string">AssertionError</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Python 模块是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和 Python 语句</p>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>可以使用 <code>import</code> 语句来引入模块</p>
<p>语法格式</p>
<p><code>import 模块名</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="comment"># 1651833103.0442562</span></span><br></pre></td></tr></table></figure>
<h4 id="from-import"><a href="#from-import" class="headerlink" title="from import"></a>from import</h4><p>也可以使用 <code>from...import</code> 语句导入模块中的指定部分到当前命名空间</p>
<p>语法格式</p>
<p><code>from 模块名 impor 变量[函数][类]...</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time())</span><br><span class="line"><span class="comment"># 1651833309.1357107</span></span><br></pre></td></tr></table></figure>
<p>可以使用 <code>from 模块名 import *</code> 来导入一个模块中的所有项目。与直接 <code>import 模块名</code> 的区别是这种方法导入的变量使用时不需要采用 <code>模块名.变量</code> 格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不需要使用 time.time()</span></span><br><span class="line"><span class="built_in">print</span>(time())</span><br><span class="line"><span class="comment"># 1651833502.5516367</span></span><br></pre></td></tr></table></figure>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包可以理解为一个文件夹，其中包含了包的必要文件 <code>__init__.py</code> 和多个 Python 文件</p>
<h3 id="包常见的目录结构"><a href="#包常见的目录结构" class="headerlink" title="包常见的目录结构"></a>包常见的目录结构</h3><blockquote>
<p>包A（文件夹）<br>|—— __init<strong>.py  # 这是包的标志性文件<br>|—— a.py  # a模块（文件）<br>|—— b.py  # b模块（文件）<br>|—— …   # 其他模块<br>|—— 子包 Aa<br>|—— |—— __init</strong>.py<br>|—— |—— c.py<br>|—— |—— d.py</p>
</blockquote>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>假设有如下目录结构</p>
<blockquote>
<p>main.py<br>packageA<br>|—— __init<strong>.py<br>|—— func_a.py<br>|—— func_b.py<br>|—— packageB<br>|—— |—— __init</strong>.py<br>|—— |—— func_c.py<br>|—— |—— func_d.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入指定包中的指定模块</span></span><br><span class="line"><span class="keyword">from</span> packageA <span class="keyword">import</span> func_a, func_b</span><br><span class="line"></span><br><span class="line">func_a.func_a()  <span class="comment"># Func_a</span></span><br><span class="line">func_b.func_b()  <span class="comment"># Func_b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种导入方式,直接导入对应函数</span></span><br><span class="line"><span class="keyword">from</span> packageA.packageB.func_c <span class="keyword">import</span> func_c</span><br><span class="line"></span><br><span class="line">func_c()  <span class="comment"># Func_c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种导入方式，这种方式使用对应函数时需要使用全名</span></span><br><span class="line"><span class="keyword">import</span> packageA.packageB.func_d</span><br><span class="line"></span><br><span class="line">packageA.packageB.func_d.func_d()  <span class="comment"># Func_d</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a>__init__.py</h3><p><code>__init__.py</code> 文件用于标识 Python 软件包，执行一些在导入包时需要执行的代码以及简化导入包的流程</p>
<p>可以使用 <code>__all__ = []</code> 的方式来设置使用 <code>*</code> 导入包时应该导入的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line">__all__ = [<span class="string">&#x27;func_a&#x27;</span>, <span class="string">&#x27;func_b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> packageA <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>())</span><br><span class="line"><span class="comment"># [&#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;func_a&#x27;, &#x27;func_b&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>pip 是 Python 包管理工具</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip --version               # 显示pip版本和路径</span><br><span class="line">pip --help                  # 显示帮助</span><br><span class="line">pip install SomePackage     # 安装指定包或库</span><br><span class="line">pip install Package==1.0.4  # 安装指定版本</span><br><span class="line">pip install &#x27;Package&gt;=1.0.4&#x27;# 指定最小版本</span><br><span class="line">pip install --upgrade pkg   # 升级包</span><br><span class="line">pip uninstall pkg           # 卸载包</span><br><span class="line">pip search pkg              # 搜索包</span><br><span class="line">pip show pkg                # 查看指定包的信息</span><br><span class="line">pip list                    # 列出已安装的包</span><br><span class="line">pip list -o                 # 查看可升级的包</span><br><span class="line">pip install -i &#x27;www.&#x27;       # 安装时使用指定源</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3学习笔记-7</title>
    <url>/2022/05/27/Python3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7/</url>
    <content><![CDATA[<h2 id="单元测试-unittest"><a href="#单元测试-unittest" class="headerlink" title="单元测试 unittest"></a>单元测试 unittest</h2><p>在计算机编程中，单元测试又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件</p>
<ul>
<li>test fixture: 测试脚手架。表示为了开展一项或多项测试所需要进行的准备工作，以及所有相关的清理操作</li>
<li>test case: 测试用例。一个测试用例是一个独立的测试单元。它检查输入特定的数据时的响应。<code>unittest</code> 提供一个基类 <code>TestCase</code> 用于新建测试用例</li>
<li>test suite: 测试套件。包含一系列的测试用例，或测试套件，或两者皆有。它用于归档需要一起执行的测试</li>
<li>test runner: 测试运行器。一个用于执行和输出测试结果的组件。这个运行器可能使用图形接口、文本接口，或返回一个特定的值表示运行测试的结果</li>
</ul>
<span id="more"></span>
<h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><p><code>unittest</code> 提供了一个基本类 <code>TestCase</code> 可以用来创建新的测试用例</p>
<ul>
<li>一个 <code>TestCase</code> 类的实例就是一个测试用例</li>
<li>一个 <code>TestCase</code> 类中可以存在一个或多个测试方法，测试方法都是以 test 开头的，且执行顺序会按照方法名的 ASCII 值排序</li>
<li>一个测试用例就是一个完整的测试单元，通过运行这个测试单元，可以对某一个功能进行验证</li>
</ul>
<p>一个完整的测试用例包括</p>
<ul>
<li>测试前准备环境的搭建(setUp())</li>
<li>实现测试过程的代码(run)</li>
<li>测试后环境的还原(tearDown())</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStringMethods</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_upper</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.upper(), <span class="string">&#x27;FOO&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_isupper</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_split</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<p><code>unittest.main()</code> 方法会搜索该模块下所有以 <code>test</code> 开头的测试用例方法，并自动执行。可以添加 <code>verbosity</code> 参数来控制输出的错误报告的详细程度，默认为 1，为 0 则不输出每一用例的执行结果，为 2 输出详细的执行结果</p>
<h3 id="TestSuite"><a href="#TestSuite" class="headerlink" title="TestSuite"></a>TestSuite</h3><ul>
<li><code>unittest.TestSuite()</code> 对一个功能的验证往往需要多个测试用例，可以把测试用例集合在一起执行，就产生了测试套件 <code>TestSuite</code>，它是用来组装单个测试用例，规定用例执行的顺序，同时 TestSuite 也可以嵌套 TestSuite<ul>
<li><code>addTest()</code> 添加单个测试用例方法</li>
<li><code>addTests([])</code> 添加多个测试用例方法，方法名存放在一个列表内</li>
</ul>
</li>
<li><code>unittest.makeSuite()</code> 根据文件批量创建测试套件，如果一个文件中有非常多测试用例，可以根据用例名称的相似性创建测试套件</li>
<li><code>unittest.TestLoader()</code> 根据目录批量创建测试套件，可以指定用例存放目录，根据文件名称匹配测试用例。用例存放的子目录中必须具备 <code>__init__.py</code> 文件<ul>
<li><code>loadTestsFromTestCase(测试类名)</code> 添加一个测试类</li>
<li><code>loadTestsFromModule(模块名)</code> 添加一个模块</li>
<li><code>discover(测试用例的所在目录)</code> 指定目录去加载，会自动寻找这个目录下所有符合命名规则的测试用例</li>
</ul>
</li>
<li><code>unittest.TextTestRunner().run(TestSuite)</code> 用于在创建测试套件后执行用例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">suite = unittest.TestSuite()  <span class="comment"># 创建测试套件</span></span><br><span class="line">suite.addTest(simple_test(<span class="string">&#x27;test_add&#x27;</span>))  <span class="comment"># 添加测试用例</span></span><br><span class="line">suite.addTest(simple_test(<span class="string">&#x27;test_divide&#x27;</span>))  <span class="comment"># 向套件中添加用例</span></span><br><span class="line">suite.addTests([simple_test(<span class="string">&#x27;test_add&#x27;</span>), simple_test(<span class="string">&#x27;test_divide&#x27;</span>)])  <span class="comment"># 通过序列添加测试用例</span></span><br><span class="line"></span><br><span class="line">suite = unittest.makeSuite(simple_test, <span class="string">&#x27;test&#x27;</span>)  <span class="comment"># 创建并批量加载测试用例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载指定目录下的测试用例</span></span><br><span class="line">suites = unittest.defaultTestLoader.discover(<span class="string">&#x27;./testDirectory&#x27;</span>, pattern=<span class="string">&#x27;*_test.py&#x27;</span>)</span><br><span class="line">suites = unittest.TestLoader().discover(<span class="string">&#x27;./testDirectory&#x27;</span>, pattern=<span class="string">&#x27;*_test.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试套件</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计测试套件中用例的个数</span></span><br><span class="line">suite.countTestCases()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合多个测试套件</span></span><br><span class="line">suite1 = unittest.TheTestSuite()</span><br><span class="line">suite2 = unittest.TheTestSuite()</span><br><span class="line">alltests = unittest.TestSuite((suite1, suite2))</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStringMethods</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始测试&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_upper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 upper&#x27;</span>)</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.upper(), <span class="string">&#x27;FOO&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_isupper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 isupper&#x27;</span>)</span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_split</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 split&#x27;</span>)</span><br><span class="line">        s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 构造测试集，首先创建一个测试套件</span></span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加单条测试方法，只有被添加的测试方法才会被执行</span></span><br><span class="line">    suite.addTest(TestStringMethods(<span class="string">&#x27;test_upper&#x27;</span>))</span><br><span class="line">    suite.addTest(TestStringMethods(<span class="string">&#x27;test_isupper&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行测试</span></span><br><span class="line">    runner = unittest.TextTestRunner()</span><br><span class="line">    runner.run(suite)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">开始测试</span><br><span class="line">测试 upper</span><br><span class="line">测试结束</span><br><span class="line">开始测试</span><br><span class="line">测试 isupper</span><br><span class="line">测试结束</span><br></pre></td></tr></table></figure>
<h3 id="setUp-tearDown"><a href="#setUp-tearDown" class="headerlink" title="setUp, tearDown"></a>setUp, tearDown</h3><ul>
<li><code>setUP()</code><ul>
<li>初始化。在执行测试之前执行，用于准备本次测试所需环境</li>
<li>比如测试时需要访问数据库，就可以在 <code>setUp()</code> 中与数据库建立连接</li>
<li><code>setUp()</code> 方法中还可以用来定义一些公共的变量、代码等。这样在整个测试类中都可以调用这些公共的变量、数据</li>
</ul>
</li>
<li><code>tearDown()</code><ul>
<li>在执行测试之后执行，用于在下一次执行测试前还原环境</li>
<li>比如关闭数据库的连接</li>
</ul>
</li>
</ul>
<h4 id="方法维度"><a href="#方法维度" class="headerlink" title="方法维度"></a>方法维度</h4><p>以测试方法（类方法）为维度的 <code>setUp()</code> 和 <code>tearDown()</code> 在执行每个测试方法的前后都会执行一次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStringMethods</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始测试&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_upper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 upper&#x27;</span>)</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.upper(), <span class="string">&#x27;FOO&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_isupper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 isupper&#x27;</span>)</span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_split</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 split&#x27;</span>)</span><br><span class="line">        s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">...</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">3</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">开始测试</span><br><span class="line">测试 isupper</span><br><span class="line">测试结束</span><br><span class="line">开始测试</span><br><span class="line">测试 split</span><br><span class="line">测试结束</span><br><span class="line">开始测试</span><br><span class="line">测试 upper</span><br><span class="line">测试结束</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="类维度"><a href="#类维度" class="headerlink" title="类维度"></a>类维度</h4><p>以测试类（TestCase）为维度的 <code>setUpClass()</code> 和 <code>tearDownClass()</code> 在执行每个测试类的前后执行一次。需要用 <code>@classmethod</code> 修饰</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStringMethods</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;开始测试&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_upper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 upper&#x27;</span>)</span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.upper(), <span class="string">&#x27;FOO&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_isupper</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 isupper&#x27;</span>)</span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.isupper())</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_split</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试 split&#x27;</span>)</span><br><span class="line">        s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span><br><span class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            s.split(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">...</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">3</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">开始测试</span><br><span class="line">测试 isupper</span><br><span class="line">测试 split</span><br><span class="line">测试 upper</span><br><span class="line">测试结束</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程（ Thread）是操作系统能够进行运算调度的最小单位。大部分情况下，它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务</p>
<p>线程是独立调度和分派的基本单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）</p>
<h3 id="为什么要使用多线程"><a href="#为什么要使用多线程" class="headerlink" title="为什么要使用多线程"></a>为什么要使用多线程</h3><ul>
<li><p>线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄和其他进程应有的状态</p>
</li>
<li><p>因为线程的划分尺度小于进程，使得多线程的并发性高。进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而提高了程序的运行效率</p>
</li>
<li><p>操作系统在创建进程时，必须为该进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程来实现并发比使用多进程的性能高得要多</p>
</li>
</ul>
<h3 id="thread-模块"><a href="#thread-模块" class="headerlink" title="thread 模块"></a>thread 模块</h3><p>Python3 中可以使用 <code>thread</code> 模块来生成新线程</p>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3实现十大排序算法</title>
    <url>/2022/06/12/Python3%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是指将序列中最大的值像泡泡一样冒到序列的顶端（最后）。将序列分为未排序序列和已排序序列，从头开始扫描未排序序列，并比较相邻的两个元素值的大小，将较大的值交换到后面，然后继续，直到一轮扫描结束，整个序列的最大值将被放在序列的最后，此时已排序序列就是该最大值。然后开始第二轮扫描，将第二大的值放在倒数第二位，如此不断将未排序序列的最大值交换到已排序序列，直到未排序序列长度为 1</p>
<span id="more"></span>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Omicron(n^2)$<br>最坏时间复杂度：$\Omicron(n^2)$<br>最优时间复杂度：$\Omicron(n)$<br>空间复杂度：$\Omicron(1)$，需要辅助空间 $\Omicron(1)$</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，</span></span><br><span class="line"><span class="string">    一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，</span></span><br><span class="line"><span class="string">    也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢&quot;浮&quot;到数列的顶端。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="string">        2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</span></span><br><span class="line"><span class="string">        3. 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="string">        4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;冒泡排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(tmp)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tmp) - i):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &gt; tmp[j + <span class="number">1</span>]:</span><br><span class="line">                tmp[j], tmp[j + <span class="number">1</span>] = tmp[j + <span class="number">1</span>], tmp[j]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>可以在排序时进行是否交换过元素位置的检测，如果没有交换过位置，那么说明序列已经有序，这时就可以停止扫描</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序是指从头到尾扫描整个序列，从未排序序列中找到一个最小的元素，将其与第一个元素交换构成已排序序列。然后再在未排序序列的剩余的元素中重复该操作，不断将未排序序列中的最小值添加到已排序序列的末尾，直到未排序序列长度为 1</p>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Omicron(n^2)$<br>最坏时间复杂度：$\Omicron(n^2)$<br>最优时间复杂度：$\Omicron(n^2)$<br>空间复杂度：总共 $\Omicron(n)$，需要辅助空间 $\Omicron(1)$</p>
<h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class="line"><span class="string">        2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class="line"><span class="string">        3. 重复第二步，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;选择排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(tmp)):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &lt; tmp[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="keyword">if</span> i != min_index:</span><br><span class="line">            tmp[i], tmp[min_index] = tmp[min_index], tmp[i]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>可以在一次循环中，同时找出最大值和最小值，分别放在序列头和尾，这样可以减少一半的循环次数</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序是通过构建一个有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p>
<h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Omicron(n^2)$<br>最坏时间复杂度：$\Omicron(n^2)$<br>最优时间复杂度：$\Omicron(n)$<br>空间复杂度：总共 $\Omicron(n)$，需要辅助空间 $\Omicron(1)$</p>
<h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</span></span><br><span class="line"><span class="string">        2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，</span></span><br><span class="line"><span class="string">        则将待插入元素插入到相等元素的后面。）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;插入排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        curr = tmp[i]</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp[j] &gt; curr:</span><br><span class="line">            tmp[j + <span class="number">1</span>] = tmp[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        tmp[j + <span class="number">1</span>] = curr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h3 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h3><ol>
<li>查找插入位置时，可以使用二分查找的方式</li>
<li>可以同时比较多个未排序元素，减少循环次数</li>
<li>数据链表化</li>
<li>希尔排序</li>
</ol>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止</p>
<p>希尔排序是一种不稳定排序</p>
<h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：根据步长序列的不同而不同<br>最坏时间复杂度：根据步长序列的不同而不同。已知最好的 $\Omicron(n\,log^2{n})$<br>最优时间复杂度：$\Omicron(n)$<br>空间复杂度：$\Omicron(1)$</p>
<h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，</span></span><br><span class="line"><span class="string">    每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 取一个小于 n 的整数 d1 作为第一个增量，把文件的全部记录分组。所有距离为d1的倍数的记录放在同一个组中。</span></span><br><span class="line"><span class="string">        2. 在各组内进行直接插入排序；</span></span><br><span class="line"><span class="string">        3. 然后，取第二个增量 d2，直到增量为 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;希尔排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    gap = <span class="built_in">len</span>(tmp) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(tmp)):</span><br><span class="line">            <span class="keyword">while</span> i &gt;= gap <span class="keyword">and</span> tmp[i - gap] &gt; tmp[i]:</span><br><span class="line">                tmp[i - gap], tmp[i] = tmp[i], tmp[i - gap]</span><br><span class="line">                i -= gap</span><br><span class="line">        gap //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快排又叫分区交换排序，是指从序列中选取一个值作为基准值，小于它的都放在它左边，大于它的都放在右边，得到两个区间。然后在两个区间上重复操作，直到各区间个数为 1</p>
<h3 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Theta(n\,log{n})$<br>最坏时间复杂度：$\Theta(n^2)$<br>最优时间复杂度：$\Theta(n\,log{n})$<br>空间复杂度：根据实现的方式不同而不同</p>
<h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort_digui</span>(<span class="params">seq, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">    left = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(left, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> left</span><br><span class="line">    right = <span class="built_in">len</span>(seq) - <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(right, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> right</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> seq</span><br><span class="line">    <span class="comment"># 取第一个位置的元素作为基准元素</span></span><br><span class="line">    pivot = seq[left]</span><br><span class="line">    <span class="comment"># 设定两个指针</span></span><br><span class="line">    i = left</span><br><span class="line">    j = right</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># j 指针一直左移直到遇到比 pivot 小的值</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> seq[j] &gt;= pivot:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        seq[i] = seq[j]</span><br><span class="line">        <span class="comment"># i 指针一直右移直到遇到比 pivot 大的值</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> seq[i] &lt;= pivot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        seq[j] = seq[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当 i，j 相等时，即 pivot 已经处于分界的位置</span></span><br><span class="line">    seq[i] = pivot</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归处理被分界好的两个子序列</span></span><br><span class="line">    quick_sort_digui(seq, left, i - <span class="number">1</span>)</span><br><span class="line">    quick_sort_digui(seq, i + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort_diedai</span>(<span class="params">seq</span>):</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(tmp) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用栈的思路来保存上下界</span></span><br><span class="line">    stack = [left, right]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        low = stack.pop(<span class="number">0</span>)</span><br><span class="line">        high = stack.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> high - low &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        pivot = tmp[high]</span><br><span class="line">        i = low - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只用了一次循环就找到了分界下标</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(low, high):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &lt;= pivot:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                tmp[i], tmp[j] = tmp[j], tmp[i]</span><br><span class="line">        tmp[i + <span class="number">1</span>], tmp[high] = tmp[high], tmp[i + <span class="number">1</span>]</span><br><span class="line">        stack.extend([low, i, i + <span class="number">2</span>, high])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行语句实现</span></span><br><span class="line">quick_sort_one_line = <span class="keyword">lambda</span> seq: seq <span class="keyword">if</span> <span class="built_in">len</span>(seq) &lt;= <span class="number">1</span> <span class="keyword">else</span> \</span><br><span class="line">    quick_sort_one_line([item <span class="keyword">for</span> item <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> item &lt;= seq[<span class="number">0</span>]]) + \</span><br><span class="line">    [seq[<span class="number">0</span>]] + \</span><br><span class="line">    quick_sort_one_line([item <span class="keyword">for</span> item <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> item &gt; seq[<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>
<h3 id="优化-3"><a href="#优化-3" class="headerlink" title="优化"></a>优化</h3><ol>
<li>优化基准值的选取：可以间隔一定值取一个数，然后用中间值作为基准值</li>
<li>在区间元素个数小于 10 个的时候可以使用插入排序，效率更高</li>
</ol>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是指将两个有序的序列合并为一个序列的操作。将未排序序列分割为两个未排序的子序列，然后再将子序列分割为两个子序列，继续分割直到子序列的长度为 1，此时合并两个长度为 1 的子序列，合并方式为同时遍历两个子序列，将当前值较小的那一个添加到新申请的空间中，直到这两个子序列被全部添加到新空间结束，这时这两个子序列合并的新序列即为有序序列，然后再递归地使父序列有序</p>
<h3 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Theta(n\,log{n})$<br>最坏时间复杂度：$\Theta(n\,log{n})$<br>最优时间复杂度：$\Theta(n\,log{n})$<br>空间复杂度：$\Theta(n)$</p>
<h3 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort_digui</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二分的方式分解子序列</span></span><br><span class="line">    mid = <span class="built_in">len</span>(seq) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分别对两个子序列进行处理，返回排好序的序列</span></span><br><span class="line">    left = merge_sort_digui(seq[:mid])</span><br><span class="line">    right = merge_sort_digui(seq[mid:])</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两个指针来遍历两个子序列</span></span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 在其中一个序列被遍历完后，将序列剩余部分添加到结果序列中</span></span><br><span class="line">    result.extend(left[i:] <span class="keyword">if</span> left[i:] <span class="keyword">else</span> right[j:])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用 merge 函数对子序列进行排序合并</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort_diedai</span>(<span class="params">seq</span>):</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &lt; <span class="built_in">len</span>(tmp):</span><br><span class="line">        l_start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l_start &lt;= <span class="built_in">len</span>(tmp) - gap:</span><br><span class="line">            result = <span class="built_in">list</span>()</span><br><span class="line">            l_end = r_start = l_start + gap</span><br><span class="line">            r_end = r_start + gap</span><br><span class="line">            <span class="keyword">if</span> r_end &gt; <span class="built_in">len</span>(tmp):</span><br><span class="line">                r_end = <span class="built_in">len</span>(tmp)</span><br><span class="line">            left = tmp[l_start:l_end]</span><br><span class="line">            right = tmp[r_start:r_end]</span><br><span class="line">            <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">                <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">                    result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">            result.extend(left <span class="keyword">if</span> left <span class="keyword">else</span> right)</span><br><span class="line">            tmp[l_start:r_end] = result</span><br><span class="line">            l_start += gap * <span class="number">2</span></span><br><span class="line">        gap *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>通过不断构建大顶堆或小顶堆来找到最大、最小值从而实现排序</p>
<p>堆：完全二叉树结构。对应数组的下标有：<code>seq[i]</code> 的左节点下标为 <code>seq[2i+1]</code>，右节点下标为 <code>seq[2i+2]</code>，父节点下标为 <code>seq[(i-1)/2]</code></p>
<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列</p>
<p>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</p>
<h3 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Theta(n\,log{n})$<br>最坏时间复杂度：$\Omicron(n\,log{n})$<br>最优时间复杂度：$\Omicron(n\,log{n})$<br>空间复杂度：总共 $\Omicron(n)$，需要辅助空间 $\Omicron(1)$</p>
<h3 id="算法实现-6"><a href="#算法实现-6" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，</span></span><br><span class="line"><span class="string">    并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 创建一个堆 H[0……n-1]；</span></span><br><span class="line"><span class="string">        2. 把堆首（最大值）和堆尾互换；</span></span><br><span class="line"><span class="string">        3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</span></span><br><span class="line"><span class="string">        4. 重复步骤 2，直到堆的尺寸为 1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;堆排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="comment"># 构建大顶堆，最后一个非叶子节点的下标值为 len(seq) // 2 - 1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        heapify(tmp, i, <span class="built_in">len</span>(tmp))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建好之后将最后一个元素与第一个元素交换，即将最大的元素放到未排序序列的最后</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        tmp[<span class="number">0</span>], tmp[j] = tmp[j], tmp[<span class="number">0</span>]</span><br><span class="line">        heapify(tmp, <span class="number">0</span>, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heapify</span>(<span class="params">seq, i, len_seq</span>):</span><br><span class="line">    <span class="comment"># 左节点</span></span><br><span class="line">    left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 右节点</span></span><br><span class="line">    right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    <span class="comment"># 左右子节点、父节点中值最大的节点的下标，设为父节点</span></span><br><span class="line">    large_index = i</span><br><span class="line">    <span class="keyword">if</span> left &lt; len_seq <span class="keyword">and</span> seq[left] &gt; seq[large_index]:</span><br><span class="line">        large_index = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; len_seq <span class="keyword">and</span> seq[right] &gt; seq[large_index]:</span><br><span class="line">        large_index = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> large_index != i:</span><br><span class="line">        seq[i], seq[large_index] = seq[large_index], seq[i]</span><br><span class="line">        <span class="comment"># 父节点与子节点交换位置之后，很可能该子节点所属的子树，又不符合大顶堆的规则了</span></span><br><span class="line">        <span class="comment"># 所以要对该子节点再做一次heapify，使其符合大顶堆的规则</span></span><br><span class="line">        heapify(seq, large_index, len_seq)</span><br></pre></td></tr></table></figure>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序就是统计未排序序列中每个值出现的次数，放到一个数组中，即下标对应未排序序列中的值，值对应出现的次数。统计完成后再遍历统计数组依次将数据填回到未排序序列中</p>
<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。计数排序使用一个额外的数组 C ，其中第i个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置</p>
<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 $\Theta(n+k)$。计数排序不是比较排序，因此不被 $\Omega(n\,logn)$ 的下界限制</p>
<p>由于用来计数的数组 C 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序 0 到 100 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组</p>
<h3 id="复杂度-7"><a href="#复杂度-7" class="headerlink" title="复杂度"></a>复杂度</h3><p>当输入的元素是 n 个 0 到 k 之间的整数时：</p>
<p>平均时间复杂度：$\Omicron(n+k)$<br>最坏时间复杂度：$\Omicron(n+k)$<br>最优时间复杂度：$\Omicron(n+k)$<br>空间复杂度：$\Omicron(n+k)$</p>
<h3 id="算法实现-7"><a href="#算法实现-7" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counting_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，</span></span><br><span class="line"><span class="string">    计数排序要求输入的数据必须是有确定范围的整数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 找出待排序的数组中最大和最小的元素</span></span><br><span class="line"><span class="string">        2. 统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i - minValue 项</span></span><br><span class="line"><span class="string">        3. 对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</span></span><br><span class="line"><span class="string">        4. 反向填充目标数组：将每个元素 i 放在新数组的第 C[i] 项，每放一个元素就将 C[i] 减去1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计数排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    min_value, max_value = <span class="built_in">min</span>(tmp), <span class="built_in">max</span>(tmp)</span><br><span class="line"></span><br><span class="line">    bucket = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_value - min_value + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        bucket[tmp[j] - min_value] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(bucket):</span><br><span class="line">        <span class="keyword">while</span> item &gt; <span class="number">0</span>:</span><br><span class="line">            tmp[count] = index + min_value</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            item -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>
</ol>
<p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要</p>
<h3 id="复杂度-8"><a href="#复杂度-8" class="headerlink" title="复杂度"></a>复杂度</h3><p>平均时间复杂度：$\Omicron(n+k)$<br>最坏时间复杂度：$\Omicron(n^2)$<br>空间复杂度：$\Omicron(n \cdot k)$</p>
<h3 id="算法实现-8"><a href="#算法实现-8" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;集合中处于同一个值域的元素存入同一个桶中，也就是根据元素值特性将集合拆分为多个区域，则拆分后形成的多个桶，</span></span><br><span class="line"><span class="string">    从值域上看是处于有序状态的。对每个桶中元素进行排序，则所有桶中元素构成的集合是已排序的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 根据待排序集合中最大元素和最小元素的差值范围和映射规则，确定申请的桶个数；</span></span><br><span class="line"><span class="string">        2. 遍历排序序列，将每个元素放到对应的桶里去；</span></span><br><span class="line"><span class="string">        3. 对不是空的桶进行排序；</span></span><br><span class="line"><span class="string">        4. 按顺序访问桶，将桶中的元素依次放回到原序列中对应的位置，完成排序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;桶排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    min_value, max_value = <span class="built_in">min</span>(tmp), <span class="built_in">max</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里的分桶规则设定为除个位外剩余的数字，如 12 号放在 1 号桶，123 放在 12 号桶</span></span><br><span class="line">    bucket_list = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>((max_value - min_value) // <span class="number">10</span> + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        bucket_num = i // <span class="number">10</span> <span class="keyword">if</span> i &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket_list[bucket_num].append(i)</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            bucket_list[bucket_num] = []</span><br><span class="line">            bucket_list[bucket_num].append(i)</span><br><span class="line"></span><br><span class="line">    tmp.clear()</span><br><span class="line">    <span class="comment"># 桶内排序，这里使用 sort</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> bucket_list:</span><br><span class="line">        j.sort()</span><br><span class="line">        tmp.extend(j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数</p>
<h3 id="复杂度-9"><a href="#复杂度-9" class="headerlink" title="复杂度"></a>复杂度</h3><p>k 为数字位数</p>
<p>最坏时间复杂度：$\Omicron(kn)$<br>空间复杂度：$\Omicron(k+n)$</p>
<h3 id="算法实现-9"><a href="#算法实现-9" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 取得数组中的最大数，并取得位数；</span></span><br><span class="line"><span class="string">        2. 对数位较短的数前面补零；</span></span><br><span class="line"><span class="string">        3. 分配，先从个位开始，根据位值(0-9)分别放到0~9号桶中;</span></span><br><span class="line"><span class="string">        4. 收集，再将放置在0~9号桶中的数据按顺序放到数组中;</span></span><br><span class="line"><span class="string">        5. 重复3~4过程，直到最高位，即可完成排序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;基数排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    max_value = <span class="built_in">max</span>(tmp)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> max_value &gt; <span class="number">0</span>:</span><br><span class="line">        max_value //= <span class="number">10</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    bucket_list = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="comment"># 放入桶中</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> tmp:</span><br><span class="line">            j = item // (<span class="number">10</span> ** i) % <span class="number">10</span></span><br><span class="line">            bucket_list[j].append(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放回数组</span></span><br><span class="line">        tmp.clear()</span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> bucket_list:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bucket)):</span><br><span class="line">                tmp.append(bucket.pop(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure>
<h2 id="整体实现"><a href="#整体实现" class="headerlink" title="整体实现"></a>整体实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">sort_def</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">sort_def</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        res = sort_def(*args, **kwargs)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        <span class="comment"># print(&#x27;Result:&#x27;, res)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cost:&#x27;</span>, time2 - time1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，</span></span><br><span class="line"><span class="string">    一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，</span></span><br><span class="line"><span class="string">    也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢&quot;浮&quot;到数列的顶端。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="string">        2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</span></span><br><span class="line"><span class="string">        3. 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="string">        4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;冒泡排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(tmp)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tmp) - i):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &gt; tmp[j + <span class="number">1</span>]:</span><br><span class="line">                tmp[j], tmp[j + <span class="number">1</span>] = tmp[j + <span class="number">1</span>], tmp[j]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class="line"><span class="string">        2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class="line"><span class="string">        3. 重复第二步，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;选择排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) - <span class="number">1</span>):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(tmp)):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &lt; tmp[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="keyword">if</span> i != min_index:</span><br><span class="line">            tmp[i], tmp[min_index] = tmp[min_index], tmp[i]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</span></span><br><span class="line"><span class="string">        2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，</span></span><br><span class="line"><span class="string">        则将待插入元素插入到相等元素的后面。）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;插入排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        curr = tmp[i]</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp[j] &gt; curr:</span><br><span class="line">            tmp[j + <span class="number">1</span>] = tmp[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        tmp[j + <span class="number">1</span>] = curr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，</span></span><br><span class="line"><span class="string">    每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 取一个小于 n 的整数 d1 作为第一个增量，把文件的全部记录分组。所有距离为d1的倍数的记录放在同一个组中。</span></span><br><span class="line"><span class="string">        2. 在各组内进行直接插入排序；</span></span><br><span class="line"><span class="string">        3. 然后，取第二个增量 d2，直到增量为 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;希尔排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    gap = <span class="built_in">len</span>(tmp) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(tmp)):</span><br><span class="line">            <span class="keyword">while</span> i &gt;= gap <span class="keyword">and</span> tmp[i - gap] &gt; tmp[i]:</span><br><span class="line">                tmp[i - gap], tmp[i] = tmp[i], tmp[i - gap]</span><br><span class="line">                i -= gap</span><br><span class="line">        gap //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;归并排序是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</span></span><br><span class="line"><span class="string">    将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</span></span><br><span class="line"><span class="string">        2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置</span></span><br><span class="line"><span class="string">        3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</span></span><br><span class="line"><span class="string">        4. 重复步骤3直到某一指针超出序列尾</span></span><br><span class="line"><span class="string">        5. 将另一序列剩下的所有元素直接复制到合并序列尾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归方式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;归并排序--递归&#x27;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    res = merge_sort_digui(tmp)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="comment"># print(&#x27;Result:&#x27;, res)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Cost:&#x27;</span>, end - start)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 迭代方式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;归并排序--迭代&#x27;</span>)</span><br><span class="line">    merge_sort_diedai(seq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort_digui</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二分的方式分解子序列</span></span><br><span class="line">    mid = <span class="built_in">len</span>(seq) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分别对两个子序列进行处理，返回排好序的序列</span></span><br><span class="line">    left = merge_sort_digui(seq[:mid])</span><br><span class="line">    right = merge_sort_digui(seq[mid:])</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两个指针来遍历两个子序列</span></span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 在其中一个序列被遍历完后，将序列剩余部分添加到结果序列中</span></span><br><span class="line">    result.extend(left[i:] <span class="keyword">if</span> left[i:] <span class="keyword">else</span> right[j:])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用 merge 函数对子序列进行排序合并</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort_diedai</span>(<span class="params">seq</span>):</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> gap &lt; <span class="built_in">len</span>(tmp):</span><br><span class="line">        l_start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l_start &lt;= <span class="built_in">len</span>(tmp) - gap:</span><br><span class="line">            result = <span class="built_in">list</span>()</span><br><span class="line">            l_end = r_start = l_start + gap</span><br><span class="line">            r_end = r_start + gap</span><br><span class="line">            <span class="keyword">if</span> r_end &gt; <span class="built_in">len</span>(tmp):</span><br><span class="line">                r_end = <span class="built_in">len</span>(tmp)</span><br><span class="line">            left = tmp[l_start:l_end]</span><br><span class="line">            right = tmp[r_start:r_end]</span><br><span class="line">            <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">                <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">                    result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">            result.extend(left <span class="keyword">if</span> left <span class="keyword">else</span> right)</span><br><span class="line">            tmp[l_start:r_end] = result</span><br><span class="line">            l_start += gap * <span class="number">2</span></span><br><span class="line">        gap *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;快速排序(Quick Sort)是对冒泡排序的一种改进，其的基本思想:选一基准元素，依次将剩余元素中小于该基准元素的值放置其左侧，</span></span><br><span class="line"><span class="string">    大于等于该基准元素的值放置其右侧；然后，取基准元素的前半部分和后半部分分别进行同样的处理；以此类推，</span></span><br><span class="line"><span class="string">    直至各子序列剩余一个元素时，即排序完成（类比二叉树的思想)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 首先设定一个分界值(pivot)，通过该分界值将数组分成左右两部分。</span></span><br><span class="line"><span class="string">        2. 将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。</span></span><br><span class="line"><span class="string">        此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值,这个称为分区（partition）操作。</span></span><br><span class="line"><span class="string">        3. 然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，</span></span><br><span class="line"><span class="string">        同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</span></span><br><span class="line"><span class="string">        4. 重复上述过程，通过递归（recursive）将左侧部分排好序后，再递归排好右侧部分的顺序。</span></span><br><span class="line"><span class="string">        当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归方式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;快速排序--递归&#x27;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    res = quick_sort_digui(tmp)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="comment"># print(&#x27;Result:&#x27;, res)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Cost:&#x27;</span>, end - start)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 迭代方式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;快速排序--迭代&#x27;</span>)</span><br><span class="line">    quick_sort_diedai(seq)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一行代码实现快排</span></span><br><span class="line">    <span class="comment"># 数据过大时会报错，因此禁用</span></span><br><span class="line">    <span class="comment"># RecursionError: maximum recursion depth exceeded in comparison</span></span><br><span class="line">    <span class="comment"># print(&#x27;快速排序--一行代码&#x27;)</span></span><br><span class="line">    <span class="comment"># start = time.time()</span></span><br><span class="line">    <span class="comment"># res = quick_sort_one_line(tmp)</span></span><br><span class="line">    <span class="comment"># end = time.time()</span></span><br><span class="line">    <span class="comment"># # print(&#x27;Result:&#x27;, res)</span></span><br><span class="line">    <span class="comment"># print(&#x27;Cost:&#x27;, end - start)</span></span><br><span class="line">    <span class="comment"># print(&#x27;-&#x27; * 50)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort_digui</span>(<span class="params">seq, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">    left = <span class="number">0</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(left, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> left</span><br><span class="line">    right = <span class="built_in">len</span>(seq) - <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(right, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">else</span> right</span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> seq</span><br><span class="line">    <span class="comment"># 取第一个位置的元素作为基准元素</span></span><br><span class="line">    pivot = seq[left]</span><br><span class="line">    <span class="comment"># 设定两个指针</span></span><br><span class="line">    i = left</span><br><span class="line">    j = right</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># j 指针一直左移直到遇到比 pivot 小的值</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> seq[j] &gt;= pivot:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        seq[i] = seq[j]</span><br><span class="line">        <span class="comment"># i 指针一直右移直到遇到比 pivot 大的值</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> seq[i] &lt;= pivot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        seq[j] = seq[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当 i，j 相等时，即 pivot 已经处于分界的位置</span></span><br><span class="line">    seq[i] = pivot</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归处理被分界好的两个子序列</span></span><br><span class="line">    quick_sort_digui(seq, left, i - <span class="number">1</span>)</span><br><span class="line">    quick_sort_digui(seq, i + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort_diedai</span>(<span class="params">seq</span>):</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(tmp) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用栈的思路来保存上下界</span></span><br><span class="line">    stack = [left, right]</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        low = stack.pop(<span class="number">0</span>)</span><br><span class="line">        high = stack.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> high - low &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        pivot = tmp[high]</span><br><span class="line">        i = low - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只用了一次循环就找到了分界下标</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(low, high):</span><br><span class="line">            <span class="keyword">if</span> tmp[j] &lt;= pivot:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                tmp[i], tmp[j] = tmp[j], tmp[i]</span><br><span class="line">        tmp[i + <span class="number">1</span>], tmp[high] = tmp[high], tmp[i + <span class="number">1</span>]</span><br><span class="line">        stack.extend([low, i, i + <span class="number">2</span>, high])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码实现快排</span></span><br><span class="line">quick_sort_one_line = <span class="keyword">lambda</span> seq: seq <span class="keyword">if</span> <span class="built_in">len</span>(seq) &lt;= <span class="number">1</span> <span class="keyword">else</span> \</span><br><span class="line">    quick_sort_one_line([item <span class="keyword">for</span> item <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> item &lt;= seq[<span class="number">0</span>]]) + \</span><br><span class="line">    [seq[<span class="number">0</span>]] + \</span><br><span class="line">    quick_sort_one_line([item <span class="keyword">for</span> item <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> item &gt; seq[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，</span></span><br><span class="line"><span class="string">    并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 创建一个堆 H[0……n-1]；</span></span><br><span class="line"><span class="string">        2. 把堆首（最大值）和堆尾互换；</span></span><br><span class="line"><span class="string">        3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</span></span><br><span class="line"><span class="string">        4. 重复步骤 2，直到堆的尺寸为 1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;堆排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line">    <span class="comment"># 构建大顶堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        heapify(tmp, i, <span class="built_in">len</span>(tmp))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建好之后将最后一个元素与第一个元素交换，即将最大的元素放到未排序序列的最后</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        tmp[<span class="number">0</span>], tmp[j] = tmp[j], tmp[<span class="number">0</span>]</span><br><span class="line">        heapify(tmp, <span class="number">0</span>, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heapify</span>(<span class="params">seq, i, len_seq</span>):</span><br><span class="line">    left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    large_index = i</span><br><span class="line">    <span class="keyword">if</span> left &lt; len_seq <span class="keyword">and</span> seq[left] &gt; seq[large_index]:</span><br><span class="line">        large_index = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; len_seq <span class="keyword">and</span> seq[right] &gt; seq[large_index]:</span><br><span class="line">        large_index = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> large_index != i:</span><br><span class="line">        seq[i], seq[large_index] = seq[large_index], seq[i]</span><br><span class="line">        <span class="comment"># 父节点与子节点交换位置之后，很可能该子节点所属的子树，又不符合大顶堆的规则了</span></span><br><span class="line">        <span class="comment"># 所以要对该子节点再做一次heapify，使其符合大顶堆的规则</span></span><br><span class="line">        heapify(seq, large_index, len_seq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">counting_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，</span></span><br><span class="line"><span class="string">    计数排序要求输入的数据必须是有确定范围的整数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 找出待排序的数组中最大和最小的元素</span></span><br><span class="line"><span class="string">        2. 统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i - minValue 项</span></span><br><span class="line"><span class="string">        3. 对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</span></span><br><span class="line"><span class="string">        4. 反向填充目标数组：将每个元素 i 放在新数组的第 C[i] 项，每放一个元素就将 C[i] 减去1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;计数排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    min_value, max_value = <span class="built_in">min</span>(tmp), <span class="built_in">max</span>(tmp)</span><br><span class="line"></span><br><span class="line">    bucket = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_value - min_value + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        bucket[tmp[j] - min_value] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(bucket):</span><br><span class="line">        <span class="keyword">while</span> item &gt; <span class="number">0</span>:</span><br><span class="line">            tmp[count] = index + min_value</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            item -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 桶排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;集合中处于同一个值域的元素存入同一个桶中，也就是根据元素值特性将集合拆分为多个区域，则拆分后形成的多个桶，</span></span><br><span class="line"><span class="string">    从值域上看是处于有序状态的。对每个桶中元素进行排序，则所有桶中元素构成的集合是已排序的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 根据待排序集合中最大元素和最小元素的差值范围和映射规则，确定申请的桶个数；</span></span><br><span class="line"><span class="string">        2. 遍历排序序列，将每个元素放到对应的桶里去；</span></span><br><span class="line"><span class="string">        3. 对不是空的桶进行排序；</span></span><br><span class="line"><span class="string">        4. 按顺序访问桶，将桶中的元素依次放回到原序列中对应的位置，完成排序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;桶排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    min_value, max_value = <span class="built_in">min</span>(tmp), <span class="built_in">max</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里的分桶规则设定为除个位外剩余的数字，如 12 号放在 1 号桶，123 放在 12 号桶</span></span><br><span class="line">    bucket_list = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>((max_value - min_value) // <span class="number">10</span> + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">        bucket_num = i // <span class="number">10</span> <span class="keyword">if</span> i &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket_list[bucket_num].append(i)</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            bucket_list[bucket_num] = []</span><br><span class="line">            bucket_list[bucket_num].append(i)</span><br><span class="line"></span><br><span class="line">    tmp.clear()</span><br><span class="line">    <span class="comment"># 桶内排序，这里使用 sort</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> bucket_list:</span><br><span class="line">        j.sort()</span><br><span class="line">        tmp.extend(j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    算法步骤：</span></span><br><span class="line"><span class="string">        1. 取得数组中的最大数，并取得位数；</span></span><br><span class="line"><span class="string">        2. 对数位较短的数前面补零；</span></span><br><span class="line"><span class="string">        3. 分配，先从个位开始，根据位值(0-9)分别放到0~9号桶中;</span></span><br><span class="line"><span class="string">        4. 收集，再将放置在0~9号桶中的数据按顺序放到数组中;</span></span><br><span class="line"><span class="string">        5. 重复3~4过程，直到最高位，即可完成排序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param seq: 需要排序的数组</span></span><br><span class="line"><span class="string">    :return: 返回排好序的数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;基数排序&#x27;</span>)</span><br><span class="line">    tmp = seq[:]</span><br><span class="line"></span><br><span class="line">    max_value = <span class="built_in">max</span>(tmp)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> max_value &gt; <span class="number">0</span>:</span><br><span class="line">        max_value //= <span class="number">10</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    bucket_list = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="comment"># 放入桶中</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> tmp:</span><br><span class="line">            j = item // (<span class="number">10</span> ** i) % <span class="number">10</span></span><br><span class="line">            bucket_list[j].append(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放回数组</span></span><br><span class="line">        tmp.clear()</span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> bucket_list:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bucket)):</span><br><span class="line">                tmp.append(bucket.pop(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test_list = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">50000</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数据规模:&#x27;</span>, <span class="built_in">len</span>(test_list))</span><br><span class="line">    random.shuffle(test_list)</span><br><span class="line">    <span class="comment"># print(&#x27;Test_list:\n&#x27;, test_list)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    bubble_sort(test_list)</span><br><span class="line">    selection_sort(test_list)</span><br><span class="line">    insert_sort(test_list)</span><br><span class="line">    shell_sort(test_list)</span><br><span class="line">    merge_sort(test_list)</span><br><span class="line">    quick_sort(test_list)</span><br><span class="line">    heap_sort(test_list)</span><br><span class="line">    counting_sort(test_list)</span><br><span class="line">    bucket_sort(test_list)</span><br><span class="line">    radix_sort(test_list)</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">数据规模: 50000</span><br><span class="line">--------------------------------------------------</span><br><span class="line">冒泡排序</span><br><span class="line">Cost: 119.81784915924072</span><br><span class="line">--------------------------------------------------</span><br><span class="line">选择排序</span><br><span class="line">Cost: 51.1634795665741</span><br><span class="line">--------------------------------------------------</span><br><span class="line">插入排序</span><br><span class="line">Cost: 53.79687190055847</span><br><span class="line">--------------------------------------------------</span><br><span class="line">希尔排序</span><br><span class="line">Cost: 0.22220230102539062</span><br><span class="line">--------------------------------------------------</span><br><span class="line">归并排序--递归</span><br><span class="line">Cost: 0.15013575553894043</span><br><span class="line">--------------------------------------------------</span><br><span class="line">归并排序--迭代</span><br><span class="line">Cost: 0.2652411460876465</span><br><span class="line">--------------------------------------------------</span><br><span class="line">快速排序--递归</span><br><span class="line">Cost: 0.08607816696166992</span><br><span class="line">--------------------------------------------------</span><br><span class="line">快速排序--迭代</span><br><span class="line">Cost: 0.19918084144592285</span><br><span class="line">--------------------------------------------------</span><br><span class="line">堆排序</span><br><span class="line">Cost: 0.23421239852905273</span><br><span class="line">--------------------------------------------------</span><br><span class="line">计数排序</span><br><span class="line">Cost: 0.013011932373046875</span><br><span class="line">--------------------------------------------------</span><br><span class="line">桶排序</span><br><span class="line">Cost: 0.008007287979125977</span><br><span class="line">--------------------------------------------------</span><br><span class="line">基数排序</span><br><span class="line">Cost: 0.13011837005615234</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>Arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3服务端学习</title>
    <url>/2022/06/16/Python3%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在做任何项目之前，最重要的是首先搞明白自己需要做什么，技术应当服务于目标，如果只有技术而没有目标，就会不知道该做什么。所以一定要明确自己的需求，清晰明白地将其表达出来</p>
<h2 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h2><p>一个网络服务器是一台托管一个或多个网站的计算机。 “托管”意思是所有的网页和它们的支持文件在那台计算机上都可用。网络服务器会根据每位用户的请求，将任意网页从托管的网站中发送到任意用户的浏览器中</p>
<h3 id="静态、动态网络服务器"><a href="#静态、动态网络服务器" class="headerlink" title="静态、动态网络服务器"></a>静态、动态网络服务器</h3><p>静态网络服务器（static web server），或者堆栈，由一个计算机（硬件）和一个 HTTP 服务器（软件）组成。我们称它为“静态”是因为这个服务器把它托管文件的“保持原样”地传送到你的浏览器</p>
<p>动态网络服务器（dynamic web server） 由一个静态的网络服务器加上额外的软件组成，最普遍的是一个应用服务器 [application server] 和一个数据库 [database]。我们称它为“动态”是因为这个应用服务器会在通过 HTTP 服务器把托管文件传送到你的浏览器之前会对这些托管文件进行更新</p>
<p>举个例子，要生成你在浏览器中看到的最终网页，应用服务器或许会用一个数据库中的内容填充一个 HTML 模板。网站像 MDN 或者维基百科 [Wikipedia] 有成千上万的网页，但是它们不是真正的 HTML 文档，它们只是少数的 HTML 模板以及一个巨大的数据库。这样的设置让它更快更简单地维护以及分发内容</p>
]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Flask</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>人物、恐龙加点上限修改代码</title>
    <url>/2022/02/12/%E4%BA%BA%E7%89%A9%E3%80%81%E6%81%90%E9%BE%99%E5%8A%A0%E7%82%B9%E4%B8%8A%E9%99%90%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<ul>
<li>进入ARK\ShooterGame\Saved\Config\WindowsNoEditor\Game.ini文件，在最后添加如下代码，将人物，恐龙最高加点上限提高到300点</li>
</ul>
<span id="more"></span>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">OverrideMaxExperiencePointsPlayer</span>=<span class="number">100000000</span></span><br><span class="line"><span class="attr">OverrideMaxExperiencePointsDino</span>=<span class="number">1000000000</span></span><br><span class="line"><span class="attr">LevelExperienceRampOverrides</span>=(ExperiencePointsForLevel[<span class="number">0</span>]=<span class="number">10</span>,ExperiencePointsForLevel[<span class="number">1</span>]=<span class="number">98</span>,ExperiencePointsForLevel[<span class="number">2</span>]=<span class="number">186</span>,ExperiencePointsForLevel[<span class="number">3</span>]=<span class="number">274</span>,ExperiencePointsForLevel[<span class="number">4</span>]=<span class="number">362</span>,ExperiencePointsForLevel[<span class="number">5</span>]=<span class="number">450</span>,ExperiencePointsForLevel[<span class="number">6</span>]=<span class="number">538</span>,</span><br><span class="line">ExperiencePointsForLevel<span class="section">[7]</span>=626,ExperiencePointsForLevel<span class="section">[8]</span>=714,ExperiencePointsForLevel<span class="section">[9]</span>=802,ExperiencePointsForLevel<span class="section">[10]</span>=890,ExperiencePointsForLevel<span class="section">[11]</span>=978,ExperiencePointsForLevel<span class="section">[12]</span>=1066,ExperiencePointsForLevel<span class="section">[13]</span>=1154,ExperiencePointsForLevel<span class="section">[14]</span>=1242,ExperiencePointsForLevel<span class="section">[15]</span>=1330,ExperiencePointsForLevel<span class="section">[16]</span>=1418,ExperiencePointsForLevel<span class="section">[17]</span>=1506,ExperiencePointsForLevel<span class="section">[18]</span>=1594,ExperiencePointsForLevel<span class="section">[19]</span>=1682,ExperiencePointsForLevel<span class="section">[20]</span>=1770,ExperiencePointsForLevel<span class="section">[21]</span>=1858,ExperiencePointsForLevel<span class="section">[22]</span>=1946,ExperiencePointsForLevel<span class="section">[23]</span>=2034,ExperiencePointsForLevel<span class="section">[24]</span>=2122,ExperiencePointsForLevel<span class="section">[25]</span>=2210,ExperiencePointsForLevel<span class="section">[26]</span>=2298,ExperiencePointsForLevel<span class="section">[27]</span>=2386,ExperiencePointsForLevel<span class="section">[28]</span>=2474,ExperiencePointsForLevel<span class="section">[29]</span>=2562,ExperiencePointsForLevel<span class="section">[30]</span>=2650,ExperiencePointsForLevel<span class="section">[31]</span>=2738,ExperiencePointsForLevel<span class="section">[32]</span>=2826,ExperiencePointsForLevel<span class="section">[33]</span>=2914,ExperiencePointsForLevel<span class="section">[34]</span>=3002,ExperiencePointsForLevel<span class="section">[35]</span>=3090,ExperiencePointsForLevel<span class="section">[36]</span>=3178,ExperiencePointsForLevel<span class="section">[37]</span>=3266,ExperiencePointsForLevel<span class="section">[38]</span>=3354,ExperiencePointsForLevel<span class="section">[39]</span>=3442,ExperiencePointsForLevel<span class="section">[40]</span>=3530,ExperiencePointsForLevel<span class="section">[41]</span>=3618,ExperiencePointsForLevel<span class="section">[42]</span>=3706,ExperiencePointsForLevel<span class="section">[43]</span>=3794,ExperiencePointsForLevel<span class="section">[44]</span>=3882,ExperiencePointsForLevel<span class="section">[45]</span>=3970,ExperiencePointsForLevel<span class="section">[46]</span>=4058,ExperiencePointsForLevel<span class="section">[47]</span>=4146,ExperiencePointsForLevel<span class="section">[48]</span>=4234,ExperiencePointsForLevel<span class="section">[49]</span>=4322,ExperiencePointsForLevel<span class="section">[50]</span>=4410,ExperiencePointsForLevel<span class="section">[51]</span>=4498,ExperiencePointsForLevel<span class="section">[52]</span>=4586,ExperiencePointsForLevel<span class="section">[53]</span>=4674,ExperiencePointsForLevel<span class="section">[54]</span>=4762,ExperiencePointsForLevel<span class="section">[55]</span>=4850,ExperiencePointsForLevel<span class="section">[56]</span>=4938,ExperiencePointsForLevel<span class="section">[57]</span>=5026,ExperiencePointsForLevel<span class="section">[58]</span>=5114,ExperiencePointsForLevel<span class="section">[59]</span>=5202,ExperiencePointsForLevel<span class="section">[60]</span>=5290,ExperiencePointsForLevel<span class="section">[61]</span>=5378,ExperiencePointsForLevel<span class="section">[62]</span>=5466,ExperiencePointsForLevel<span class="section">[63]</span>=5554,ExperiencePointsForLevel<span class="section">[64]</span>=5642,ExperiencePointsForLevel<span class="section">[65]</span>=5730,ExperiencePointsForLevel<span class="section">[66]</span>=5818,ExperiencePointsForLevel<span class="section">[67]</span>=5906,ExperiencePointsForLevel<span class="section">[68]</span>=5994,ExperiencePointsForLevel<span class="section">[69]</span>=6082,ExperiencePointsForLevel<span class="section">[70]</span>=6170,ExperiencePointsForLevel<span class="section">[71]</span>=6258,ExperiencePointsForLevel<span class="section">[72]</span>=6346,ExperiencePointsForLevel<span class="section">[73]</span>=6434,ExperiencePointsForLevel<span class="section">[74]</span>=6522,ExperiencePointsForLevel<span class="section">[75]</span>=6610,ExperiencePointsForLevel<span class="section">[76]</span>=6698,ExperiencePointsForLevel<span class="section">[77]</span>=6786,ExperiencePointsForLevel<span class="section">[78]</span>=6874,ExperiencePointsForLevel<span class="section">[79]</span>=6962,ExperiencePointsForLevel<span class="section">[80]</span>=7050,ExperiencePointsForLevel<span class="section">[81]</span>=7138,ExperiencePointsForLevel<span class="section">[82]</span>=7226,ExperiencePointsForLevel<span class="section">[83]</span>=7314,ExperiencePointsForLevel<span class="section">[84]</span>=7402,ExperiencePointsForLevel<span class="section">[85]</span>=7490,ExperiencePointsForLevel<span class="section">[86]</span>=7578,ExperiencePointsForLevel<span class="section">[87]</span>=7666,ExperiencePointsForLevel<span class="section">[88]</span>=7754,ExperiencePointsForLevel<span class="section">[89]</span>=7842,ExperiencePointsForLevel<span class="section">[90]</span>=7930,ExperiencePointsForLevel<span class="section">[91]</span>=8018,ExperiencePointsForLevel<span class="section">[92]</span>=8106,ExperiencePointsForLevel<span class="section">[93]</span>=8194,ExperiencePointsForLevel<span class="section">[94]</span>=8282,ExperiencePointsForLevel<span class="section">[95]</span>=8370,ExperiencePointsForLevel<span class="section">[96]</span>=8458,ExperiencePointsForLevel<span class="section">[97]</span>=8546,ExperiencePointsForLevel<span class="section">[98]</span>=8634,ExperiencePointsForLevel<span class="section">[99]</span>=8722,ExperiencePointsForLevel<span class="section">[100]</span>=8810,ExperiencePointsForLevel<span class="section">[101]</span>=8898,ExperiencePointsForLevel<span class="section">[102]</span>=8986,ExperiencePointsForLevel<span class="section">[103]</span>=9074,ExperiencePointsForLevel<span class="section">[104]</span>=9162,ExperiencePointsForLevel<span class="section">[105]</span>=9250,ExperiencePointsForLevel<span class="section">[106]</span>=9338,ExperiencePointsForLevel<span class="section">[107]</span>=9426,ExperiencePointsForLevel<span class="section">[108]</span>=9514,ExperiencePointsForLevel<span class="section">[109]</span>=9602,ExperiencePointsForLevel<span class="section">[110]</span>=9690,ExperiencePointsForLevel<span class="section">[111]</span>=9778,ExperiencePointsForLevel<span class="section">[112]</span>=9866,ExperiencePointsForLevel<span class="section">[113]</span>=9954,ExperiencePointsForLevel<span class="section">[114]</span>=10042,ExperiencePointsForLevel<span class="section">[115]</span>=10130,ExperiencePointsForLevel<span class="section">[116]</span>=10218,ExperiencePointsForLevel<span class="section">[117]</span>=10306,ExperiencePointsForLevel<span class="section">[118]</span>=10394,ExperiencePointsForLevel<span class="section">[119]</span>=10482,ExperiencePointsForLevel<span class="section">[120]</span>=10570,ExperiencePointsForLevel<span class="section">[121]</span>=10658,ExperiencePointsForLevel<span class="section">[122]</span>=10746,ExperiencePointsForLevel<span class="section">[123]</span>=10834,ExperiencePointsForLevel<span class="section">[124]</span>=10922,ExperiencePointsForLevel<span class="section">[125]</span>=11010,ExperiencePointsForLevel<span class="section">[126]</span>=11098,ExperiencePointsForLevel<span class="section">[127]</span>=11186,ExperiencePointsForLevel<span class="section">[128]</span>=11274,ExperiencePointsForLevel<span class="section">[129]</span>=11362,ExperiencePointsForLevel<span class="section">[130]</span>=11450,ExperiencePointsForLevel<span class="section">[131]</span>=11538,ExperiencePointsForLevel<span class="section">[132]</span>=11626,ExperiencePointsForLevel<span class="section">[133]</span>=11714,ExperiencePointsForLevel<span class="section">[134]</span>=11802,ExperiencePointsForLevel<span class="section">[135]</span>=11890,ExperiencePointsForLevel<span class="section">[136]</span>=11978,ExperiencePointsForLevel<span class="section">[137]</span>=12066,ExperiencePointsForLevel<span class="section">[138]</span>=12154,ExperiencePointsForLevel<span class="section">[139]</span>=12242,ExperiencePointsForLevel<span class="section">[140]</span>=12330,ExperiencePointsForLevel<span class="section">[141]</span>=12418,ExperiencePointsForLevel<span class="section">[142]</span>=12506,ExperiencePointsForLevel<span class="section">[143]</span>=12594,ExperiencePointsForLevel<span class="section">[144]</span>=12682,ExperiencePointsForLevel<span class="section">[145]</span>=12770,ExperiencePointsForLevel<span class="section">[146]</span>=12858,ExperiencePointsForLevel<span class="section">[147]</span>=12946,ExperiencePointsForLevel<span class="section">[148]</span>=13034,ExperiencePointsForLevel<span class="section">[149]</span>=13122,ExperiencePointsForLevel<span class="section">[150]</span>=13210,ExperiencePointsForLevel<span class="section">[151]</span>=13298,ExperiencePointsForLevel<span class="section">[152]</span>=13386,ExperiencePointsForLevel<span class="section">[153]</span>=13474,ExperiencePointsForLevel<span class="section">[154]</span>=13562,ExperiencePointsForLevel<span class="section">[155]</span>=13650,ExperiencePointsForLevel<span class="section">[156]</span>=13738,ExperiencePointsForLevel<span class="section">[157]</span>=13826,ExperiencePointsForLevel<span class="section">[158]</span>=13914,ExperiencePointsForLevel<span class="section">[159]</span>=14002,ExperiencePointsForLevel<span class="section">[160]</span>=14090,ExperiencePointsForLevel<span class="section">[161]</span>=14178,ExperiencePointsForLevel<span class="section">[162]</span>=14266,ExperiencePointsForLevel<span class="section">[163]</span>=14354,ExperiencePointsForLevel<span class="section">[164]</span>=14442,ExperiencePointsForLevel<span class="section">[165]</span>=14530,ExperiencePointsForLevel<span class="section">[166]</span>=14618,ExperiencePointsForLevel<span class="section">[167]</span>=14706,ExperiencePointsForLevel<span class="section">[168]</span>=14794,ExperiencePointsForLevel<span class="section">[169]</span>=14882,ExperiencePointsForLevel<span class="section">[170]</span>=14970,ExperiencePointsForLevel<span class="section">[171]</span>=15058,ExperiencePointsForLevel<span class="section">[172]</span>=15146,ExperiencePointsForLevel<span class="section">[173]</span>=15234,ExperiencePointsForLevel<span class="section">[174]</span>=15322,ExperiencePointsForLevel<span class="section">[175]</span>=15410,ExperiencePointsForLevel<span class="section">[176]</span>=15498,ExperiencePointsForLevel<span class="section">[177]</span>=15586,ExperiencePointsForLevel<span class="section">[178]</span>=15674,ExperiencePointsForLevel<span class="section">[179]</span>=15762,ExperiencePointsForLevel<span class="section">[180]</span>=15850,ExperiencePointsForLevel<span class="section">[181]</span>=15938,ExperiencePointsForLevel<span class="section">[182]</span>=16026,ExperiencePointsForLevel<span class="section">[183]</span>=16114,ExperiencePointsForLevel<span class="section">[184]</span>=16202,ExperiencePointsForLevel<span class="section">[185]</span>=16290,ExperiencePointsForLevel<span class="section">[186]</span>=16378,ExperiencePointsForLevel<span class="section">[187]</span>=16466,ExperiencePointsForLevel<span class="section">[188]</span>=16554,ExperiencePointsForLevel<span class="section">[189]</span>=16642,ExperiencePointsForLevel<span class="section">[190]</span>=16730,ExperiencePointsForLevel<span class="section">[191]</span>=16818,ExperiencePointsForLevel<span class="section">[192]</span>=16906,ExperiencePointsForLevel<span class="section">[193]</span>=16994,ExperiencePointsForLevel<span class="section">[194]</span>=17082,ExperiencePointsForLevel<span class="section">[195]</span>=17170,ExperiencePointsForLevel<span class="section">[196]</span>=17258,ExperiencePointsForLevel<span class="section">[197]</span>=17346,ExperiencePointsForLevel<span class="section">[198]</span>=17434,ExperiencePointsForLevel<span class="section">[199]</span>=17522,ExperiencePointsForLevel<span class="section">[200]</span>=17610,ExperiencePointsForLevel<span class="section">[201]</span>=17698,ExperiencePointsForLevel<span class="section">[202]</span>=17786,ExperiencePointsForLevel<span class="section">[203]</span>=17874,ExperiencePointsForLevel<span class="section">[204]</span>=17962,ExperiencePointsForLevel<span class="section">[205]</span>=18050,ExperiencePointsForLevel<span class="section">[206]</span>=18138,ExperiencePointsForLevel<span class="section">[207]</span>=18226,ExperiencePointsForLevel<span class="section">[208]</span>=18314,ExperiencePointsForLevel<span class="section">[209]</span>=18402,ExperiencePointsForLevel<span class="section">[210]</span>=18490,ExperiencePointsForLevel<span class="section">[211]</span>=18578,ExperiencePointsForLevel<span class="section">[212]</span>=18666,ExperiencePointsForLevel<span class="section">[213]</span>=18754,ExperiencePointsForLevel<span class="section">[214]</span>=18842,ExperiencePointsForLevel<span class="section">[215]</span>=18930,ExperiencePointsForLevel<span class="section">[216]</span>=19018,ExperiencePointsForLevel<span class="section">[217]</span>=19106,ExperiencePointsForLevel<span class="section">[218]</span>=19194,ExperiencePointsForLevel<span class="section">[219]</span>=19282,ExperiencePointsForLevel<span class="section">[220]</span>=19370,ExperiencePointsForLevel<span class="section">[221]</span>=19458,ExperiencePointsForLevel<span class="section">[222]</span>=19546,ExperiencePointsForLevel<span class="section">[223]</span>=19634,ExperiencePointsForLevel<span class="section">[224]</span>=19722,ExperiencePointsForLevel<span class="section">[225]</span>=19810,ExperiencePointsForLevel<span class="section">[226]</span>=19898,ExperiencePointsForLevel<span class="section">[227]</span>=19986,ExperiencePointsForLevel<span class="section">[228]</span>=20074,ExperiencePointsForLevel<span class="section">[229]</span>=20162,ExperiencePointsForLevel<span class="section">[230]</span>=20250,ExperiencePointsForLevel<span class="section">[231]</span>=20338,ExperiencePointsForLevel<span class="section">[232]</span>=20426,ExperiencePointsForLevel<span class="section">[233]</span>=20514,ExperiencePointsForLevel<span class="section">[234]</span>=20602,ExperiencePointsForLevel<span class="section">[235]</span>=20690,ExperiencePointsForLevel<span class="section">[236]</span>=20778,ExperiencePointsForLevel<span class="section">[237]</span>=20866,ExperiencePointsForLevel<span class="section">[238]</span>=20954,ExperiencePointsForLevel<span class="section">[239]</span>=21042,ExperiencePointsForLevel<span class="section">[240]</span>=21130,ExperiencePointsForLevel<span class="section">[241]</span>=21218,ExperiencePointsForLevel<span class="section">[242]</span>=21306,ExperiencePointsForLevel<span class="section">[243]</span>=21394,ExperiencePointsForLevel<span class="section">[244]</span>=21482,ExperiencePointsForLevel<span class="section">[245]</span>=21570,ExperiencePointsForLevel<span class="section">[246]</span>=21658,ExperiencePointsForLevel<span class="section">[247]</span>=21746,ExperiencePointsForLevel<span class="section">[248]</span>=21834,ExperiencePointsForLevel<span class="section">[249]</span>=21922,ExperiencePointsForLevel<span class="section">[250]</span>=22010,ExperiencePointsForLevel<span class="section">[251]</span>=22098,ExperiencePointsForLevel<span class="section">[252]</span>=22186,ExperiencePointsForLevel<span class="section">[253]</span>=22274,ExperiencePointsForLevel<span class="section">[254]</span>=22362,ExperiencePointsForLevel<span class="section">[255]</span>=22450,ExperiencePointsForLevel<span class="section">[256]</span>=22538,ExperiencePointsForLevel<span class="section">[257]</span>=22626,ExperiencePointsForLevel<span class="section">[258]</span>=22714,ExperiencePointsForLevel<span class="section">[259]</span>=22802,ExperiencePointsForLevel<span class="section">[260]</span>=22890,ExperiencePointsForLevel<span class="section">[261]</span>=22978,ExperiencePointsForLevel<span class="section">[262]</span>=23066,ExperiencePointsForLevel<span class="section">[263]</span>=23154,ExperiencePointsForLevel<span class="section">[264]</span>=23242,ExperiencePointsForLevel<span class="section">[265]</span>=23330,ExperiencePointsForLevel<span class="section">[266]</span>=23418,ExperiencePointsForLevel<span class="section">[267]</span>=23506,ExperiencePointsForLevel<span class="section">[268]</span>=23594,ExperiencePointsForLevel<span class="section">[269]</span>=23682,ExperiencePointsForLevel<span class="section">[270]</span>=23770,ExperiencePointsForLevel<span class="section">[271]</span>=23858,ExperiencePointsForLevel<span class="section">[272]</span>=23946,ExperiencePointsForLevel<span class="section">[273]</span>=24034,ExperiencePointsForLevel<span class="section">[274]</span>=24122,ExperiencePointsForLevel<span class="section">[275]</span>=24210,ExperiencePointsForLevel<span class="section">[276]</span>=24298,ExperiencePointsForLevel<span class="section">[277]</span>=24386,ExperiencePointsForLevel<span class="section">[278]</span>=24474,ExperiencePointsForLevel<span class="section">[279]</span>=24562,ExperiencePointsForLevel<span class="section">[280]</span>=24650,ExperiencePointsForLevel<span class="section">[281]</span>=24738,ExperiencePointsForLevel<span class="section">[282]</span>=24826,ExperiencePointsForLevel<span class="section">[283]</span>=24914,ExperiencePointsForLevel<span class="section">[284]</span>=25002,ExperiencePointsForLevel<span class="section">[285]</span>=25090,ExperiencePointsForLevel<span class="section">[286]</span>=25178,ExperiencePointsForLevel<span class="section">[287]</span>=25266,ExperiencePointsForLevel<span class="section">[288]</span>=25354,ExperiencePointsForLevel<span class="section">[289]</span>=25442,ExperiencePointsForLevel<span class="section">[290]</span>=25530,ExperiencePointsForLevel<span class="section">[291]</span>=25618,ExperiencePointsForLevel<span class="section">[292]</span>=25706,ExperiencePointsForLevel<span class="section">[293]</span>=25794,ExperiencePointsForLevel<span class="section">[294]</span>=25882,ExperiencePointsForLevel<span class="section">[295]</span>=25970,ExperiencePointsForLevel<span class="section">[296]</span>=26058,ExperiencePointsForLevel<span class="section">[297]</span>=26146,ExperiencePointsForLevel<span class="section">[298]</span>=26234,ExperiencePointsForLevel<span class="section">[299]</span>=26322)</span><br><span class="line"></span><br><span class="line"><span class="attr">LevelExperienceRampOverrides</span>=(ExperiencePointsForLevel[<span class="number">0</span>]=<span class="number">10</span>,ExperiencePointsForLevel[<span class="number">1</span>]=<span class="number">76</span>,ExperiencePointsForLevel[<span class="number">2</span>]=<span class="number">142</span>,ExperiencePointsForLevel[<span class="number">3</span>]=<span class="number">208</span>,ExperiencePointsForLevel[<span class="number">4</span>]=<span class="number">274</span>,ExperiencePointsForLevel[<span class="number">5</span>]=<span class="number">340</span>,ExperiencePointsForLevel[<span class="number">6</span>]=<span class="number">406</span>,ExperiencePointsForLevel[<span class="number">7</span>]=<span class="number">472</span>,ExperiencePointsForLevel[<span class="number">8</span>]=<span class="number">538</span>,ExperiencePointsForLevel[<span class="number">9</span>]=<span class="number">604</span>,ExperiencePointsForLevel[<span class="number">10</span>]=<span class="number">670</span>,ExperiencePointsForLevel[<span class="number">11</span>]=<span class="number">736</span>,ExperiencePointsForLevel[<span class="number">12</span>]=<span class="number">802</span>,ExperiencePointsForLevel[<span class="number">13</span>]=<span class="number">868</span>,ExperiencePointsForLevel[<span class="number">14</span>]=<span class="number">934</span>,ExperiencePointsForLevel[<span class="number">15</span>]=<span class="number">1000</span>,ExperiencePointsForLevel[<span class="number">16</span>]=<span class="number">1066</span>,ExperiencePointsForLevel[<span class="number">17</span>]=<span class="number">1132</span>,ExperiencePointsForLevel[<span class="number">18</span>]=<span class="number">1198</span>,ExperiencePointsForLevel[<span class="number">19</span>]=<span class="number">1264</span>,ExperiencePointsForLevel[<span class="number">20</span>]=<span class="number">1330</span>,ExperiencePointsForLevel[<span class="number">21</span>]=<span class="number">1396</span>,ExperiencePointsForLevel[<span class="number">22</span>]=<span class="number">1462</span>,ExperiencePointsForLevel[<span class="number">23</span>]=<span class="number">1528</span>,ExperiencePointsForLevel[<span class="number">24</span>]=<span class="number">1594</span>,ExperiencePointsForLevel[<span class="number">25</span>]=<span class="number">1660</span>,ExperiencePointsForLevel[<span class="number">26</span>]=<span class="number">1726</span>,ExperiencePointsForLevel[<span class="number">27</span>]=<span class="number">1792</span>,ExperiencePointsForLevel[<span class="number">28</span>]=<span class="number">1858</span>,ExperiencePointsForLevel[<span class="number">29</span>]=<span class="number">1924</span>,ExperiencePointsForLevel[<span class="number">30</span>]=<span class="number">1990</span>,ExperiencePointsForLevel[<span class="number">31</span>]=<span class="number">2056</span>,ExperiencePointsForLevel[<span class="number">32</span>]=<span class="number">2122</span>,ExperiencePointsForLevel[<span class="number">33</span>]=<span class="number">2188</span>,ExperiencePointsForLevel[<span class="number">34</span>]=<span class="number">2254</span>,ExperiencePointsForLevel[<span class="number">35</span>]=<span class="number">2320</span>,ExperiencePointsForLevel[<span class="number">36</span>]=<span class="number">2386</span>,ExperiencePointsForLevel[<span class="number">37</span>]=<span class="number">2452</span>,ExperiencePointsForLevel[<span class="number">38</span>]=<span class="number">2518</span>,ExperiencePointsForLevel[<span class="number">39</span>]=<span class="number">2584</span>,ExperiencePointsForLevel[<span class="number">40</span>]=<span class="number">2650</span>,ExperiencePointsForLevel[<span class="number">41</span>]=<span class="number">2716</span>,ExperiencePointsForLevel[<span class="number">42</span>]=<span class="number">2782</span>,ExperiencePointsForLevel[<span class="number">43</span>]=<span class="number">2848</span>,ExperiencePointsForLevel[<span class="number">44</span>]=<span class="number">2914</span>,ExperiencePointsForLevel[<span class="number">45</span>]=<span class="number">2980</span>,ExperiencePointsForLevel[<span class="number">46</span>]=<span class="number">3046</span>,ExperiencePointsForLevel[<span class="number">47</span>]=<span class="number">3112</span>,ExperiencePointsForLevel[<span class="number">48</span>]=<span class="number">3178</span>,ExperiencePointsForLevel[<span class="number">49</span>]=<span class="number">3244</span>,ExperiencePointsForLevel[<span class="number">50</span>]=<span class="number">3310</span>,ExperiencePointsForLevel[<span class="number">51</span>]=<span class="number">3376</span>,ExperiencePointsForLevel[<span class="number">52</span>]=<span class="number">3442</span>,ExperiencePointsForLevel[<span class="number">53</span>]=<span class="number">3508</span>,ExperiencePointsForLevel[<span class="number">54</span>]=<span class="number">3574</span>,ExperiencePointsForLevel[<span class="number">55</span>]=<span class="number">3640</span>,ExperiencePointsForLevel[<span class="number">56</span>]=<span class="number">3706</span>,ExperiencePointsForLevel[<span class="number">57</span>]=<span class="number">3772</span>,ExperiencePointsForLevel[<span class="number">58</span>]=<span class="number">3838</span>,ExperiencePointsForLevel[<span class="number">59</span>]=<span class="number">3904</span>,ExperiencePointsForLevel[<span class="number">60</span>]=<span class="number">3970</span>,ExperiencePointsForLevel[<span class="number">61</span>]=<span class="number">4036</span>,ExperiencePointsForLevel[<span class="number">62</span>]=<span class="number">4102</span>,ExperiencePointsForLevel[<span class="number">63</span>]=<span class="number">4168</span>,ExperiencePointsForLevel[<span class="number">64</span>]=<span class="number">4234</span>,ExperiencePointsForLevel[<span class="number">65</span>]=<span class="number">4300</span>,ExperiencePointsForLevel[<span class="number">66</span>]=<span class="number">4366</span>,ExperiencePointsForLevel[<span class="number">67</span>]=<span class="number">4432</span>,ExperiencePointsForLevel[<span class="number">68</span>]=<span class="number">4498</span>,ExperiencePointsForLevel[<span class="number">69</span>]=<span class="number">4564</span>,ExperiencePointsForLevel[<span class="number">70</span>]=<span class="number">4630</span>,ExperiencePointsForLevel[<span class="number">71</span>]=<span class="number">4696</span>,ExperiencePointsForLevel[<span class="number">72</span>]=<span class="number">4762</span>,ExperiencePointsForLevel[<span class="number">73</span>]=<span class="number">4828</span>,ExperiencePointsForLevel[<span class="number">74</span>]=<span class="number">4894</span>,ExperiencePointsForLevel[<span class="number">75</span>]=<span class="number">4960</span>,ExperiencePointsForLevel[<span class="number">76</span>]=<span class="number">5026</span>,ExperiencePointsForLevel[<span class="number">77</span>]=<span class="number">5092</span>,ExperiencePointsForLevel[<span class="number">78</span>]=<span class="number">5158</span>,ExperiencePointsForLevel[<span class="number">79</span>]=<span class="number">5224</span>,ExperiencePointsForLevel[<span class="number">80</span>]=<span class="number">5290</span>,ExperiencePointsForLevel[<span class="number">81</span>]=<span class="number">5356</span>,ExperiencePointsForLevel[<span class="number">82</span>]=<span class="number">5422</span>,ExperiencePointsForLevel[<span class="number">83</span>]=<span class="number">5488</span>,ExperiencePointsForLevel[<span class="number">84</span>]=<span class="number">5554</span>,ExperiencePointsForLevel[<span class="number">85</span>]=<span class="number">5620</span>,ExperiencePointsForLevel[<span class="number">86</span>]=<span class="number">5686</span>,ExperiencePointsForLevel[<span class="number">87</span>]=<span class="number">5752</span>,ExperiencePointsForLevel[<span class="number">88</span>]=<span class="number">5818</span>,ExperiencePointsForLevel[<span class="number">89</span>]=<span class="number">5884</span>,ExperiencePointsForLevel[<span class="number">90</span>]=<span class="number">5950</span>,ExperiencePointsForLevel[<span class="number">91</span>]=<span class="number">6016</span>,ExperiencePointsForLevel[<span class="number">92</span>]=<span class="number">6082</span>,ExperiencePointsForLevel[<span class="number">93</span>]=<span class="number">6148</span>,ExperiencePointsForLevel[<span class="number">94</span>]=<span class="number">6214</span>,ExperiencePointsForLevel[<span class="number">95</span>]=<span class="number">6280</span>,ExperiencePointsForLevel[<span class="number">96</span>]=<span class="number">6346</span>,ExperiencePointsForLevel[<span class="number">97</span>]=<span class="number">6412</span>,ExperiencePointsForLevel[<span class="number">98</span>]=<span class="number">6478</span>,ExperiencePointsForLevel[<span class="number">99</span>]=<span class="number">6544</span>,ExperiencePointsForLevel[<span class="number">100</span>]=<span class="number">6610</span>,ExperiencePointsForLevel[<span class="number">101</span>]=<span class="number">6676</span>,ExperiencePointsForLevel[<span class="number">102</span>]=<span class="number">6742</span>,ExperiencePointsForLevel[<span class="number">103</span>]=<span class="number">6808</span>,ExperiencePointsForLevel[<span class="number">104</span>]=<span class="number">6874</span>,ExperiencePointsForLevel[<span class="number">105</span>]=<span class="number">6940</span>,ExperiencePointsForLevel[<span class="number">106</span>]=<span class="number">7006</span>,ExperiencePointsForLevel[<span class="number">107</span>]=<span class="number">7072</span>,ExperiencePointsForLevel[<span class="number">108</span>]=<span class="number">7138</span>,ExperiencePointsForLevel[<span class="number">109</span>]=<span class="number">7204</span>,ExperiencePointsForLevel[<span class="number">110</span>]=<span class="number">7270</span>,ExperiencePointsForLevel[<span class="number">111</span>]=<span class="number">7336</span>,ExperiencePointsForLevel[<span class="number">112</span>]=<span class="number">7402</span>,ExperiencePointsForLevel[<span class="number">113</span>]=<span class="number">7468</span>,ExperiencePointsForLevel[<span class="number">114</span>]=<span class="number">7534</span>,ExperiencePointsForLevel[<span class="number">115</span>]=<span class="number">7600</span>,ExperiencePointsForLevel[<span class="number">116</span>]=<span class="number">7666</span>,ExperiencePointsForLevel[<span class="number">117</span>]=<span class="number">7732</span>,ExperiencePointsForLevel[<span class="number">118</span>]=<span class="number">7798</span>,ExperiencePointsForLevel[<span class="number">119</span>]=<span class="number">7864</span>,ExperiencePointsForLevel[<span class="number">120</span>]=<span class="number">7930</span>,ExperiencePointsForLevel[<span class="number">121</span>]=<span class="number">7996</span>,ExperiencePointsForLevel[<span class="number">122</span>]=<span class="number">8062</span>,ExperiencePointsForLevel[<span class="number">123</span>]=<span class="number">8128</span>,ExperiencePointsForLevel[<span class="number">124</span>]=<span class="number">8194</span>,ExperiencePointsForLevel[<span class="number">125</span>]=<span class="number">8260</span>,ExperiencePointsForLevel[<span class="number">126</span>]=<span class="number">8326</span>,ExperiencePointsForLevel[<span class="number">127</span>]=<span class="number">8392</span>,ExperiencePointsForLevel[<span class="number">128</span>]=<span class="number">8458</span>,ExperiencePointsForLevel[<span class="number">129</span>]=<span class="number">8524</span>,ExperiencePointsForLevel[<span class="number">130</span>]=<span class="number">8590</span>,ExperiencePointsForLevel[<span class="number">131</span>]=<span class="number">8656</span>,ExperiencePointsForLevel[<span class="number">132</span>]=<span class="number">8722</span>,ExperiencePointsForLevel[<span class="number">133</span>]=<span class="number">8788</span>,ExperiencePointsForLevel[<span class="number">134</span>]=<span class="number">8854</span>,ExperiencePointsForLevel[<span class="number">135</span>]=<span class="number">8920</span>,ExperiencePointsForLevel[<span class="number">136</span>]=<span class="number">8986</span>,ExperiencePointsForLevel[<span class="number">137</span>]=<span class="number">9052</span>,ExperiencePointsForLevel[<span class="number">138</span>]=<span class="number">9118</span>,ExperiencePointsForLevel[<span class="number">139</span>]=<span class="number">9184</span>,ExperiencePointsForLevel[<span class="number">140</span>]=<span class="number">9250</span>,ExperiencePointsForLevel[<span class="number">141</span>]=<span class="number">9316</span>,ExperiencePointsForLevel[<span class="number">142</span>]=<span class="number">9382</span>,ExperiencePointsForLevel[<span class="number">143</span>]=<span class="number">9448</span>,ExperiencePointsForLevel[<span class="number">144</span>]=<span class="number">9514</span>,ExperiencePointsForLevel[<span class="number">145</span>]=<span class="number">9580</span>,ExperiencePointsForLevel[<span class="number">146</span>]=<span class="number">9646</span>,ExperiencePointsForLevel[<span class="number">147</span>]=<span class="number">9712</span>,ExperiencePointsForLevel[<span class="number">148</span>]=<span class="number">9778</span>,ExperiencePointsForLevel[<span class="number">149</span>]=<span class="number">9844</span>,ExperiencePointsForLevel[<span class="number">150</span>]=<span class="number">9910</span>,ExperiencePointsForLevel[<span class="number">151</span>]=<span class="number">9976</span>,ExperiencePointsForLevel[<span class="number">152</span>]=<span class="number">10042</span>,ExperiencePointsForLevel[<span class="number">153</span>]=<span class="number">10108</span>,ExperiencePointsForLevel[<span class="number">154</span>]=<span class="number">10174</span>,ExperiencePointsForLevel[<span class="number">155</span>]=<span class="number">10240</span>,ExperiencePointsForLevel[<span class="number">156</span>]=<span class="number">10306</span>,ExperiencePointsForLevel[<span class="number">157</span>]=<span class="number">10372</span>,ExperiencePointsForLevel[<span class="number">158</span>]=<span class="number">10438</span>,ExperiencePointsForLevel[<span class="number">159</span>]=<span class="number">10504</span>,ExperiencePointsForLevel[<span class="number">160</span>]=<span class="number">10570</span>,ExperiencePointsForLevel[<span class="number">161</span>]=<span class="number">10636</span>,ExperiencePointsForLevel[<span class="number">162</span>]=<span class="number">10702</span>,ExperiencePointsForLevel[<span class="number">163</span>]=<span class="number">10768</span>,ExperiencePointsForLevel[<span class="number">164</span>]=<span class="number">10834</span>,ExperiencePointsForLevel[<span class="number">165</span>]=<span class="number">10900</span>,ExperiencePointsForLevel[<span class="number">166</span>]=<span class="number">10966</span>,ExperiencePointsForLevel[<span class="number">167</span>]=<span class="number">11032</span>,ExperiencePointsForLevel[<span class="number">168</span>]=<span class="number">11098</span>,ExperiencePointsForLevel[<span class="number">169</span>]=<span class="number">11164</span>,ExperiencePointsForLevel[<span class="number">170</span>]=<span class="number">11230</span>,ExperiencePointsForLevel[<span class="number">171</span>]=<span class="number">11296</span>,ExperiencePointsForLevel[<span class="number">172</span>]=<span class="number">11362</span>,ExperiencePointsForLevel[<span class="number">173</span>]=<span class="number">11428</span>,ExperiencePointsForLevel[<span class="number">174</span>]=<span class="number">11494</span>,ExperiencePointsForLevel[<span class="number">175</span>]=<span class="number">11560</span>,ExperiencePointsForLevel[<span class="number">176</span>]=<span class="number">11626</span>,ExperiencePointsForLevel[<span class="number">177</span>]=<span class="number">11692</span>,ExperiencePointsForLevel[<span class="number">178</span>]=<span class="number">11758</span>,ExperiencePointsForLevel[<span class="number">179</span>]=<span class="number">11824</span>,ExperiencePointsForLevel[<span class="number">180</span>]=<span class="number">11890</span>,ExperiencePointsForLevel[<span class="number">181</span>]=<span class="number">11956</span>,ExperiencePointsForLevel[<span class="number">182</span>]=<span class="number">12022</span>,ExperiencePointsForLevel[<span class="number">183</span>]=<span class="number">12088</span>,ExperiencePointsForLevel[<span class="number">184</span>]=<span class="number">12154</span>,ExperiencePointsForLevel[<span class="number">185</span>]=<span class="number">12220</span>,ExperiencePointsForLevel[<span class="number">186</span>]=<span class="number">12286</span>,ExperiencePointsForLevel[<span class="number">187</span>]=<span class="number">12352</span>,ExperiencePointsForLevel[<span class="number">188</span>]=<span class="number">12418</span>,ExperiencePointsForLevel[<span class="number">189</span>]=<span class="number">12484</span>,ExperiencePointsForLevel[<span class="number">190</span>]=<span class="number">12550</span>,ExperiencePointsForLevel[<span class="number">191</span>]=<span class="number">12616</span>,ExperiencePointsForLevel[<span class="number">192</span>]=<span class="number">12682</span>,ExperiencePointsForLevel[<span class="number">193</span>]=<span class="number">12748</span>,ExperiencePointsForLevel[<span class="number">194</span>]=<span class="number">12814</span>,ExperiencePointsForLevel[<span class="number">195</span>]=<span class="number">12880</span>,ExperiencePointsForLevel[<span class="number">196</span>]=<span class="number">12946</span>,ExperiencePointsForLevel[<span class="number">197</span>]=<span class="number">13012</span>,ExperiencePointsForLevel[<span class="number">198</span>]=<span class="number">13078</span>,ExperiencePointsForLevel[<span class="number">199</span>]=<span class="number">13144</span>,ExperiencePointsForLevel[<span class="number">200</span>]=<span class="number">13210</span>,ExperiencePointsForLevel[<span class="number">201</span>]=<span class="number">13276</span>,ExperiencePointsForLevel[<span class="number">202</span>]=<span class="number">13342</span>,ExperiencePointsForLevel[<span class="number">203</span>]=<span class="number">13408</span>,ExperiencePointsForLevel[<span class="number">204</span>]=<span class="number">13474</span>,ExperiencePointsForLevel[<span class="number">205</span>]=<span class="number">13540</span>,ExperiencePointsForLevel[<span class="number">206</span>]=<span class="number">13606</span>,ExperiencePointsForLevel[<span class="number">207</span>]=<span class="number">13672</span>,ExperiencePointsForLevel[<span class="number">208</span>]=<span class="number">13738</span>,ExperiencePointsForLevel[<span class="number">209</span>]=<span class="number">13804</span>,ExperiencePointsForLevel[<span class="number">210</span>]=<span class="number">13870</span>,ExperiencePointsForLevel[<span class="number">211</span>]=<span class="number">13936</span>,ExperiencePointsForLevel[<span class="number">212</span>]=<span class="number">14002</span>,ExperiencePointsForLevel[<span class="number">213</span>]=<span class="number">14068</span>,ExperiencePointsForLevel[<span class="number">214</span>]=<span class="number">14134</span>,ExperiencePointsForLevel[<span class="number">215</span>]=<span class="number">14200</span>,ExperiencePointsForLevel[<span class="number">216</span>]=<span class="number">14266</span>,ExperiencePointsForLevel[<span class="number">217</span>]=<span class="number">14332</span>,ExperiencePointsForLevel[<span class="number">218</span>]=<span class="number">14398</span>,ExperiencePointsForLevel[<span class="number">219</span>]=<span class="number">14464</span>,ExperiencePointsForLevel[<span class="number">220</span>]=<span class="number">14530</span>,ExperiencePointsForLevel[<span class="number">221</span>]=<span class="number">14596</span>,ExperiencePointsForLevel[<span class="number">222</span>]=<span class="number">14662</span>,ExperiencePointsForLevel[<span class="number">223</span>]=<span class="number">14728</span>,ExperiencePointsForLevel[<span class="number">224</span>]=<span class="number">14794</span>,ExperiencePointsForLevel[<span class="number">225</span>]=<span class="number">14860</span>,ExperiencePointsForLevel[<span class="number">226</span>]=<span class="number">14926</span>,ExperiencePointsForLevel[<span class="number">227</span>]=<span class="number">14992</span>,ExperiencePointsForLevel[<span class="number">228</span>]=<span class="number">15058</span>,ExperiencePointsForLevel[<span class="number">229</span>]=<span class="number">15124</span>,ExperiencePointsForLevel[<span class="number">230</span>]=<span class="number">15190</span>,ExperiencePointsForLevel[<span class="number">231</span>]=<span class="number">15256</span>,ExperiencePointsForLevel[<span class="number">232</span>]=<span class="number">15322</span>,ExperiencePointsForLevel[<span class="number">233</span>]=<span class="number">15388</span>,ExperiencePointsForLevel[<span class="number">234</span>]=<span class="number">15454</span>,ExperiencePointsForLevel[<span class="number">235</span>]=<span class="number">15520</span>,ExperiencePointsForLevel[<span class="number">236</span>]=<span class="number">15586</span>,ExperiencePointsForLevel[<span class="number">237</span>]=<span class="number">15652</span>,ExperiencePointsForLevel[<span class="number">238</span>]=<span class="number">15718</span>,ExperiencePointsForLevel[<span class="number">239</span>]=<span class="number">15784</span>,ExperiencePointsForLevel[<span class="number">240</span>]=<span class="number">15850</span>,ExperiencePointsForLevel[<span class="number">241</span>]=<span class="number">15916</span>,ExperiencePointsForLevel[<span class="number">242</span>]=<span class="number">15982</span>,ExperiencePointsForLevel[<span class="number">243</span>]=<span class="number">16048</span>,ExperiencePointsForLevel[<span class="number">244</span>]=<span class="number">16114</span>,ExperiencePointsForLevel[<span class="number">245</span>]=<span class="number">16180</span>,ExperiencePointsForLevel[<span class="number">246</span>]=<span class="number">16246</span>,ExperiencePointsForLevel[<span class="number">247</span>]=<span class="number">16312</span>,ExperiencePointsForLevel[<span class="number">248</span>]=<span class="number">16378</span>,ExperiencePointsForLevel[<span class="number">249</span>]=<span class="number">16444</span>,ExperiencePointsForLevel[<span class="number">250</span>]=<span class="number">16510</span>,ExperiencePointsForLevel[<span class="number">251</span>]=<span class="number">16576</span>,ExperiencePointsForLevel[<span class="number">252</span>]=<span class="number">16642</span>,ExperiencePointsForLevel[<span class="number">253</span>]=<span class="number">16708</span>,ExperiencePointsForLevel[<span class="number">254</span>]=<span class="number">16774</span>,ExperiencePointsForLevel[<span class="number">255</span>]=<span class="number">16840</span>,ExperiencePointsForLevel[<span class="number">256</span>]=<span class="number">16906</span>,ExperiencePointsForLevel[<span class="number">257</span>]=<span class="number">16972</span>,ExperiencePointsForLevel[<span class="number">258</span>]=<span class="number">17038</span>,ExperiencePointsForLevel[<span class="number">259</span>]=<span class="number">17104</span>,ExperiencePointsForLevel[<span class="number">260</span>]=<span class="number">17170</span>,ExperiencePointsForLevel[<span class="number">261</span>]=<span class="number">17236</span>,ExperiencePointsForLevel[<span class="number">262</span>]=<span class="number">17302</span>,ExperiencePointsForLevel[<span class="number">263</span>]=<span class="number">17368</span>,ExperiencePointsForLevel[<span class="number">264</span>]=<span class="number">17434</span>,ExperiencePointsForLevel[<span class="number">265</span>]=<span class="number">17500</span>,ExperiencePointsForLevel[<span class="number">266</span>]=<span class="number">17566</span>,ExperiencePointsForLevel[<span class="number">267</span>]=<span class="number">17632</span>,ExperiencePointsForLevel[<span class="number">268</span>]=<span class="number">17698</span>,ExperiencePointsForLevel[<span class="number">269</span>]=<span class="number">17764</span>,ExperiencePointsForLevel[<span class="number">270</span>]=<span class="number">17830</span>,ExperiencePointsForLevel[<span class="number">271</span>]=<span class="number">17896</span>,ExperiencePointsForLevel[<span class="number">272</span>]=<span class="number">17962</span>,ExperiencePointsForLevel[<span class="number">273</span>]=<span class="number">18028</span>,ExperiencePointsForLevel[<span class="number">274</span>]=<span class="number">18094</span>,ExperiencePointsForLevel[<span class="number">275</span>]=<span class="number">18160</span>,ExperiencePointsForLevel[<span class="number">276</span>]=<span class="number">18226</span>,ExperiencePointsForLevel[<span class="number">277</span>]=<span class="number">18292</span>,ExperiencePointsForLevel[<span class="number">278</span>]=<span class="number">18358</span>,ExperiencePointsForLevel[<span class="number">279</span>]=<span class="number">18424</span>,ExperiencePointsForLevel[<span class="number">280</span>]=<span class="number">18490</span>,ExperiencePointsForLevel[<span class="number">281</span>]=<span class="number">18556</span>,ExperiencePointsForLevel[<span class="number">282</span>]=<span class="number">18622</span>,ExperiencePointsForLevel[<span class="number">283</span>]=<span class="number">18688</span>,ExperiencePointsForLevel[<span class="number">284</span>]=<span class="number">18754</span>,ExperiencePointsForLevel[<span class="number">285</span>]=<span class="number">18820</span>,ExperiencePointsForLevel[<span class="number">286</span>]=<span class="number">18886</span>,ExperiencePointsForLevel[<span class="number">287</span>]=<span class="number">18952</span>,ExperiencePointsForLevel[<span class="number">288</span>]=<span class="number">19018</span>,ExperiencePointsForLevel[<span class="number">289</span>]=<span class="number">19084</span>,ExperiencePointsForLevel[<span class="number">290</span>]=<span class="number">19150</span>,ExperiencePointsForLevel[<span class="number">291</span>]=<span class="number">19216</span>,ExperiencePointsForLevel[<span class="number">292</span>]=<span class="number">19282</span>,ExperiencePointsForLevel[<span class="number">293</span>]=<span class="number">19348</span>,ExperiencePointsForLevel[<span class="number">294</span>]=<span class="number">19414</span>,ExperiencePointsForLevel[<span class="number">295</span>]=<span class="number">19480</span>,ExperiencePointsForLevel[<span class="number">296</span>]=<span class="number">19546</span>,ExperiencePointsForLevel[<span class="number">297</span>]=<span class="number">19612</span>,ExperiencePointsForLevel[<span class="number">298</span>]=<span class="number">19678</span>,ExperiencePointsForLevel[<span class="number">299</span>]=<span class="number">19744</span>)</span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br><span class="line"><span class="attr">OverridePlayerLevelEngramPoints</span>=<span class="number">5200</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>方舟生存进化</tag>
      </tags>
  </entry>
  <entry>
    <title>我的ARK单人游戏设置</title>
    <url>/2022/01/15/%E6%88%91%E7%9A%84ARK%E5%8D%95%E4%BA%BA%E6%B8%B8%E6%88%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="游戏设置"><a href="#游戏设置" class="headerlink" title="游戏设置"></a>游戏设置</h2><h3 id="阻止全局时停"><a href="#阻止全局时停" class="headerlink" title="阻止全局时停"></a>阻止全局时停</h3><ul>
<li>Steam -&gt; ARK: Survival Ecolved -&gt; 属性 -&gt; 通用 -&gt; 启动选项 -&gt; 添加代码 <code>-preventhibernation</code></li>
</ul>
<h3 id="中文补丁替换"><a href="#中文补丁替换" class="headerlink" title="中文补丁替换"></a>中文补丁替换</h3><ul>
<li>游戏原版的中文会导致一些 BUG，因此建议使用中文补丁替换原中文文件</li>
<li>路径：ARK\ShooterGame\Content\Localization\Game\zh</li>
<li>替换文件：ShooterGame.locres</li>
<li>相关网址：&lt;<a href="http://c.tieba.baidu.com/p/7881686866?pid=144457650554&amp;cid=#144457650554&gt;">http://c.tieba.baidu.com/p/7881686866?pid=144457650554&amp;cid=#144457650554&gt;</a></li>
</ul>
<span id="more"></span>
<h3 id="锁帧率设置"><a href="#锁帧率设置" class="headerlink" title="锁帧率设置"></a>锁帧率设置</h3><ul>
<li>路径：ARK\ShooterGame\Config</li>
<li>修改文件：DefaultEngine.ini</li>
<li>修改项：在 <code>[/Script/Engine.RendererSettings]</code> 项下面新增一行 <code>t.MaxFps=90</code></li>
<li>参数说明：设置最大帧率为 90</li>
</ul>
<h3 id="不使用-MOD-修改物品叠加限制"><a href="#不使用-MOD-修改物品叠加限制" class="headerlink" title="不使用 MOD 修改物品叠加限制"></a>不使用 MOD 修改物品叠加限制</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：<code>ItemStackSizeMultiplier</code></li>
<li>默认值：1.000000</li>
<li>修改值：1.0</li>
</ul>
<h3 id="通过配置文件修改恐龙等级上限"><a href="#通过配置文件修改恐龙等级上限" class="headerlink" title="通过配置文件修改恐龙等级上限"></a>通过配置文件修改恐龙等级上限</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：在 <code>[ServerSettings]</code> 项下面新增一行 <code>OverrideOfficialDifficulty=5.000000</code></li>
<li>默认值：5.0</li>
<li>修改值：7.0</li>
<li>参数说明：默认值为 5.0 代表着游戏的默认最高难度。恐龙最高等级是参数的 30 倍，即 5 对应的恐龙最高等级为 150</li>
</ul>
<h3 id="清除野生恐龙代码"><a href="#清除野生恐龙代码" class="headerlink" title="清除野生恐龙代码"></a>清除野生恐龙代码</h3><ul>
<li>进入游戏，呼出控制台，输入 <code>cheat destroywilddinos</code></li>
</ul>
<h3 id="建筑物拾取时间修改"><a href="#建筑物拾取时间修改" class="headerlink" title="建筑物拾取时间修改"></a>建筑物拾取时间修改</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：<code>StructurePickupTimeAfterPlacement</code></li>
<li>默认值：30.000000(s)</li>
<li>修改值：120.0</li>
<li>设置永久可拾取：添加一行 <code>AlwaysAllowStructurePickup=True</code></li>
</ul>
<h3 id="设置一次留满痕"><a href="#设置一次留满痕" class="headerlink" title="设置一次留满痕"></a>设置一次留满痕</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项<ol>
<li>修改留痕间隔系数 0.01</li>
<li><code>[/Script/ShooterGame.ShooterGameUserSettings]</code> 下 新增 <code>BabyImprintAmountMultiplier=10000</code></li>
</ol>
</li>
</ul>
<h3 id="代码设置恐龙颜色"><a href="#代码设置恐龙颜色" class="headerlink" title="代码设置恐龙颜色"></a>代码设置恐龙颜色</h3><ul>
<li>在控制台使用代码 <code>SetTargetDinoColor 0 1</code> 对目标设置颜色，第一个数字代表色区，范围0-5。第二个数字代表颜色代号。</li>
</ul>
<h3 id="本地文件修改人物，恐龙加点上限"><a href="#本地文件修改人物，恐龙加点上限" class="headerlink" title="本地文件修改人物，恐龙加点上限"></a>本地文件修改人物，恐龙加点上限</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：Game.ini</li>
<li>修改项<ul>
<li>将相关配置复制粘贴至Game.ini最后即可</li>
</ul>
</li>
</ul>
<h3 id="本地文件修改终端上传物品，恐龙数量上限"><a href="#本地文件修改终端上传物品，恐龙数量上限" class="headerlink" title="本地文件修改终端上传物品，恐龙数量上限"></a>本地文件修改终端上传物品，恐龙数量上限</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项<ul>
<li>物品：在 <code>[ServerSettings]</code> 下新增 <code>MaxTributeItems=150</code></li>
<li>恐龙：在 <code>[ServerSettings]</code> 下新增 <code>MaxTributeDinos=270</code></li>
</ul>
</li>
</ul>
<h3 id="单机游戏常用设置"><a href="#单机游戏常用设置" class="headerlink" title="单机游戏常用设置"></a>单机游戏常用设置</h3><ul>
<li><p>通用</p>
<ul>
<li>难度等级：1.0</li>
<li>恐龙攻击伤害的系数：1.0</li>
<li>玩家攻击伤害的系数：1.0</li>
<li>建筑物攻击伤害的系数：1.0</li>
<li>玩家承受伤害的系数：1.0</li>
<li>恐龙承受伤害的系数：1.0</li>
<li>建筑物承受伤害的系数：1.0</li>
<li>经验值加成系数：3.0</li>
<li>驯服速度系数：5.0</li>
<li>建筑物修复冷却时间的系数：0</li>
<li>恐龙炮塔伤害的系数：1.0</li>
<li>恐龙采集伤害的系数：5.0</li>
<li>资源获取数量的系数：3.0</li>
<li>玩家水分消耗速度：1.0</li>
<li>玩家食物消耗速度：1.0</li>
<li>恐龙食物消耗速度：3.0</li>
<li>玩家耐力消耗速度：0.8</li>
<li>恐龙耐力消耗速度：1.0</li>
<li>玩家生命回复速度：1.3</li>
<li>恐龙生命回复速度：1.0</li>
<li>玩家采集伤害的系数：3.5</li>
<li>恐龙总量的系数：1.5</li>
<li>非专用共享主机距离：1.0</li>
<li>[x] 允许第三人称视角</li>
<li>[ ] 启用全服语音聊天</li>
<li>[x] 启用本地文字聊天</li>
<li>[x] 玩家离开提醒</li>
<li>[x] 玩家进入提醒</li>
<li>[x] 管理员日志</li>
<li>[x] 显示准心</li>
<li>[ ] 强制无HUD</li>
<li>[ ] 禁用补给箱</li>
<li>[ ] 硬汉模式</li>
<li>[ ] PVE模式</li>
<li>[x] 禁用友军伤害</li>
<li>[x] 小地图显示玩家位置</li>
<li>[ ] 禁止下载贡品</li>
<li>[ ] 禁止下载生存者</li>
<li>[ ] 禁止下载物品</li>
<li>[ ] 禁止下载恐龙</li>
<li>[x] 最高难度</li>
<li>[x] PVP模式允许调整伽马值</li>
<li>[ ] 使用单人游戏设置</li>
<li>[x] 使用尸体位置标记</li>
<li>[x] 禁用建筑物碰撞限制</li>
<li>[x] 允许平台鞍上建造多层建筑</li>
<li>[x] 允许多次重置属性点</li>
<li>[ ] 禁止驯养恐龙</li>
<li>[ ] 禁止骑乘恐龙</li>
<li>[x] 显示建造模式</li>
<li>[x] 允许升级飞行宠速度</li>
</ul>
</li>
<li><p>高级</p>
<ul>
<li>[ ] 允许PVE计时器</li>
<li>[ ] 允许PVE使用系统时间</li>
<li>[ ] 禁用部落联盟</li>
<li>[x] PVE允许宣战</li>
<li>[ ] PVE允许取消宣战</li>
<li>[ ] 禁用PVE调整伽马值</li>
<li>[x] 允许PVE洞穴口建筑</li>
<li>[x] 允许PVE模式飞行宠抓物</li>
<li>[ ] 扩大资源点附近禁造区域的大小</li>
<li>[x] PVE禁用建筑物自动损毁</li>
<li>[ ] PVE禁用恐龙自动清除</li>
<li>PVE建筑物自动损毁倒计时长的系数：1.0</li>
<li>PVE恐龙自动清除倒计时长的系数：1.0</li>
<li>PVE自动开始时间（秒）：0.0</li>
<li>PVE自动结束时间（秒）：0.0</li>
<li>[ ] 禁用疾病</li>
<li>[x] 非永久性疾病</li>
<li>[x] 强制允许洞穴飞行</li>
<li>[ ] PVP恐龙自动清除</li>
<li>[x] 允许平台鞍上放置炮塔</li>
<li>[x] 增加PVE重生时间间隔</li>
<li>[ ] 启用下线保护</li>
<li>下线保护等待时间：0.01</li>
<li>PVP重生间隔周期：300</li>
<li>PVP重生间隔系数：2.0</li>
<li>PVP重生间隔基数：59.999</li>
<li>PVP特殊区域建筑物受到伤害加成的系数：6.0</li>
<li>建筑物周围禁止资源刷新半径的系数：0.5</li>
<li>世界设置<ul>
<li>[ ] 禁用恐龙留痕增益</li>
<li>[ ] 允许他人完成留痕任务</li>
<li>排序间隔：1.0</li>
<li>产蛋间隔：0.07</li>
<li>交配间隔：0.01</li>
<li>蛋孵化速度：100.0</li>
<li>幼兽成长速度：100.0</li>
<li>幼兽食物消耗速度：1.0</li>
<li>资源数量：3.0</li>
<li>资源刷新周期：0.05</li>
<li>留痕间隔系数：0.01</li>
<li>留痕效果持续时长的系数：6.0</li>
<li>留痕度降低系数：1.0</li>
<li>留痕属性缩放系数：6.0</li>
<li>昼夜循环系数：1.3</li>
<li>白天时间速度：1.0</li>
<li>夜晚时间速度：5.0</li>
<li>腐坏时间：0.0</li>
<li>物品分解时间：2</li>
<li>尸体分解时间：2</li>
<li>禁止资源刷新半径——玩家：0.7</li>
<li>禁止资源刷新半径——建筑物：0.7</li>
<li>作物生长速度：20</li>
<li>作物枯萎速度：20</li>
</ul>
</li>
<li>野生恐龙每级属性<ul>
<li>生命值：1.0</li>
<li>耐力：1.0</li>
<li>眩晕：1.0</li>
<li>氧气：1.0</li>
<li>食物：1.0</li>
<li>水：1.0</li>
<li>温度：1.0</li>
<li>重量：1.0</li>
<li>伤害：1.0</li>
<li>速度：1.0</li>
<li>抗性：1.0</li>
</ul>
</li>
<li>已驯服恐龙每级属性<ul>
<li>生命值：0.2</li>
<li>耐力：3.0</li>
<li>眩晕：1.0</li>
<li>氧气：1.0</li>
<li>食物：1.0</li>
<li>水：1.0</li>
<li>温度：1.0</li>
<li>重量：10</li>
<li>伤害：0.17</li>
<li>速度：1.0</li>
<li>抗性：1.0</li>
</ul>
</li>
<li>已驯服恐龙每级增加属性：<ul>
<li>生命值：0.14</li>
<li>耐力：3.0</li>
<li>眩晕：1.0</li>
<li>氧气：1.0</li>
<li>食物：1.0</li>
<li>水：1.0</li>
<li>温度：1.0</li>
<li>重量：10</li>
<li>伤害：0.14</li>
<li>速度：1.0</li>
<li>抗性：1.0</li>
</ul>
</li>
<li>已驯服恐龙属性加成：<ul>
<li>生命值：0.44</li>
<li>耐力：3.0</li>
<li>眩晕：1.0</li>
<li>氧气：1.0</li>
<li>食物：1.0</li>
<li>水：1.0</li>
<li>温度：1.0</li>
<li>重量：10</li>
<li>伤害：0.44</li>
<li>速度：1.0</li>
<li>抗性：1.0</li>
</ul>
</li>
<li>玩家角色每级属性：<ul>
<li>生命值：1.0</li>
<li>耐力：1.2</li>
<li>眩晕：1.0</li>
<li>氧气：1.0</li>
<li>食物：1.0</li>
<li>水：1.0</li>
<li>温度：1.0</li>
<li>重量：20.0</li>
<li>伤害：1.0</li>
<li>速度：1.0</li>
<li>抗性：1.0</li>
</ul>
</li>
<li>经验值系数：<ul>
<li>一般：1.0</li>
<li>击杀：1.0</li>
<li>采集：1.0</li>
<li>制作：1.0</li>
<li>特殊：1.0</li>
</ul>
</li>
<li>其他设置<ul>
<li>部落成员上限数：0</li>
<li>玩家最大经验点数：0</li>
<li>恐龙最大经验点数：0</li>
<li>[ ] 允许站在非友方飞行单位的平台鞍上</li>
<li>[x] 允许拒马对野生或无骑手的恐龙造成伤害</li>
<li>[ ] 仅启用指定的印痕技能</li>
<li>[x] 显示浮动伤害信息</li>
<li>[x] 启用自定义食谱</li>
<li>[x] 允许泰坦类恐龙进食</li>
<li>泰坦类恐龙食物消耗速度：1.0</li>
<li>自定义食谱效果：6.0</li>
<li>制造速度对自定义食谱的影响系数：6.0</li>
<li>制作技能加成的系数：5.0</li>
<li>补给箱奖励品质：3.0</li>
<li>渔获品质：3.0</li>
<li>增加平台按建筑上限：5.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h2><h3 id="启用的模组"><a href="#启用的模组" class="headerlink" title="启用的模组"></a>启用的模组</h3><h4 id="基础模组"><a href="#基础模组" class="headerlink" title="基础模组"></a>基础模组</h4><ul>
<li><code>ARK Nucleus</code>，id=2566418613。控制台系MOD，可刷取恐龙，物品，模组物品等</li>
<li><code>CS+ MOD(S+)</code>，id=1998877847。S+模组的汉化版本</li>
<li><code>Kraken&#39;s Better Dinos</code>，id=1565015734。恐龙优化模组</li>
<li><code>Awesome Spyglass</code>，id=1404697612。A镜</li>
<li><code>HG Stacking Mod 5000-90 V316</code>，id=849985437。HG叠加模组</li>
<li><code>Dino Storage V2</code>，id=1609138312。恐龙精灵球</li>
<li><code>Awesome Teleporters</code>，id=889745138。传送器</li>
<li><code>Upgrade Station V1.81</code>，id=821530042。可升级物品和图纸</li>
<li><code>Chair of the impatient</code>，id=1701948682。时间加速椅子</li>
<li><code>Any Color Sets</code>，id=2302876995。恐龙色彩模组</li>
<li><code>Custom Dino levels</code>，id=2182894352。自定义恐龙等级</li>
<li><code>The Tombstone (Inventory recovery after death)</code>,，id=1139981401。死亡自动获取物品，并在原地留下一个墓碑</li>
<li><code>Creature Finder Deluxe (single player: read description)</code>，id=1591643730。全图恐龙搜寻模组</li>
</ul>
<h4 id="附加趣味性、功能性模组"><a href="#附加趣味性、功能性模组" class="headerlink" title="附加趣味性、功能性模组"></a>附加趣味性、功能性模组</h4><ul>
<li><code>ARK Additions: The Collection!</code>，id=1522327484。添加了一些额外的生物</li>
<li><code>ARK Additions: Domination Rex!</code>，id=1445395055。添加了暴虐霸王龙</li>
<li><code>Eddys Weapon Attachments</code>，id=2520360874。增加武器扩容</li>
<li><code>Leathals Reusables</code>，id=1967741708。增加反复使用的武器和工具</li>
<li><code>Tranq Sniper</code>，id=2657711622。麻醉狙击枪(只能使用原版的麻醉镖，无法使用模组物品)</li>
<li><code>Medicines v3</code>，id=2637993032。增加一些人物和恐龙的药物</li>
<li><code>Meat Spoiler</code>，id=569786012。快速制造腐肉</li>
<li><code>ys</code>，id=2627481742。原神等服装</li>
</ul>
<h3 id="未启用的模组"><a href="#未启用的模组" class="headerlink" title="未启用的模组"></a>未启用的模组</h3><ul>
<li><code>Ultra Stacks</code>，id=761535755。物品减重叠加模组</li>
<li><code>Bitou2k&#39;s Binocular</code>，id=1136125765。B镜</li>
<li><code>Dino Tracker</code>，id=924933745。恐龙搜寻器(更换为全图搜寻)</li>
<li><code>Dino Machines</code>，id=1988152145。增加一些特殊用品如似鸡龙发电机等(有BUG)</li>
<li><code>Eco&#39;s Organic Saddles</code>，id=2314097347。增加几个庞马鞍</li>
<li><code>Automatic Death Recovery</code>，id=1315534671。死亡自动获取原物品</li>
<li><code>Dino Tracker</code>，id=924933745。恐龙搜寻器(暂时不用)</li>
<li><code>DODOREX</code>，id=2646901816。增加渡渡霸王龙</li>
<li><code>Human NPC&#39;s</code>，id=1443404076。增加野人</li>
<li><code>Castles, Keeps</code>, and Forts Remastered，id=1814953878。增加城堡建筑</li>
<li><code>Cement Mixer</code>，id=612588150。可以手动制造水泥</li>
<li><code>eco&#39;s Empires</code> - Tokugawa，id=2053416662。增加日本风建筑</li>
<li><code>HG Dino Color V1.5</code>，id=2597341089。HG恐龙染色模组</li>
<li><code>HGPlus Resource Pulling V1.1</code>，HG资源拉取模组</li>
<li><code>More Tranq Items</code>，id=2278341478。增加多项麻醉物品</li>
</ul>
<h3 id="Custom-Dino-Levels"><a href="#Custom-Dino-Levels" class="headerlink" title="Custom Dino Levels"></a>Custom Dino Levels</h3><p>该模组可以更加详细的设定野生恐龙的等级范围。有三种设定模式</p>
<ol>
<li><p>仙境模式<br>该模式下恐龙等级会同仙境、中心岛和水晶岛有相同的生成模式：尽管水平权重总体上仍向较低范围倾斜，但是高等级恐龙有了更高的生成概率。一些等级的恐龙将永远不会被生成：在最高难度下，这些等级是 5, 10, 30, 35, 40, 65, 70, 75, 80, 105, 110, 115, 120 和 125（该模组并不会主动将游戏设置为最高难度，如果需要，参考本文前面的“通过配置文件修改等级上限”）</p>
</li>
<li><p>均衡模式（默认模式）<br>该模式允许生成全等级范围的恐龙，5 级与 150 级的恐龙生成的概率是相同的。如果你需要自定义最小最大等级，该模式是必须激活的模式</p>
</li>
<li><p>高等级模式<br>该模式反转了原始游戏中高低等级恐龙生成的概率，因此将严重偏向生成高等级恐龙</p>
</li>
</ol>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li><p>修改项：<code>[CustomLevelDistrib]</code></p>
<ul>
<li><p>参数说明</p>
<ul>
<li><code>WantsRagLevels</code>, <code>WantsEqualLevels</code>, <code>WantsHighLevels</code> 三项中有且只有一项为 True</li>
<li>恐龙等级由基础难度与设定范围相乘所得，如5*30=150，即恐龙等级为150</li>
<li>MinLevel：设定普通恐龙等级范围的最小值</li>
<li>MaxLevel：设定普通恐龙等级范围的最大值</li>
<li>PreventBee：阻止等级影响到蜂王的等级，即蜂王等级还是游戏原设定</li>
<li>PreventTitan：阻止泰坦受影响</li>
<li>MinDrakeLevel：设定飞龙，岩龙的最小等级范围</li>
<li>MaxDrakeLevel：设定飞龙，岩龙最大的等级范围</li>
</ul>
</li>
<li><p>WantsRagLevels 类仙境恐龙等级设置样例</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">MinLevel</span>=<span class="number">1.000000</span></span><br><span class="line"><span class="attr">MaxLevel</span>=<span class="number">30.000000</span></span><br><span class="line"><span class="attr">WantsEqualLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">WantsRagLevels</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">WantsHighLevels</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WantsHighLevels 高等级恐龙设定样例</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">MinLevel</span>=<span class="number">1.000000</span></span><br><span class="line"><span class="attr">MaxLevel</span>=<span class="number">30.000000</span></span><br><span class="line"><span class="attr">WantsEqualLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">WantsRagLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">WantsHighLevels</span>=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WantsEqualLevels 平均恐龙等级设定样例</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">MinLevel</span>=<span class="number">10.000000</span></span><br><span class="line"><span class="attr">MaxLevel</span>=<span class="number">30.000000</span></span><br><span class="line"><span class="attr">WantsEqualLevels</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">WantsRagLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">WantsHighLevels</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>我的个人设置</p>
</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[CustomLevelDistrib]</span></span><br><span class="line"><span class="attr">WantsEqualLevels</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">WantsRagLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">WantsHighLevels</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">PreventTitan</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">PreventBee</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">MinLevel</span>=<span class="number">1.000000</span></span><br><span class="line"><span class="attr">MaxLevel</span>=<span class="number">40.000000</span></span><br><span class="line"><span class="attr">MinDrakeLevel</span>=<span class="number">20.000000</span></span><br><span class="line"><span class="attr">MaxDrakeLevel</span>=<span class="number">45.000000</span></span><br><span class="line"><span class="attr">MaxDeinonLevel</span>=<span class="number">45.000000</span></span><br></pre></td></tr></table></figure>
<h3 id="Any-Colour-Sets"><a href="#Any-Colour-Sets" class="headerlink" title="Any Colour Sets"></a>Any Colour Sets</h3><p>该模组允许你自定义恐龙生成的颜色</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li><p>修改项：<code>[AnyColourSets]</code></p>
<ul>
<li>参数说明<ul>
<li>ColoursetBPPaths: 将任何不属于该模组以及原生的颜色集添加到该模组的应用中时，需要在这里添加其路径，如 <code>ColoursetBPPaths=Blueprint&#39;/Game/Mods/AnyColourSets/CustomColourSets/DinoColorSet_ACSBioLumAberrant.DinoColorSet_ACSBioLumAberrant&#39;</code></li>
<li>UseArkEvents: 默认为 False。该选项允许模组读取 <code>activeevent=</code> 配置的活动信息，并为所有恐龙激活适当的事件集</li>
<li>ArkEventChance: 设定允许接收全局事件颜色集的机会。使用 0.01 到 100 之间的数字表示百分比</li>
<li>UseCustomGlobalSets: 默认为 True。允许为所有恐龙使用自定义的颜色集</li>
<li>UseAllSets: 默认为 False。该选项要求 <code>UseCustomGlobalSets</code> 选项为 True。允许全局颜色集使用 mod 已设置的颜色集</li>
<li>GlobalColourSets: 设置用于所有恐龙生成时使用的颜色集。所有条目用逗号分隔，并且不要在每个逗号之前或之后加空格。任何不属于 ACS 或原生的颜色集必须被加入到 <code>ColoursetBPPaths</code> 中</li>
<li>CustomGlobalColourSetChance: 设置恐龙获取自定颜色集的几率。如果启用了 <code>UseCustomGlobalSet</code>，则必须为该选项赋值</li>
</ul>
</li>
</ul>
</li>
<li><p>我的个人设置</p>
</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[AnyColourSets]</span></span><br><span class="line"><span class="attr">ColoursetBPPaths</span>=Blueprint<span class="string">&#x27;/Game/Mods/ExampleMod/Colours/DinoColorSet_RandomColours.DinoColorSet_RandomColours&#x27;</span></span><br><span class="line"><span class="attr">DisableSetOverrides</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">SetAppliedOrder</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">GlobalColourSets</span>=DinoColorSet_ACSMoltenElementAberrant_C,DinoColorSet_ACSAquatic_C</span><br><span class="line"><span class="attr">UseCustomGlobalSets</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">CustomGlobalColourSetChance</span>=<span class="number">100</span></span><br><span class="line"><span class="attr">DinosToUseCustomSets</span>=argent_character_bp_c,raptor_character_bp_C,achatina_Character_bp_c,Achatina_Character_BP_C,Achatina_Character_BP_C,rex_Character_bp_c,rex_character_bp_C,</span><br><span class="line"><span class="attr">ColourSetsToUse</span>=DinoColorSet_ACSGlacial_C,SE_DinoColorSet_MegaWyvern_Fire_C,DinoColorSet_ACSVibrant_C,DinoColorSet_ACSVolcanic_C,DinoColorSet_ACSDeepOcean_C,DinoColorSet_ACSVolcanic_C,DinoColorSet_RandomColours_C</span><br><span class="line"><span class="attr">ChanceOfColourSet</span>=<span class="number">40</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">80</span>,</span><br><span class="line"><span class="attr">ExtraEntriesToCheck</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">UseSpecificGlobalChances</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">SpecificGlobalChancesDinos</span>=Achatina_Character_BP_C,Allo_Character_BP_C,Ankylo_Character_BP_C,</span><br><span class="line"><span class="attr">SpecificGlobalChances</span>=<span class="number">60</span>,<span class="number">20</span>,<span class="number">80</span></span><br><span class="line"><span class="attr">UseGlobalExcludeClasses</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">GlobalExcludeClasses</span>=Baryonyx_Character_BP_C,Toad_Character_BP_C,Doed_Character_BP_C,Rex_Character_bp_c</span><br></pre></td></tr></table></figure>
<h3 id="S"><a href="#S" class="headerlink" title="S+"></a>S+</h3><p>S+ 模组提供了一系列比原版更加强大的建筑材料，制作工具等。中文版为 CS+ Mod (id=1998877847)</p>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>配置网址：&lt;<a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vTCz51gbAXrJjqpTySgqID0SvEScS6hBwpzEawIBj4h3l4iX0695S2TWgQYRaU6bL31h-IK_LLubGbO/pubhtml&gt;">https://docs.google.com/spreadsheets/d/e/2PACX-1vTCz51gbAXrJjqpTySgqID0SvEScS6hBwpzEawIBj4h3l4iX0695S2TWgQYRaU6bL31h-IK_LLubGbO/pubhtml&gt;</a></li>
<li>修改项：[StructuresPlus]<ul>
<li>参数说明<ul>
<li><code>EnableEngramOverride=true</code> 覆盖原有图纸</li>
<li><code>DisableUnlockingMapSpecificEngrams=false</code> 禁止解锁特定地图的印痕点</li>
<li><code>ResourcePullRangeInFoundations=25</code> 拉取资源的基础范围</li>
<li><code>ResourceTransferCooldown=1.0</code> 拉取资源的冷却时间</li>
<li><code>BedCooldownTimeInSeconds=300</code> 床冷却时间</li>
<li><code>BunkBedCooldownTimeInSeconds=120</code> 双层床冷却时间</li>
<li><code>TekBedCooldownTimeInSeconds=60</code> 泰克床冷却时间</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[StructuresPlus]</span></span><br><span class="line"><span class="attr">EnableEngramOverride</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">DisableUnlockingMapSpecificEngrams</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">ResourcePullRangeInFoundations</span>=<span class="number">60</span></span><br><span class="line"><span class="attr">ResourceTransferCooldown</span>=<span class="number">0.1</span></span><br><span class="line"><span class="attr">BedCooldownTimeInSeconds</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">BunkBedCooldownTimeInSeconds</span>=<span class="number">15</span></span><br><span class="line"><span class="attr">TekBedCooldownTimeInSeconds</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">PullResourceAdditions</span>=/Game/Mods/MyMod/Gravel/PrimalItemResource_Gravel_mymod.PrimalItemResource_Gravel_mymod</span><br></pre></td></tr></table></figure>
<h3 id="Bitou2k’s-Binocular"><a href="#Bitou2k’s-Binocular" class="headerlink" title="Bitou2k’s Binocular"></a>Bitou2k’s Binocular</h3><p>B镜，可显示恐龙的当前状态、属性加点与驯服需要的食物。在瞄准时按下 Ctrl 键启用夜视功能，按下 R 键启用雷达功能，按下 G 键打开食物界面，按下 N 键打开恐龙属性点界面。B 镜左右两侧的数值是当前准心出的 GPS 坐标</p>
<h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li><p>修改项：[B2kBinocular]</p>
<ul>
<li>参数说明<ul>
<li><code>StatsDelay=0</code> 设置恐龙的信息面板出现的延迟。设置值为 0 到 10 之间的整数</li>
<li><code>DisableTraceFloatingHUD=false</code> 只显示恐龙的信息而不显示建筑、玩家的信息</li>
<li><code>DisableNightVision=false</code> 关闭夜视功能</li>
<li><code>DisableRadarESP=false</code> 关闭雷达扫描功能</li>
<li><code>DisableDinoPoints=false</code> 关闭恐龙点数显示功能</li>
<li><code>DisableDinoFoods=false</code> 关闭恐龙食物显示功能</li>
<li><code>PreventEnemyStats=false</code> 阻止显示任何敌对恐龙的信息</li>
<li><code>PreventEnemyDinoPoints=false</code> 阻止显示敌对恐龙的点数信息</li>
<li><code>AlwaysShowPointsColumn=false</code> 总是显示点数信息面板</li>
<li><code>AlwaysShowFoodsColumn=false</code> 总是显示食物信息面板</li>
<li><code>NoAimTargeting=false</code> 在不瞄准的情况下显示恐龙信息面板</li>
</ul>
</li>
</ul>
</li>
<li><p>我的个人设置</p>
</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[B2kBinocular]</span></span><br><span class="line"><span class="attr">AlwaysShowPointsColumn</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">AlwaysShowFoodsColumn</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="Creature-Finder-Deluxe"><a href="#Creature-Finder-Deluxe" class="headerlink" title="Creature Finder Deluxe"></a>Creature Finder Deluxe</h3><p>寻找恐龙 MOD，单机模式下使用该 MOD 需要打开阻止全局时停功能，具体见前文所述</p>
<p>该 MOD 最好放在 MOD 列表最后</p>
<ul>
<li><code>Shift F8</code> 打开恐龙寻找窗口</li>
<li><code>F6,F7</code> 循环寻找已发现的生物</li>
<li><code>F8</code> 打开恐龙指示器</li>
<li><code>F9</code> 重复搜索</li>
</ul>
<h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li><p>修改项：[B2kBinocular]</p>
<ul>
<li>参数说明<ul>
<li><code>FindAllCreatures=True</code> 如果设为 False，只有可驯服的生物可以被搜素到</li>
<li><code>ShowOnlyTamed=True</code> 默认为 False，可以搜索被驯服的和野生恐龙</li>
<li><code>CreatureClassRequired=True</code> 默认为 False</li>
<li><code>AdminOnly=True</code> 默认为 False，寻龙模组只能由管理员使用</li>
<li><code>ScanRange=</code> 默认 1000000</li>
</ul>
</li>
</ul>
</li>
<li><p>我的个人设置</p>
</li>
</ul>
<p>使用默认设置</p>
<h3 id="Dino-Storage-v2"><a href="#Dino-Storage-v2" class="headerlink" title="Dino Storage v2"></a>Dino Storage v2</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>配置网址：&lt;<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1822824970&gt;">https://steamcommunity.com/sharedfiles/filedetails/?id=1822824970&gt;</a></li>
<li>相关网址：&lt;<a href="https://www.bilibili.com/read/cv10605711&gt;">https://www.bilibili.com/read/cv10605711&gt;</a></li>
<li>修改项：[DinoStorage2]<ul>
<li>参数说明<ul>
<li><code>BabyGrowthMultiplier=0.0</code>  &gt;0将使得婴儿在存储器中生长，1.0为默认倍率</li>
<li><code>DeathAutoTrap=True</code>  死亡自动捕获</li>
<li><code>DATGiveToPlayer=True</code>  死亡捕获后自动给予最近的玩家</li>
<li><code>DATGiveToTerminal=True</code>  死亡捕获后自动交给最近的终端</li>
<li><code>RemoveMatingCooldown=True</code>  释放时取消掉交配CD</li>
<li><code>AllowBossArenaRelease=True</code>  允许在BOSS竞技场中释放恐龙</li>
<li><code>AllowBossCaveRelease=True</code>  允许在BOSS洞穴中释放恐龙</li>
<li><code>AmmolessNewbornAutoTrap=True</code>  新生儿自动诱捕不需要灵魂球</li>
<li><code>GodlyTerminal=True</code>  终端是无敌的</li>
<li><code>UnlockTributeTerminal=True</code>  终端可以用作贡品终端</li>
<li><code>KeepEnabledMatingStatus=True</code>  保留“启用交配”设置</li>
<li><code>KeepIgnoreWhistleStatus=True</code>  保留“忽略哨声”设置</li>
<li><code>KeepAllyLookingStatus=True</code> 收球时保留同伴注视设定</li>
<li><code>PassiveCharge=1.05</code>  收球后被动充电倍率，1为默认</li>
<li><code>PassiveFood=0.0</code>  收球后食物度恢复</li>
<li><code>PassiveHP=1.05</code>  收球后生命回复</li>
<li><code>PassiveStam=1.05</code>  收球后耐力回复</li>
<li><code>PassiveWool=1.05</code>  收球后羊毛生长速率</li>
<li><code>PassiveXP=1.05</code>  收球后经验获取倍率</li>
<li><code>SoulGunWeight=2.0</code>  灵魂枪重量，默认为10.0</li>
<li><code>ReleasePreventDupeID=True</code> 释放时将检查现有的具有相同ID的恐龙，提供GPS位置</li>
<li><code>TrappingTribeLogs=True</code> 捕获时添加部落日志</li>
<li><code>ReleaseTribeLogs=True</code> 释放时将添加部落记录</li>
<li><code>PoopConvertSpeed=1.05</code> 便便转化为化肥的速度，1.0是现实倍率</li>
<li><code>TerminalEggMultiplier=1.05</code> 终端内下蛋的倍率，1.0是现实倍率</li>
<li><code>TerminalMiscPoopMultiplier=1.05</code> 终端内杂项便便的倍率，1.0是现实倍率</li>
<li><code>PrimitiveTerminal=True</code> 灵魂终端初始为书籍模型</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[DinoStorage2]</span></span><br><span class="line"><span class="attr">BabyGrowthMultiplier</span>=<span class="number">10.0</span></span><br><span class="line"><span class="attr">DeathAutoTrap</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">DATGiveToPlayer</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">RemoveMatingCooldown</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">AllowBossArenaRelease</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">AllowBossCaveRelease</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">AmmolessNewbornAutoTrap</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">GodlyTerminal</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">UnlockTributeTerminal</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">KeepEnabledMatingStatus</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">KeepIgnoreWhistleStatus</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">KeepAllyLookingStatus</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">PassiveCharge</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">PassiveFood</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">PassiveHP</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">; PassiveStam=10</span></span><br><span class="line"><span class="attr">PassiveWool</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">; PassiveXP=5</span></span><br><span class="line"><span class="attr">SoulGunWeight</span>=<span class="number">2.0</span></span><br><span class="line"><span class="attr">ReleasePreventDupeID</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">TrappingTribeLogs</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">ReleaseTribeLogs</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">PoopConvertSpeed</span>=<span class="number">2.0</span></span><br><span class="line"><span class="attr">TerminalEggMultiplier</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">TerminalMiscPoopMultiplier</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">PrimitiveTerminal</span>=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="BetterDinos"><a href="#BetterDinos" class="headerlink" title="BetterDinos"></a>BetterDinos</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[BetterDinos]<ul>
<li>参数说明<ul>
<li><code>AllowFlyerSpeed=True</code> 允许将飞行类生物转换为速度更快的版本</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[BetterDinos]</span></span><br><span class="line"><span class="attr">AllowFlyerSpeed</span>=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="Chair-of-the-impatient"><a href="#Chair-of-the-impatient" class="headerlink" title="Chair of the impatient"></a>Chair of the impatient</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[ChariOfTheImpatient]<ul>
<li>参数说明<ul>
<li><code>TimeMultiplier=10</code> 时间快进倍率</li>
<li><code>EnableBlocking=True</code> 允许玩家阻止时间椅子</li>
<li><code>ShowServerNotification=True</code> 允许服务器通知其他玩家</li>
<li><code>CheckEveryoneSitsCheckTime=5</code> 服务器设置</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[ChariOfTheImpatient]</span></span><br><span class="line"><span class="attr">TimeMultiplier</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">EnableBlocking</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">ShowServerNotification</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">CheckEveryoneSitsCheckTime</span>=<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="Cement-Mixer"><a href="#Cement-Mixer" class="headerlink" title="Cement Mixer"></a>Cement Mixer</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[StructuresPlus]<ul>
<li>参数说明<ul>
<li>为了使S+能拉取该模组内的物品，需要在S+的配置里增加一项，内容如下</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[StructuresPlus]</span></span><br><span class="line"><span class="attr">PullResourceAdditions</span>=/Game/Mods/MyMod/Gravel/PrimalItemResource_Gravel_mymod.PrimalItemResource_Gravel_mymod</span><br></pre></td></tr></table></figure>
<h3 id="Leathals-Reusables"><a href="#Leathals-Reusables" class="headerlink" title="Leathals Reusables"></a>Leathals Reusables</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[LethalsReusables]<ul>
<li>参数说明<ul>
<li><code>BloodExtractDino=True</code> 允许抽血器抽恐龙血</li>
<li><code>BloodExtractHPCost=100.0</code> 单次抽血量</li>
<li><code>BloodExtractPacks=1000</code> 单次可以抽多少包血</li>
<li><code>GliderCooldownMultiplier=2.0</code> 设置滑翔翼重开速度</li>
<li><code>GliderReqSpeedMultiplier=1.0</code> 设置滑翔翼滑行所需最小速度</li>
<li><code>GliderSpeedMultiplier=2.0</code> 设置滑翔翼最大滑行速度</li>
<li><code>GliderTurnMultiplier=1.0</code> 设置滑翔翼滑行时的转弯角度</li>
<li><code>WeightMultiplier=1.0</code> 设置模组物品的重量参数</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[LethalsReusables]</span></span><br><span class="line"><span class="attr">BloodExtractDino</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">BloodExtractHPCost</span>=<span class="number">100.0</span></span><br><span class="line"><span class="attr">BloodExtractPacks</span>=<span class="number">1000</span></span><br><span class="line"><span class="attr">GliderCooldownMultiplier</span>=<span class="number">1.0</span></span><br><span class="line"><span class="attr">GliderReqSpeedMultiplier</span>=<span class="number">1.0</span></span><br><span class="line"><span class="attr">GliderSpeedMultiplier</span>=<span class="number">2.0</span></span><br><span class="line"><span class="attr">GliderTurnMultiplier</span>=<span class="number">3.0</span></span><br><span class="line"><span class="attr">WeightMultiplier</span>=<span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<h3 id="Human-NPCS"><a href="#Human-NPCS" class="headerlink" title="Human NPCS"></a>Human NPCS</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[Human_NPCs]<ul>
<li>参数说明<ul>
<li><code>Start_Clothing=7</code> 野人的启示衣服等级<blockquote>
<p>1：布甲，2：皮甲，3：毛皮，4：吉利，5：沙漠，6：甲壳，7：金属，8：防暴，9：防护，10：猛犸皮革。</p>
</blockquote>
</li>
<li><code>TurretsAllowed=1</code> 允许野人使用X种子植物</li>
</ul>
</li>
</ul>
</li>
<li>修改项：[Human_NPCs_Settings]<ul>
<li>参数说明<ul>
<li><code>Health_x=0.0</code> 生命值</li>
<li><code>Weight_x=5.0</code> 负重</li>
<li><code>Stamina_x=5.0</code> 耐力</li>
<li><code>Food_x=5.0</code> 食物</li>
<li><code>Melee_Damage_x=5.0</code> 攻击</li>
<li><code>Speed_x=5.0</code> 速度</li>
<li><code>Torpidity_x=5.0</code> 眩晕</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Human_NPCs]</span></span><br><span class="line"><span class="attr">Start_Clothing</span>=<span class="number">7</span></span><br><span class="line"><span class="attr">TurretsAllowed</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Human_NPCs_Settings]</span></span><br><span class="line"><span class="attr">Health_x</span>=<span class="number">5.0</span></span><br><span class="line"><span class="attr">Weight_x</span>=<span class="number">5.0</span></span><br><span class="line"><span class="attr">Stamina_x</span>=<span class="number">5.0</span></span><br><span class="line"><span class="attr">Food_x</span>=<span class="number">5.0</span></span><br><span class="line"><span class="attr">Melee_Damage_x</span>=<span class="number">5.0</span></span><br><span class="line"><span class="attr">Speed_x</span>=<span class="number">1.0</span></span><br><span class="line"><span class="attr">Torpidity_x</span>=<span class="number">5.0</span></span><br></pre></td></tr></table></figure>
<h3 id="The-Tombstone-Inventory-recovery-after-death"><a href="#The-Tombstone-Inventory-recovery-after-death" class="headerlink" title="The Tombstone (Inventory recovery after death)"></a>The Tombstone (Inventory recovery after death)</h3><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li>修改项：[TheTombstone]<ul>
<li>参数说明<ul>
<li><code>KeepInventoryOnDeath=True</code> 死亡重生后物品回到库存</li>
<li><code>DestroyGravestoneWhenEmpty=False</code> 当墓碑为空时摧毁墓碑</li>
<li><code>OneTombstonePerPlayer=False</code> 一个世界中只能存在一个墓碑</li>
<li><code>AutoDestroyAfterSeconds=345600</code> 当多少时间后摧毁墓碑，设为0不摧毁</li>
</ul>
</li>
</ul>
</li>
<li>我的个人设置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[TheTombstone]</span></span><br><span class="line"><span class="attr">KeepInventoryOnDeath</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">DestroyGravestoneWhenEmpty</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">OneTombstonePerPlayer</span>=<span class="literal">False</span></span><br><span class="line"><span class="attr">AutoDestroyAfterSeconds</span>=<span class="number">345600</span></span><br></pre></td></tr></table></figure>
<h3 id="Medicines-v3"><a href="#Medicines-v3" class="headerlink" title="Medicines v3"></a>Medicines v3</h3><p>该模组提供了一些药物用于人物和恐龙的快速回复</p>
<ul>
<li><p>简易绷带 (Imporvised Bandage)<br>2 级解锁。在 20s 内恢复最大生命值的 5%，有 30s 的冷却时间。一次性制作两个<br>人物与恐龙都可以使用</p>
</li>
<li><p>医疗站 (Medical Station)<br>10 级解锁。用于制作更高级的药品</p>
</li>
<li><p>一级药物<br>10 级解锁。在 20s 内恢复最大生命值的 10%，有 45s 的冷却时间。一次性制作两个<br>人物用品：绷带 (Bandages)<br>恐龙用品：药膏 (Salve)</p>
</li>
<li><p>二级药物<br>40 级解锁。在 10s 内恢复最大生命值的 20%，有 60s 冷却时间<br>人物用品：抗生素 (Antibiotics)<br>恐龙用品：镇痛剂、涂抹药 (Liniment)</p>
</li>
<li><p>三级药物<br>80 级解锁。在 10s 内恢复最大生命值的 50%，有 90s 冷却时间<br>人物用品：止痛药 (Painkillers)<br>恐龙用品：血清 (Serum)</p>
</li>
<li><p>90cc 镇静剂飞镖 (90cc Tranquilizer Dart)<br>80 级解锁。是普通麻醉飞镖的 10 倍效果</p>
</li>
<li><p>代谢药 (Metabolic Reagent)<br>30 级解锁。加速新陈代谢，在 15s 内减少 200 食物度和 50% 最大眩晕值，有 20s 冷却时间</p>
</li>
<li><p>苯二氮平类药物 (Benzodiazepine)<br>50 级解锁。一种极强的麻醉剂。在 15s 内提升最大眩晕值的 50%，有 20s 冷却时间</p>
</li>
<li><p>秘药 (Formula)<br>50 级解锁。提供一种飞龙奶的替代制品，同时可以给婴儿提供 25% 的留痕度。对人类没有效果</p>
</li>
<li><p>Omega-3s<br>90 级解锁。提供 25k 经验值，与服务器的任何经验值倍率无关</p>
</li>
<li><p>合成代谢类固醇 (Anabolic Steroid)<br>60 级解锁。在 90s 内获得 50% 伤害减免和 300% 耐力回复，有 300s 冷却时间</p>
</li>
</ul>
<h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><ul>
<li>路径：ARK\ShooterGame\Saved\Config\WindowsNoEditor</li>
<li>修改文件：GameUserSettings.ini</li>
<li><p>修改项：[Medicines]</p>
<ul>
<li>参数说明<ul>
<li><code>MedBenchSlot=100</code> 药物堆叠个数</li>
<li><code>MedBenchCraftSpeed=1.0</code> 药物制作速度</li>
<li><code>ImpBandageHeal=0.05</code> 简易绷带治疗效果（默认为 0.02% 最大生命值）</li>
<li><code>Tier1Heal=0.1</code> 一级药物治疗效果（默认为 10%）</li>
<li><code>Tier2Heal=0.2</code> 二级药物治疗效果（默认为 20%）</li>
<li><code>Tier3Heal=0.5</code> 三级药物治疗效果（默认为 50%）</li>
<li><code>MetabolicFood=200.0</code> 制作药品时需要消耗的食物数量（默认 2000%）</li>
<li><code>MetabolicTorpor=0.50</code> 制作药品时需要消耗的麻醉药数量（默认 50%）</li>
<li><code>ImprintBaby=True</code> 设置 Formula 药剂是否可以给婴儿增加留痕</li>
<li><code>FormulaImprint=0.25</code> 设置 Formula 药剂增加的留痕度</li>
<li><code>OmegaXP=25000</code> 设置 Omega-3s 药剂给的经验值数量</li>
<li><code>SteroidDmg=0.5</code> 设置类固醇 (Anabolic Steroid) 的减伤效果</li>
<li><code>SteroidStamina=3.0</code> 设置类固醇的耐力回复效果</li>
<li><code>SteroidDuration=90</code> 设置类固醇的持续时间</li>
</ul>
</li>
</ul>
</li>
<li><p>我的个人设置</p>
</li>
</ul>
<p>保持默认设置</p>
<h3 id="ARK-Additions-The-Collection"><a href="#ARK-Additions-The-Collection" class="headerlink" title="ARK Additions: The Collection"></a>ARK Additions: The Collection</h3><p>该模组添加了一系列新的恐龙</p>
<h4 id="Acrocanthosaurus-高脊龙"><a href="#Acrocanthosaurus-高脊龙" class="headerlink" title="Acrocanthosaurus 高脊龙"></a>Acrocanthosaurus 高脊龙</h4><p>野生高脊龙是一种食肉类恐龙，体型比霸王龙更大，对越小的目标造成的伤害越高。当他们受到伤害时会将高大的脊背露出来抵挡伤害（盾牌姿态），同时如果受到伤害过多（35% 最大生命值），他们会进入愤怒状态，这种状态下可以造成更高的伤害</p>
<p>高脊龙对普通的麻醉方式免疫，可以尝试通过激怒高脊龙在其吼叫时直接将麻醉药品放入其口中的方式驯服</p>
<h5 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h5><p>高脊龙可能出现在孤岛、焦土、中心岛、灭绝、创世纪一、仙境、瓦尔盖罗、水晶岛、迷失岛地图中</p>
<h5 id="掉落物"><a href="#掉落物" class="headerlink" title="掉落物"></a>掉落物</h5><p>可以掉落兽皮、生肉、优质生肉以及高脊龙肾上腺</p>
<p>高脊龙肾上腺是创造野蛮高脊龙的贡品</p>
<h5 id="对抗"><a href="#对抗" class="headerlink" title="对抗"></a>对抗</h5><p>想要杀死高脊龙，最好使用体型相近或更大的恐龙，这样可以保证受到的伤害最小。高脊龙在正常情况下跑得比生存者更快，因此，如果有必要可以通过造成一定伤害（最大生命值的 10%）来激活其盾牌姿态降低其移动速度</p>
<p>高脊龙在激活肾上腺素的情况下几乎可以造成两倍伤害</p>
<p>在对抗一只野生的或者没有骑手的高脊龙时，可以在其激活盾牌姿态后停止攻击，等待它从盾牌状态退出，这样就不会再激活肾上腺素状态</p>
<h5 id="驯服"><a href="#驯服" class="headerlink" title="驯服"></a>驯服</h5><p>高脊龙的驯服食物依次为卓越饲料、生羊肉、熟羊肉、优质生肉、优质熟肉、优质生鱼肉、优质熟鱼肉、生肉等</p>
<p>在驯服高脊龙时，需要将麻醉剂放到物品栏最后一格，然后攻击高脊龙使其进入咆哮状态，然后按 E 将麻醉剂从其口中送入，直到高脊龙倒地</p>
<p>可以尝试使用飞龙来驯服高脊龙，在困住高脊龙后，使用飞龙（推荐冰龙）来对高脊龙造成伤害并使其吼叫。火焰飞龙、闪电飞龙、毒龙不太推荐，因为可能影响驯养有效性</p>
<h5 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h5><ul>
<li>左键普通撕咬，当激活肾上腺素时攻速变快</li>
<li>右键激活盾牌姿态，在这种姿态下受到最大生命值的 10% 伤害可以进入肾上腺激活状态。在盾牌姿态下使用左键可以使用盾牌撞击，可以对金属建筑造成伤害</li>
<li>C 键进行践踏攻击，攻击伤害取决于被攻击对象与高脊龙的体重对比，在肾上腺状态下可以践踏 3 次</li>
<li>Ctrl 键吼叫</li>
</ul>
<h5 id="扮演角色"><a href="#扮演角色" class="headerlink" title="扮演角色"></a>扮演角色</h5><ul>
<li>坦克。高脊龙可以担当坦克角色，当激活盾牌状态时，受到伤害会积累肾上腺素值，一旦激活肾上腺状态，将会获得一个 35s 的 Buff：美妙 0.2% 生命值恢复，并且增加近战伤害，抗性和移动速度</li>
<li>顶级掠食者。高脊龙在面对体型较小的恐龙时有压倒性优势，但面对同级别及更高级的恐龙，如霸王龙和南巨时会有些吃力，推荐加点生命和攻击</li>
<li>吸收子弹。激活盾牌姿态吸收子弹</li>
<li>Boss 战斗。高脊龙可以被带入 Boss 竞技场参与击杀 Boss</li>
<li>石头人猎杀者。高脊龙的盾牌攻击不会被石头人减伤</li>
</ul>
<h5 id="Summon-Savage-Acro-野蛮高脊龙-Boss"><a href="#Summon-Savage-Acro-野蛮高脊龙-Boss" class="headerlink" title="Summon Savage Acro 野蛮高脊龙 Boss"></a>Summon Savage Acro 野蛮高脊龙 Boss</h5><p>使用高脊龙肾上腺腺体等材料制作野蛮高脊龙 Boss 的召唤物品。如果召唤就没有回头路，因此建议在空旷的场地召唤野蛮高脊龙。他的强度与君王泰坦相当。</p>
<h4 id="Brachiosaurus-腕龙"><a href="#Brachiosaurus-腕龙" class="headerlink" title="Brachiosaurus 腕龙"></a>Brachiosaurus 腕龙</h4><p>腕龙是一种温顺的食草性恐龙，当受到伤害时，他们会采用后脚站地的方式来保护自己，同时会将全身的重量用于践踏攻击。驯服后的腕龙可以采集木头、茅草、石头、金属等物品</p>
<h5 id="分布-1"><a href="#分布-1" class="headerlink" title="分布"></a>分布</h5><p>孤岛、中心岛、仙境、畸变、瓦尔盖罗、创世纪一和水晶岛</p>
<h5 id="掉落物-1"><a href="#掉落物-1" class="headerlink" title="掉落物"></a>掉落物</h5><p>兽皮、生肉、优质生肉</p>
<h5 id="对抗-1"><a href="#对抗-1" class="headerlink" title="对抗"></a>对抗</h5><p>应当使用灵活的恐龙或飞龙来对付腕龙。也可以使用步枪风筝腕龙，或使用模组生物高脊龙激活肾上腺状态来击杀腕龙</p>
<p>腕龙的吼叫可能导致任何生物的恐惧逃跑，因此在面对敌对腕龙时要特别注意它的吼叫</p>
<p>使用流血效果的武器或恐龙可以更好的击杀腕龙</p>
<h5 id="驯服-1"><a href="#驯服-1" class="headerlink" title="驯服"></a>驯服</h5><p>腕龙的驯服食物依次为卓越饲料、蔬菜、紫色浆果以及其他浆果。腕龙的眩晕值恢复的很快，因此请确保有足够的麻醉药使其保持眩晕状态</p>
<p>腕龙无法被正常的方式麻醉，需要在其抬高前腿时攻击后腿前部，当受到足够伤害时，腕龙就会眩晕。建议使用远程武器风筝</p>
<h5 id="控制-1"><a href="#控制-1" class="headerlink" title="控制"></a>控制</h5><ul>
<li>左键使用一条前腿进行践踏</li>
<li>右键使用一条后腿进行践踏</li>
<li>C 键触发双腿站立，这时使用左键进行双腿践踏</li>
<li>Ctrl 键发出吼叫，可以恐惧大部分生物</li>
<li>R 键循环采集效率，可以更改不同物资的采集效率</li>
</ul>
<h5 id="扮演角色-1"><a href="#扮演角色-1" class="headerlink" title="扮演角色"></a>扮演角色</h5><ul>
<li>采集者。腕龙可以采集木头、石头、金属、浆果、茅草等物资。对木头、石头、金属有 50% 减重效果</li>
<li>攻城武器。腕龙可以对所有类型的建筑造成大量伤害</li>
<li>毁灭者。腕龙的双脚践踏有很高的伤害，但是有 30s 的冷却时间，因此要在合适的时机释放</li>
<li>恐吓者。腕龙的吼叫可以让大部分生物逃跑</li>
<li>造粪机器。腕龙可以产生大量粪便</li>
<li>驯服助手。腕龙可以吼叫使得其他恐龙恐惧，被恐惧的恐龙将降低抗性，更容易被击晕。另外如果野生恐龙在被恐惧的情况下被击晕驯服，那么它起身时就会攻击让它恐惧的腕龙，通过收回冷冻仓再放出来可以解决这个问题</li>
<li>嘲讽者。有些生物在听到腕龙的吼叫后不会逃跑反而会攻击腕龙。同时也有一些生物完全不受腕龙吼叫影响</li>
</ul>
<p>附：听到腕龙吼叫会攻击的生物</p>
<ul>
<li>高脊龙</li>
<li>虫群</li>
<li>袋狮</li>
<li>血蛛</li>
<li>无名怪</li>
<li>泰坦巨蟒</li>
<li>死亡蠕虫</li>
<li>死神</li>
<li>雄性冰虫（仙境生物）</li>
<li>石头人</li>
</ul>
<h4 id="Ceratosaurus-角鼻龙"><a href="#Ceratosaurus-角鼻龙" class="headerlink" title="Ceratosaurus 角鼻龙"></a>Ceratosaurus 角鼻龙</h4><p>应当是一个专业的流血治疗师角色，但是具体信息未知，因为该恐龙还未正式发布</p>
<h4 id="Concavenator-驼背龙"><a href="#Concavenator-驼背龙" class="headerlink" title="Concavenator 驼背龙"></a>Concavenator 驼背龙</h4><p>驼背龙通常出现在沙地里，2-3 只一组，潜游在沙土之中。驼背龙有一个背包加成，这使得他们可以扬沙使得敌人窒息。驼背龙通常是一击就跑的典型</p>
<h5 id="分布-2"><a href="#分布-2" class="headerlink" title="分布"></a>分布</h5><p>焦土、仙境、畸变、灭绝、创世纪一、水晶岛</p>
<h5 id="掉落物-2"><a href="#掉落物-2" class="headerlink" title="掉落物"></a>掉落物</h5><p>兽皮、角质、生肉、优质生肉</p>
<h5 id="对抗-2"><a href="#对抗-2" class="headerlink" title="对抗"></a>对抗</h5><p>当遇到幸存者时，驼背龙会快速潜入地下不断攻击幸存者，直到他们被炸药逼出地底</p>
<p>推荐使用远程武器对抗驼背龙</p>
<p>没有氧气条的恐龙不受扬尘的影响，带有潜水装备或防毒面具的幸存者也不受扬尘影响，否则可能会被窒息（恐龙则是其他属性下降）</p>
<h5 id="驯服-2"><a href="#驯服-2" class="headerlink" title="驯服"></a>驯服</h5><p>驼背龙的驯服食物为上等饲料、生羊肉、熟羊肉、优质生肉等</p>
<p>要驯服驼背龙，首先需要使用 C4 将他们炸出地面，然后使用正常方式麻醉他们。虽然驼背龙可以被正常方式麻醉，但是推荐使用炸药的方式使其眩晕，因为他们脱离地底的时间很短，同时他们的眩晕值下降很快，使用麻醉镖等方式可能在眩晕前就将它们击杀。可以使用一堆炸药然后引爆的方式增加大量眩晕值，然后在快眩晕时只引爆一个炸药避免有效性降低</p>
<p>推荐在驯服时骑乘一个移速较快的恐龙，如似鸡龙或剑齿虎</p>
<p>也可以尝试使用冰龙来驯服</p>
<h5 id="控制-2"><a href="#控制-2" class="headerlink" title="控制"></a>控制</h5><ul>
<li>左键使用嘴咬</li>
<li>右键切换姿态，进入潜泳模式</li>
<li>C 键扬沙</li>
<li>空格键在潜泳状态下跳跃</li>
</ul>
<h5 id="扮演角色-2"><a href="#扮演角色-2" class="headerlink" title="扮演角色"></a>扮演角色</h5><ul>
<li>地底旅行者。可以骑乘他们在沙地快速移动</li>
<li>群体控制。扬沙可以造成范围伤害与控制</li>
</ul>
<h4 id="Cryolophosaurus-冰脊龙"><a href="#Cryolophosaurus-冰脊龙" class="headerlink" title="Cryolophosaurus 冰脊龙"></a>Cryolophosaurus 冰脊龙</h4><p>冰脊龙体型娇小，他们的喉咙里有一种冷冻剂，通过吸收水或雪可以填充。冰脊龙可以将冷冻剂吐出来形成一团有麻痹效果的气体，也可以把它呼出来形成一股寒冷的气流。如果它成功冻结一个个体，冰脊龙将进入一个兴奋状态，提高攻速、伤害和抗性。冰脊龙对于传统的驯服方式免疫，但是当他们呼出气体时他们的喉咙十分脆弱，这时可以向他们嘴里射击来使得他们冻结自己，从而被喂食</p>
<h5 id="分布-3"><a href="#分布-3" class="headerlink" title="分布"></a>分布</h5><p>孤岛、中心岛、仙境、瓦尔盖罗、水晶岛</p>
<h5 id="掉落物-3"><a href="#掉落物-3" class="headerlink" title="掉落物"></a>掉落物</h5><p>兽皮、生肉</p>
<h5 id="对抗-3"><a href="#对抗-3" class="headerlink" title="对抗"></a>对抗</h5><p>利用捕兽夹来阻止其移动，然后使用武器攻击。注意使用远程武器，并且需要规避他们的冰冻吐息和麻痹吐息</p>
<p>因为冰脊龙的生命值并不高，所以可以使用高等级高生物权限的恐龙直接击杀冰脊龙</p>
<h5 id="驯服-3"><a href="#驯服-3" class="headerlink" title="驯服"></a>驯服</h5><p>冰脊龙驯服食物为卓越饲料、生羊肉等</p>
<p>为了驯服冰脊龙，你需要在它喷射冰霜吐息时向他的头部射击，这会导致其低温吐息将自身冻住，然后就可以被喂养食物</p>
<h5 id="控制-3"><a href="#控制-3" class="headerlink" title="控制"></a>控制</h5><ul>
<li>左键普通攻击。当进入瞄准状态时，按下左键将喷射冰冻吐息</li>
<li>右键可以让冰脊龙通过水或雪填充冷冻液</li>
<li>C 键发射麻痹吐息</li>
<li>Ctrl 改变攻击姿态，切换为瞄准模式</li>
</ul>
<h5 id="扮演角色-3"><a href="#扮演角色-3" class="headerlink" title="扮演角色"></a>扮演角色</h5><ul>
<li>铠甲匠。当冰脊龙被驯服后，可以通过冰冻吐息来为友军增加一层 70% 减伤的冰霜护甲，但是会极大地降低他们的移动速度</li>
<li>驯服助手。他们的冷冻吐息和麻醉吐息可以很方便的帮助驯服其他恐龙。冰脊龙的冷冻液值取决于氧气值，麻醉效果取决于攻击力</li>
</ul>
<h4 id="Helicoprion-旋齿鲨"><a href="#Helicoprion-旋齿鲨" class="headerlink" title="Helicoprion 旋齿鲨"></a>Helicoprion 旋齿鲨</h4><p>等待信息更新</p>
<h4 id="Xiphactinus-剑射鱼"><a href="#Xiphactinus-剑射鱼" class="headerlink" title="Xiphactinus 剑射鱼"></a>Xiphactinus 剑射鱼</h4><p>等待信息更新</p>
<h3 id="ARK-Additions-Domination-Rex"><a href="#ARK-Additions-Domination-Rex" class="headerlink" title="ARK Additions: Domination Rex"></a>ARK Additions: Domination Rex</h3><p>该模组增加了一个新的恐龙：暴虐霸王龙，灵感来自于侏罗纪世界</p>
<h3 id="其他模组"><a href="#其他模组" class="headerlink" title="其他模组"></a>其他模组</h3><p>使用默认配置</p>
<h2 id="画面设置"><a href="#画面设置" class="headerlink" title="画面设置"></a>画面设置</h2><ul>
<li>分辨率：2560*1440</li>
<li>显示模式：全屏</li>
<li>分辨率缩放比例：100%</li>
<li>世界平铺缓冲区：极高</li>
<li>视野距离：极高</li>
<li>抗锯齿：低</li>
<li>后期处理：极高</li>
<li>阴影效果：高</li>
<li>地形阴影：高</li>
<li>纹理：高</li>
<li>天空品质：50%</li>
<li>地面杂物密度：0%</li>
<li>地面杂物距离：0%</li>
<li>网格层次细节：100%</li>
<li>[ ] 高品质各向异性过滤</li>
<li>[ ] 动态模糊</li>
<li>[ ] 噪点</li>
<li>[ ] 距离场环境遮挡</li>
<li>[x] 屏幕空间环境光吸收</li>
<li>[x] 允许增强的最大视距模式</li>
<li>[x] 距离场阴影</li>
<li>[x] 高质量材料</li>
<li>[x] 字表面散射</li>
<li>[x] 高质量VFX</li>
<li>[x] 简化远处角色的动画效果</li>
<li>[x] 高质量LOD</li>
<li>[ ] 额外关卡串流距离</li>
<li>[x] 颜色分级</li>
<li>[ ] 光晕效果</li>
<li>[x] 光线效果</li>
<li>[ ] 低质量关卡串流</li>
<li>整体界面缩放比例：100%</li>
<li>物品栏界面缩放比例：20%</li>
<li>镜头抖动幅度：10%</li>
<li>镜头视野：最大</li>
<li>水平灵敏度：默认</li>
<li>垂直灵敏度：默认</li>
<li>[ ] 反转Y轴</li>
<li>[ ] 第三人称镜头偏移</li>
<li>[ ] 禁用第三人称视角过渡效果</li>
<li>[x] NPC字幕</li>
</ul>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>方舟生存进化</tag>
      </tags>
  </entry>
  <entry>
    <title>流放者柯南游戏设置</title>
    <url>/2022/05/31/%E6%B5%81%E6%94%BE%E8%80%85%E6%9F%AF%E5%8D%97%E6%B8%B8%E6%88%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="游戏设置"><a href="#游戏设置" class="headerlink" title="游戏设置"></a>游戏设置</h2><h3 id="最大裸露设置"><a href="#最大裸露设置" class="headerlink" title="最大裸露设置"></a>最大裸露设置</h3><ol>
<li>更改 <em>Conan Exiles\ConanSandbox\Saved\Config\WindowsNoEditor</em> 路径下 <em>Game.ini</em> 文件中的 <code>NudityLevel=-1</code></li>
<li>更改 <em>Conan Exiles\ConanSandbox\Saved\Config\WindowsNoEditor</em> 路径下 <em>ServerSettings.ini</em> 文件中的 <code>MaxNudity=2</code></li>
<li>更改 <em>Conan Exiles\ConanSandbox\Config</em> 路径下 <em>DefaultServerSettings.ini</em> 文件中的 <code>MaxNudity=2</code></li>
<li>将以上三个文件更改为只读模式（如果不更改为只读模式，那么每次在游戏中申请管理员权限后更改游戏设置时会导致以上三个值被重置。在只读模式下如果需要更改游戏设置，可以去 <em>ServerSettings.ini</em> 文件中直接更改参数，改完再调整为只读）</li>
</ol>
<span id="more"></span>
<h3 id="单机游戏常用设置"><a href="#单机游戏常用设置" class="headerlink" title="单机游戏常用设置"></a>单机游戏常用设置</h3><p>被修改过的设置内容如下</p>
<ul>
<li><p>视频</p>
<ul>
<li>动态模糊：关闭</li>
<li>容积迷雾：关闭</li>
<li>垂直视野：74</li>
</ul>
</li>
<li><p>游戏</p>
<ul>
<li>总是显示生命条：打开</li>
<li>生命条最远显示范围：2</li>
<li>显示入鞘的武器：不显示</li>
</ul>
</li>
<li><p>按键设置</p>
<ul>
<li>命令：z</li>
<li>命令停止：x</li>
</ul>
</li>
<li><p>服务器设置</p>
<ul>
<li>概况<ul>
<li>预设为 “野蛮” 模式</li>
</ul>
</li>
<li>发展<ul>
<li>玩家XP比例系数：2</li>
<li>玩家击杀XP系数：1.5</li>
</ul>
</li>
<li>昼夜交替<ul>
<li>白天循环速度：1.5</li>
<li>夜晚时间速度：1.1</li>
</ul>
</li>
<li>生存<ul>
<li>耐力消耗系数：0.8</li>
</ul>
</li>
<li>收集<ul>
<li>收集资源的系数：3.0</li>
<li>资源重生速度系数：1.7</li>
</ul>
</li>
<li>制造<ul>
<li>制造时间系数：0.2</li>
<li>奴隶制造时间系数：0.02</li>
<li>燃料消耗时间系数：2.0</li>
</ul>
</li>
<li>扫荡<ul>
<li>扫荡计量表触发值：5000</li>
<li>扫荡计量表更新间隔：1</li>
</ul>
</li>
<li>宠物和饥饿<ul>
<li>动物围栏建造时间倍率：0.02</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模组设置"><a href="#模组设置" class="headerlink" title="模组设置"></a>模组设置</h2><h3 id="启用的模组"><a href="#启用的模组" class="headerlink" title="启用的模组"></a>启用的模组</h3><ul>
<li>ModControlPanel, id=1823412793。游戏内模组管理器</li>
<li>Hosav’s Custom UI Mod - 2.3.7, id=1797359985。替换游戏内的 HUD</li>
<li>LTs Compass(Minimap), id=1185321962。为游戏增加一个小地图</li>
<li>Female New Faces, id=2772364595。增加女性面貌调整预设</li>
<li>Male New Faces, id=2799362941。增加男性面貌调整预设</li>
<li>Improved Quality of Life 3.4.6，, id=2275543723。详细更改人物外貌，形体</li>
<li>Fashionist v4.2.3 id=1159180273。幻化武器，装备</li>
<li>Encumbrance weight base + per level, id=2040016698。增加人物负重</li>
<li>Bosses Be Thrallable, id=2521502042。使一些人形 BOSS 可被驯服</li>
<li>Improved Bodies Shaved Oiled Females, id=1537545571。为女性添加油性皮肤</li>
<li>Thralls are alive, id=2791028919。为奴隶添加一系列行为</li>
<li>PackRat Helper, id=2596031352。快速整理库存</li>
<li>SandstromEx, id=1759544356。扩展游戏内的沙尘天气</li>
<li>SnowstromEx, id=1799016310。为北部地区添加一个暴风雪天气</li>
<li>River Boats of the Exiled Lands, id=1545911731。为游戏的河流添加了港口和船只</li>
<li>LitMan Item Stack &amp; Container Size, id=1125427722。增加物品堆叠上限和容器容量大小</li>
<li>ExtendedCartography, id=1641464108。增加一个方尖碑复制品用于传送</li>
<li>Better Thralls v1.9.16, id=931088249。多随从</li>
<li>More Fighting, id=1794741816。使多个奴隶可以同时攻击</li>
<li>Kerozards Paragon Leveling - Reloaded - v2.3.6, id=1629644846。使人物可以升级到 300 级</li>
<li>PRN_NPCEquipmentLoot, id=1401061998。NPC 装备掉落</li>
<li>Extended Shortcut Bar v2.2.1, id=2646594159。装备栏快速切换</li>
<li>ThrallSideKick 0.5.7, id=1802389425。设置随从快速回城</li>
<li>Less Building Placement Restrictions -v7.4.2, id=1369743238。取消大部分建筑限制，并在建筑时提供箭头等帮助</li>
</ul>
<h3 id="未启用的模组"><a href="#未启用的模组" class="headerlink" title="未启用的模组"></a>未启用的模组</h3><ul>
<li>Stacksize Plus v1.7.17 (DLC compatible)</li>
<li>Waystones</li>
</ul>
<h3 id="ModControlPanel"><a href="#ModControlPanel" class="headerlink" title="ModControlPanel"></a>ModControlPanel</h3><p>该模组用于在游戏中调整部分 Mod 的配置。按 <code>shift + end</code> 或控制台输入 <code>DataCmd ModControlPanel</code> 即可打开 UI</p>
<h3 id="Hosav’s-Custom-UI-Mod-2-3-7"><a href="#Hosav’s-Custom-UI-Mod-2-3-7" class="headerlink" title="Hosav’s Custom UI Mod - 2.3.7"></a>Hosav’s Custom UI Mod - 2.3.7</h3><p>该模组提供一系列新的 HUD，同时兼容 IQOL 模组提供的 HUD，并且可以在设置中屏蔽掉 IQOL 的 HUD。提供一个 MiniMap，不过小地图可以使用另外的模组</p>
<p>在人物库存页面左下角的 <code>UI SETTINGS</code> 即可修改该模组的配置</p>
<img src="/2022/05/31/%E6%B5%81%E6%94%BE%E8%80%85%E6%9F%AF%E5%8D%97%E6%B8%B8%E6%88%8F%E8%AE%BE%E7%BD%AE/Hosav_UI.jpg" class="" title="Hosav" alt="s Custom UI Mod">
<p>具体设置内容可参考 &lt;<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1797359985&gt;">https://steamcommunity.com/sharedfiles/filedetails/?id=1797359985&gt;</a></p>
<h3 id="LTs-Compass-Minimap"><a href="#LTs-Compass-Minimap" class="headerlink" title="LTs Compass(Minimap)"></a>LTs Compass(Minimap)</h3><p>提供一个小地图，按 F8 进行设置</p>
<h3 id="Female-New-Faces"><a href="#Female-New-Faces" class="headerlink" title="Female New Faces"></a>Female New Faces</h3><p>添加 20 个女性人物面貌，3 个眼睛颜色，3 个皮肤颜色，7 个发型，可以在 IQOL 更改人物面貌时选择</p>
<h3 id="Male-New-Faces"><a href="#Male-New-Faces" class="headerlink" title="Male New Faces"></a>Male New Faces</h3><p>添加 5 个男性发型，可以在 IQOL 更改人物面貌时选择</p>
<h3 id="Improved-Quality-of-Life-3-4-6"><a href="#Improved-Quality-of-Life-3-4-6" class="headerlink" title="Improved Quality of Life 3.4.6"></a>Improved Quality of Life 3.4.6</h3><p>该模组添加了几个小的 HUD 模块，一个 MiniMap，可以详细设定、修改人物，奴隶的形体外貌</p>
<h3 id="Fashionist-v4-2-3"><a href="#Fashionist-v4-2-3" class="headerlink" title="Fashionist v4.2.3"></a>Fashionist v4.2.3</h3><p>该模组用于幻化玩家、奴隶的武器和护甲</p>
<p>将需要幻化的装备拖入人物装备右侧的格子即可幻化</p>
<h3 id="Encumbrance-weight-base-per-level"><a href="#Encumbrance-weight-base-per-level" class="headerlink" title="Encumbrance weight base + per level"></a>Encumbrance weight base + per level</h3><p>将基础的负重从 70 改为 200，人物每级加的负重从 7 增加为 15</p>
<h3 id="Bosses-Be-Thrallable"><a href="#Bosses-Be-Thrallable" class="headerlink" title="Bosses Be Thrallable"></a>Bosses Be Thrallable</h3><p>使以下 BOSS 可以被驯服</p>
<blockquote>
<p>Ladagara Daughter Of Ymir, Arena Champion, Samar the Blade, Enia the Searcher, Obsun of Hyrkania, Ness of Shem, Moras of the Sands, Hat’She the Mad, Seeker Ophelia, Brandt of Zingara, Szeth the Drunk, Bandit Leader, Razor Gord, Dunkas The Mad Eye, Black Corsair Elite, The Watcher Above, The Captain Below, The Ritual Keeper, Cultist of Dagon, Prisoner, Starving Prisoner, Aridis,Chosen of Sobek, Warrior of Sobek, Disciple of Sobek (Archer), Fang of Sobek, Emissary of Haon-Dor, Emissary of Tsathoggua, Brood-Guard Assin, Brood-Guard Issis.</p>
</blockquote>
<h3 id="Improved-Bodies-Shaved-Oiled-Females"><a href="#Improved-Bodies-Shaved-Oiled-Females" class="headerlink" title="Improved Bodies Shaved Oiled Females"></a>Improved Bodies Shaved Oiled Females</h3><p>为女性人物添加油性皮肤</p>
<h3 id="Thralls-are-alive"><a href="#Thralls-are-alive" class="headerlink" title="Thralls are alive"></a>Thralls are alive</h3><p>添加了一些物品来实现奴隶的一系列行为如射箭，睡觉等</p>
<h3 id="PackRat-Helper"><a href="#PackRat-Helper" class="headerlink" title="PackRat Helper"></a>PackRat Helper</h3><p><code>Shift + L</code> 将人物背包内的物品放到容器中（需要容器中有相应的物品至少一个）。如果将鼠标放到某一特定蓝图/破损物品上，则会拉取制造一个物品/修复该物品的资源</p>
<p><code>Ctrl + L</code> 将鼠标放到某一蓝图上，按键后输入相应数字，即可拉取制造对应数量物品的物资</p>
<p><code>Shift + =</code> 打开拉取物品的界面，可以自定拉取拥有的物品</p>
<p>该模组还可以通过 ModControlPanel 模组的控制面板来添加一些需要保留在背包内的物品</p>
<h3 id="SandstromEx"><a href="#SandstromEx" class="headerlink" title="SandstromEx"></a>SandstromEx</h3><p>扩展游戏内的沙尘路径，增加为 5 条路径。可以通过 ModControlPanel 模组更改配置</p>
<h3 id="SnowstromEx"><a href="#SnowstromEx" class="headerlink" title="SnowstromEx"></a>SnowstromEx</h3><p>为地图北部地区添加一个暴风雪天气，只有一条路径。可通过 ModControlPanel 模组配置具体的降温参数</p>
<h3 id="River-Boats-of-the-Exiled-Lands"><a href="#River-Boats-of-the-Exiled-Lands" class="headerlink" title="River Boats of the Exiled Lands"></a>River Boats of the Exiled Lands</h3><p>在游戏南部及西部的河流添加了数个港口和船只，可在 ModControlPanel 中更改配置</p>
<h3 id="LitMan-Item-Stack-amp-Container-Size"><a href="#LitMan-Item-Stack-amp-Container-Size" class="headerlink" title="LitMan Item Stack &amp; Container Size"></a>LitMan Item Stack &amp; Container Size</h3><p>增加物品 10 倍堆栈，容器 10 倍大小</p>
<h3 id="ExtendedCartography"><a href="#ExtendedCartography" class="headerlink" title="ExtendedCartography"></a>ExtendedCartography</h3><p>为游戏内增加一个方尖碑复制品用于传送</p>
<h3 id="Better-Thralls-v1-9-16"><a href="#Better-Thralls-v1-9-16" class="headerlink" title="Better Thralls v1.9.16"></a>Better Thralls v1.9.16</h3><p>更好的随从，可以让玩家同时携带多个随从，需要搭配 More Fighting 一起使用，否则随从攻击欲望低</p>
<h3 id="More-Fighting"><a href="#More-Fighting" class="headerlink" title="More Fighting"></a>More Fighting</h3><p>使多个奴隶可以同时攻击</p>
<h3 id="Kerozards-Paragon-Leveling-Reloaded-v2-3-6"><a href="#Kerozards-Paragon-Leveling-Reloaded-v2-3-6" class="headerlink" title="Kerozards Paragon Leveling - Reloaded - v2.3.6"></a>Kerozards Paragon Leveling - Reloaded - v2.3.6</h3><p>使人物可以升级到 300 级。同时在 60 级后每 10 级可以增加一个新特性，特性可在人物统计界面更改</p>
<h3 id="PRN-NPCEquipmentLoot"><a href="#PRN-NPCEquipmentLoot" class="headerlink" title="PRN_NPCEquipmentLoot"></a>PRN_NPCEquipmentLoot</h3><p>现在杀死 NPC 后有机会掉落他们穿的衣服和武器</p>
<h3 id="Extended-Shortcut-Bar-v2-2-1"><a href="#Extended-Shortcut-Bar-v2-2-1" class="headerlink" title="Extended Shortcut Bar v2.2.1"></a>Extended Shortcut Bar v2.2.1</h3><p>为装备栏添加快捷切换的方式，现在可以有三种多余的工具栏配置</p>
<h3 id="ThrallSideKick-0-5-7"><a href="#ThrallSideKick-0-5-7" class="headerlink" title="ThrallSideKick 0.5.7"></a>ThrallSideKick 0.5.7</h3><p>为奴隶设置一个归家点，可以让他们被传送回该点位。同时可以绑定最多 6 个奴隶用于召唤</p>
<h3 id="Less-Building-Placement-Restrictions-v7-4-2"><a href="#Less-Building-Placement-Restrictions-v7-4-2" class="headerlink" title="Less Building Placement Restrictions -v7.4.2"></a>Less Building Placement Restrictions -v7.4.2</h3><p>用于辅助建筑，可在 ModControlPanel 中调整设置</p>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>流放者柯南</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云CentOS搭建饥荒服务器</title>
    <url>/2022/08/04/%E9%98%BF%E9%87%8C%E4%BA%91CentOS%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>操作系统：CentOS 8.5<br>饥荒版本：v518018</p>
<span id="more"></span>
<h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><ul>
<li><code>[local]</code> 符号表示任意用户均可执行该条命令</li>
<li><code>[root]</code> 符号表示需要使用 root 用户执行命令，如果是一般用户，执行命令时需要使用 <code>sudo</code> 前缀</li>
<li><code>(output)</code> 表示命令输出结果</li>
</ul>
<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol>
<li><p>可以考虑创建一个专门的 dst(Don’t Starve Together) 的用户,也可以直接使用 root 用户</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需创建 dst 用户，执行以下命令</span></span><br><span class="line">[root] useradd -m dst</span><br><span class="line">[root] cd /home/dst</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装相关依赖</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root] yum -y install glibc.i686 libstdc++.i686 screen libcurl.i686 lrzsz</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 steamCMD, 并下载饥荒的服务器文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">pwd</span> 查看当前所在路径，如果使用 root 用户，需要确保路径为 /root，如果使用 dst 用户，需要确保路径为 /home/dst</span></span><br><span class="line">[root] pwd</span><br><span class="line">(output) /root</span><br><span class="line"></span><br><span class="line">[root] mkdir steamcmd</span><br><span class="line">[root] cd steamcmd</span><br><span class="line">[root] wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class="line">[root] tar -xvzf steamcmd_linux.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一步打开 steamcmd，进入 steamcmd 命令行界面</span></span><br><span class="line">[root] ./steamcmd.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下命令在 steamcmd 中执行</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令指定 dst 安装目录</span></span><br><span class="line"><span class="meta prompt_">Steam&gt; </span><span class="language-bash">force_install_dir ~/dst</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名登录</span></span><br><span class="line"><span class="meta prompt_">Steam&gt; </span><span class="language-bash">login anonymous</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 dst，343050 是指饥荒</span></span><br><span class="line"><span class="meta prompt_">Steam&gt; </span><span class="language-bash">app_update 343050</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载完成后使用该命令验证</span></span><br><span class="line"><span class="meta prompt_">Steam&gt; </span><span class="language-bash">validate</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出</span></span><br><span class="line"><span class="meta prompt_">Steam&gt; </span><span class="language-bash">quit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否缺乏相关依赖</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root] cd ~/dst/bin</span><br><span class="line">[root] ldd dontstarve_dedicated_server_nullrenderer</span><br><span class="line">[root] ./dontstarve_dedicated_server_nullrenderer</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有报错，可参考以下内容</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib/libstdc++.so.6: version &#x27;GLIBCXX_3.4.15&#x27; not found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般是因为安装的C运行库版本过低导致的，比如说CentOS从YUM源中安装的仅支持GLIBCXX到3.4.13</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所幸SteamCMD中也需要该动态链接库，并且自带了该动态链接库，只需要拷贝至DST文件夹中即可</span></span><br><span class="line">[root] cp ~/steamcmd/linux32/libstdc++.so.6 ~/dst/bin/lib32/</span><br><span class="line"></span><br><span class="line">/lib/libc.so.6: version &#x27;GLIBC_2.15&#x27; not found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般是因为安装的glibc版本过低导致的，比如说CentOS从YUM源中安装的仅有2.12版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从Klei官方提供的链接下载与glibc相关的3个文件，Debian系也是这样解决</span></span><br><span class="line">[root] cd ~/dst/bin/lib32/</span><br><span class="line">[root] wget https://github.com/dgibbs64/linuxgameservers/raw/master/Insurgency/dependencies/libc.so.6</span><br><span class="line">[root] wget https://github.com/dgibbs64/linuxgameservers/raw/master/Insurgency/dependencies/libpthread.so.0</span><br><span class="line">[root] wget https://github.com/dgibbs64/linuxgameservers/raw/master/Insurgency/dependencies/librt.so.1</span><br><span class="line"></span><br><span class="line">error while loading shared libraries: libcurl-gnutls.so.4: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是因为系统没有搜索到该文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">cp</span>方法运行时会出现./lib32/libcurl-gnutls.so.4: no version information available警告，无视之~</span></span><br><span class="line">[root] sudo apt-get install libcurl4-gnutls-dev:i386 #Debian系</span><br><span class="line">[root] cp /usr/lib/libcurl.so.4 ~/dst/bin/lib32/libcurl-gnutls.so.4 #RedHat系，Debian系未测试该方法是否可行</span><br></pre></td></tr></table></figure>
</li>
<li><p>试运行服务器</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root] cd /dst/bin</span><br><span class="line">[root] echo ./dontstarve_dedicated_server_nullrenderer -console -cluster MyDediServer -shard Master &gt; dst_overworld.sh</span><br><span class="line">[root] echo ./dontstarve_dedicated_server_nullrenderer -console -cluster MyDediServer -shard Caves &gt; dst_caves.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行该命令后等待出现如下内容后，使用 Ctrl + C 终止</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[200] Account Failed (6): <span class="string">&quot;E_INVALID_TOKEN&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!!!! Your Server Will Not Start !!!!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line"></span><br><span class="line">[root] sh dst_overworld.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行该命令后等待出现 Your Server Will Not Start 后，使用 Ctrl + C 终止</span></span><br><span class="line">[root] sh dst_caves.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除之前创建的默认文件</span></span><br><span class="line">[root] rm -rf ~/.klei/DoNotStarveTogether/Cluster_*</span><br></pre></td></tr></table></figure>
<p>这一步会在 <em>~/.klei/DoNotStarveTogether/</em> 下生成一个 <em>MyDediServer</em> 文件夹，其中 <em>Master</em> 指地上，<em>Caves</em> 指洞穴</p>
</li>
<li><p>可删除 <em>MyDediServer</em> 文件夹 <code>rm -f ~/.klei/DoNotStarveTogether/MyDediServer</code>，因为该文件夹后续将会被替换</p>
</li>
<li>配置 token<ol>
<li>打开游戏客户端，找到 <strong>Account</strong> 按钮，点击进入用户界面</li>
<li>在上方的菜单栏中选择 <strong>游戏</strong>，再选择 <strong>《饥荒：联机版》的游戏服务器</strong> <img src="/2022/08/04/%E9%98%BF%E9%87%8C%E4%BA%91CentOS%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8/Klei_1.jpg" class="" title="Klei_1"></li>
<li>如果没有建过服务器，则选择 <strong>添加新服务器</strong></li>
<li>选择配置服务器 <img src="/2022/08/04/%E9%98%BF%E9%87%8C%E4%BA%91CentOS%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8/Klei_2.jpg" class="" title="Klei_2"></li>
<li>配置服务器为想要的设置，然后下载设置</li>
<li>下载后的文件为 <em>MyDediServer</em>，其中包含文件 <em>Master</em>, <em>Caves</em>, <em>cluster.ini</em>, <em>cluster_token.ini</em></li>
</ol>
</li>
<li>在本地新建一个存档，配置好想要的世界设置以及模组。加载好服务器到选人界面退出即可</li>
<li>退出后在 Steam 库存中右键饥荒，打开它的本地文件，找到刚刚创建的服务器存档，如果是第一个档，名字就是 <em>Cluster_1</em>，如果是第二个就是 <em>Cluster_2</em>，以此类推。也可以直接在游戏中选择对应存档，点击右上角扳手图标，选择“打开本地文件”</li>
<li>将 <em>Cluster_1</em> 中 <em>Master</em> 和 <em>Caves</em> 中的除 <em>server.ini</em> 外的文件复制到刚刚下载的 <em>MyDediServer</em> 对应的文件夹中</li>
<li>将 <em>MyDediServer</em> 复制到 <em>DoNotStarveTogether</em> 目录下<ol>
<li>在当前文件夹打开 cmd 或 git bash 使用 <code>scp -r MyDediServer root@xxx:~/.klei/DoNotStarveTogether/</code> 命令上传</li>
<li>或使用 ftp 工具上传</li>
</ol>
</li>
<li><p>如果有配置 mod，则需要修改 <em>~/dst/mods/dedicated_server_mods_setup.lua</em> 文件，将需要加载的 mod id 添加进该文件。可以通过 <em>MyDediServer/Master/modoverrides.lua</em> 文件中的 <code>[&quot;workshop-XXXXXXXXX&quot;]</code> 中得到 mod id 或直接去创意工坊查看对应 mod id</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ServerModSetup(<span class="string">&quot;mod_id&quot;</span>) <span class="comment">--mod_id 为需要加载的 mod 的 id，有多少 mod 就需要加多少行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器</p>
<ol>
<li><p>方式一：使用一个脚本同时启动地上与洞穴。在 <em>/root</em> 下新建脚本 <em>startup.sh</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这些路径，根据实际情况修改</span></span><br><span class="line">steamcmd_dir=&quot;$HOME/steamcmd&quot;</span><br><span class="line">install_dir=&quot;$HOME/dst&quot;</span><br><span class="line">cluster_name=&quot;MyDediServer&quot;</span><br><span class="line">dontstarve_dir=&quot;$HOME/.klei/DoNotStarveTogether&quot;</span><br><span class="line"></span><br><span class="line">function fail()</span><br><span class="line">&#123;</span><br><span class="line">        echo Error: &quot;$@&quot; &gt;&amp;2</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_for_file()</span><br><span class="line">&#123;</span><br><span class="line">    if [ ! -e &quot;$1&quot; ]; then</span><br><span class="line">            fail &quot;Missing file: $1&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cd &quot;$steamcmd_dir&quot; || fail &quot;Missing $steamcmd_dir directory!&quot;</span><br><span class="line"></span><br><span class="line">check_for_file &quot;steamcmd.sh&quot;</span><br><span class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/cluster.ini&quot;</span><br><span class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/cluster_token.txt&quot;</span><br><span class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/Master/server.ini&quot;</span><br><span class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/Caves/server.ini&quot;</span><br><span class="line">check_for_file &quot;$install_dir/bin&quot;</span><br><span class="line"></span><br><span class="line">cd &quot;$install_dir/bin&quot; || fail</span><br><span class="line"></span><br><span class="line">run_shared=(./dontstarve_dedicated_server_nullrenderer)</span><br><span class="line">run_shared+=(-console)</span><br><span class="line">run_shared+=(-cluster &quot;$cluster_name&quot;)</span><br><span class="line">run_shared+=(-monitor_parent_process $$)</span><br><span class="line">run_shared+=(-shard)</span><br><span class="line"></span><br><span class="line">&quot;$&#123;run_shared[@]&#125;&quot; Caves | sed &#x27;s/^/Caves: /&#x27; &amp;</span><br><span class="line">&quot;$&#123;run_shared[@]&#125;&quot; Master | sed &#x27;s/^/Master: /&#x27;</span><br></pre></td></tr></table></figure>
<p>赋予脚本执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root] chmod 777 ~/startup.sh</span><br></pre></td></tr></table></figure>
<p>开启一个虚拟窗口并运行脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root] screen -S dst</span><br><span class="line">[screen] source startup.sh</span><br></pre></td></tr></table></figure>
<p>成功启动后按下 Ctrl+A, D 最小化虚拟窗口，使其在后台运行</p>
</li>
<li><p>方式二：分别运行地上与地下的启动脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S ground</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl + A，然后按 D 退出窗口</span></span><br><span class="line">screen -S cave</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl + A，然后按 D 退出窗口</span></span><br><span class="line">screen -r ground</span><br><span class="line">source dst_overworld.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl + A，然后按 D 退出窗口</span></span><br><span class="line">screen -r cave</span><br><span class="line">source dst_caves.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl + A，然后按 D 退出窗口</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="服务器世界设定"><a href="#服务器世界设定" class="headerlink" title="服务器世界设定"></a>服务器世界设定</h2><h3 id="主世界"><a href="#主世界" class="headerlink" title="主世界"></a>主世界</h3><ul>
<li><p>世界选项</p>
<ul>
<li>冒险家<ul>
<li>额外起始资源：总是</li>
</ul>
</li>
</ul>
</li>
<li><p>世界生成</p>
<ul>
<li>巨石：较多</li>
<li>燧石：较多</li>
</ul>
</li>
</ul>
<h3 id="洞穴"><a href="#洞穴" class="headerlink" title="洞穴"></a>洞穴</h3><p>保持默认</p>
<h2 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h2><p>可以打开 <strong>选项——高级——自动订阅模组</strong></p>
<h2 id="客户端-mod"><a href="#客户端-mod" class="headerlink" title="客户端 mod"></a>客户端 mod</h2><p>客户端 Mod 不影响进入服务器，可根据需要选择下载。已下为我的 Mod 配置</p>
<h3 id="已启用"><a href="#已启用" class="headerlink" title="已启用"></a>已启用</h3><ul>
<li>ActionQueue RB2 (RWYS supported), id=2325441848。动作队列 Mod</li>
<li>排队论加强, id=2753482847。在 ActionQueue 的基础上增加一些功能</li>
<li>Combined Status, id=376333686。增强的人物状态显示</li>
<li>Craft Pot [DS, ROG, SW, DST], id=727774324。在烹饪时显示配方等信息</li>
<li>[DST] Nightmare HUD, id=1992293314。暗黑系 UI 风格</li>
<li>Geometric Placement, id=351325790。几何种地必备</li>
<li>Minimap HUD, id=345692228。增加一个小地图</li>
<li>Show Nicknames 显示昵称（客户端）, id=956206484。在人物头上显示他们的昵称</li>
<li>Wormhole Icons (Fixed Again), id=2831613121。添加虫洞标记</li>
<li>Celestial HUD, id=2571443104。天空色 UI</li>
</ul>
<h3 id="未启用"><a href="#未启用" class="headerlink" title="未启用"></a>未启用</h3><ul>
<li>[DST]HD Item Icon 高清图标 - Shang, id=2260439333。物品图标的高清化，但是新版还没有更新</li>
</ul>
<h3 id="Mod-配置"><a href="#Mod-配置" class="headerlink" title="Mod 配置"></a>Mod 配置</h3><p>针对每个 Mod 的个性化配置，仅供参考</p>
<h4 id="ActionQueue-RB2-RWYS-supported"><a href="#ActionQueue-RB2-RWYS-supported" class="headerlink" title="ActionQueue RB2 (RWYS supported)"></a>ActionQueue RB2 (RWYS supported)</h4><p>更改以下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用自动收集</span></span><br><span class="line">Enable auto-collect by default: True</span><br><span class="line"><span class="comment"># 最近的建筑蓝图快捷键</span></span><br><span class="line">Craft last recipe key: G</span><br></pre></td></tr></table></figure>
<h4 id="MiniMap-HUD"><a href="#MiniMap-HUD" class="headerlink" title="MiniMap HUD"></a>MiniMap HUD</h4><p>更改以下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Minimap Size: Large</span><br><span class="line"></span><br><span class="line">Position: Top Left</span><br></pre></td></tr></table></figure>
<h4 id="排队论加强"><a href="#排队论加强" class="headerlink" title="排队论加强"></a>排队论加强</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">工具位置：身上所有地方</span><br><span class="line">收集物品：原版全收集</span><br><span class="line">自动制造工具：制作</span><br><span class="line">提灯砍树：开</span><br></pre></td></tr></table></figure>
<h2 id="服务器-Mod"><a href="#服务器-Mod" class="headerlink" title="服务器 Mod"></a>服务器 Mod</h2><p>如果要进入有 Mod 的服务器，则必须安装对应的 Mod 才可以</p>
<p>以下是我的服务器 Mod 配置</p>
<h3 id="已启用-1"><a href="#已启用-1" class="headerlink" title="已启用"></a>已启用</h3><ul>
<li>45 Inventory Slots with Equip Inventory (fixed the WX lightning bug), id=2802552738。增加 45 格背包空间</li>
<li>Extra Equip Slot Plus +, id=2823530744。增加装备格子</li>
<li>Don’t Drop Everything, id=661253977。死亡不掉落物品</li>
<li>Fast Travel (GUI), id=1530801499。使用小木牌传送</li>
<li>Global Positions, id=378160973。可以在地图上打标记</li>
<li>Show Me(中文), id=2287303119。丰富物品信息，可与 Health Info 共用</li>
<li>Health Info, id=375859599。显示人和怪物的血量</li>
<li>No More Respawn Penalty, id=356420397。人物重生后不会是半血状态</li>
<li>Quick Pick, id=501385076。快速采集</li>
<li>可靠的温迪, id=1253178451。增强温蒂</li>
<li>[DST] Storeroom, id=623749604。一个大的储物箱</li>
</ul>
<h3 id="未启用-1"><a href="#未启用-1" class="headerlink" title="未启用"></a>未启用</h3><ul>
<li>分享统计资料, id=2187805379。该 Mod 可以使全服务器的所有人共用一个状态，一个血量等</li>
<li>OP Weapon Pack, id=2139920478。一些武器包</li>
<li>Myth Words Theme-神话书说主题, id=1991746508。神话书说主题</li>
<li>Myth Words Characters 神话书说角色, id=1699194522。添加了一些角色</li>
</ul>
<h3 id="Mod-配置-1"><a href="#Mod-配置-1" class="headerlink" title="Mod 配置"></a>Mod 配置</h3><p>服务器 Mod 配置由服主完成</p>
<h4 id="DST-Storeroom"><a href="#DST-Storeroom" class="headerlink" title="[DST] Storeroom"></a>[DST] Storeroom</h4><p>更改以下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Food Spoliage: Little Slower</span><br><span class="line"></span><br><span class="line">Language: Chinese</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>饥荒</tag>
      </tags>
  </entry>
</search>
